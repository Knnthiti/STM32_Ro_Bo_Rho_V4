
Ro_Bo_Rho_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec80  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800ee08  0800ee08  0000fe08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f110  0800f110  00011170  2**0
                  CONTENTS
  4 .ARM          00000008  0800f110  0800f110  00010110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f118  0800f118  00011170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f118  0800f118  00010118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f11c  0800f11c  0001011c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800f120  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011170  2**0
                  CONTENTS
 10 .bss          00002464  20000170  20000170  00011170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200025d4  200025d4  00011170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb2d  00000000  00000000  000111a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004991  00000000  00000000  00030ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  00035660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015ce  00000000  00000000  00037258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ad2  00000000  00000000  00038826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f35  00000000  00000000  000602f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e13e0  00000000  00000000  0008622d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016760d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d44  00000000  00000000  00167650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0016f394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800edf0 	.word	0x0800edf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	0800edf0 	.word	0x0800edf0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b598      	push	{r3, r4, r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f001 fdb0 	bl	80029e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f9c8 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 ff12 	bl	8001cb4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e90:	f000 fb3c 	bl	800150c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e94:	f000 fbe2 	bl	800165c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000e98:	f000 fa2a 	bl	80012f0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e9c:	f000 faa8 	bl	80013f0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ea0:	f000 fadc 	bl	800145c <MX_TIM1_Init>
  MX_TIM8_Init();
 8000ea4:	f000 fc82 	bl	80017ac <MX_TIM8_Init>
  MX_TIM9_Init();
 8000ea8:	f000 fcd8 	bl	800185c <MX_TIM9_Init>
  MX_TIM10_Init();
 8000eac:	f000 fd26 	bl	80018fc <MX_TIM10_Init>
  MX_TIM11_Init();
 8000eb0:	f000 fd72 	bl	8001998 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000eb4:	f000 fdbe 	bl	8001a34 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000eb8:	f000 fe0c 	bl	8001ad4 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000ebc:	f000 fe58 	bl	8001b70 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 fece 	bl	8001c60 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ec4:	f00b fe80 	bl	800cbc8 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000ec8:	f000 fea0 	bl	8001c0c <MX_UART4_Init>
  MX_I2C2_Init();
 8000ecc:	f000 fa62 	bl	8001394 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000ed0:	f000 fb70 	bl	80015b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ed4:	f000 fc16 	bl	8001704 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	Motor_setup_LF(&htim14, &htim5, "PC05");
 8000ed8:	4aab      	ldr	r2, [pc, #684]	@ (8001188 <main+0x308>)
 8000eda:	49ac      	ldr	r1, [pc, #688]	@ (800118c <main+0x30c>)
 8000edc:	48ac      	ldr	r0, [pc, #688]	@ (8001190 <main+0x310>)
 8000ede:	f008 fa97 	bl	8009410 <Motor_setup_LF>
	Motor_setup_LB(&htim12, &htim1, "PE12");
 8000ee2:	4aac      	ldr	r2, [pc, #688]	@ (8001194 <main+0x314>)
 8000ee4:	49ac      	ldr	r1, [pc, #688]	@ (8001198 <main+0x318>)
 8000ee6:	48ad      	ldr	r0, [pc, #692]	@ (800119c <main+0x31c>)
 8000ee8:	f008 fac0 	bl	800946c <Motor_setup_LB>
	Motor_setup_RF(&htim11, &htim8, "PE01");
 8000eec:	4aac      	ldr	r2, [pc, #688]	@ (80011a0 <main+0x320>)
 8000eee:	49ad      	ldr	r1, [pc, #692]	@ (80011a4 <main+0x324>)
 8000ef0:	48ad      	ldr	r0, [pc, #692]	@ (80011a8 <main+0x328>)
 8000ef2:	f008 fae9 	bl	80094c8 <Motor_setup_RF>
	Motor_setup_RB(&htim12, &htim4, "PD09");
 8000ef6:	4aad      	ldr	r2, [pc, #692]	@ (80011ac <main+0x32c>)
 8000ef8:	49ad      	ldr	r1, [pc, #692]	@ (80011b0 <main+0x330>)
 8000efa:	48a8      	ldr	r0, [pc, #672]	@ (800119c <main+0x31c>)
 8000efc:	f008 fb12 	bl	8009524 <Motor_setup_RB>

	Motor_setup_EXTRA1(&htim10, &htim2, "PE00");
 8000f00:	4aac      	ldr	r2, [pc, #688]	@ (80011b4 <main+0x334>)
 8000f02:	49ad      	ldr	r1, [pc, #692]	@ (80011b8 <main+0x338>)
 8000f04:	48ad      	ldr	r0, [pc, #692]	@ (80011bc <main+0x33c>)
 8000f06:	f008 fb3b 	bl	8009580 <Motor_setup_EXTRA1>
	Motor_setup_EXTRA2(&htim9, &htim3, "PC13");
 8000f0a:	4aad      	ldr	r2, [pc, #692]	@ (80011c0 <main+0x340>)
 8000f0c:	49ad      	ldr	r1, [pc, #692]	@ (80011c4 <main+0x344>)
 8000f0e:	48ae      	ldr	r0, [pc, #696]	@ (80011c8 <main+0x348>)
 8000f10:	f008 fb64 	bl	80095dc <Motor_setup_EXTRA2>

	//	HAL_TIMEx_PWMN_Start(&htim9, TIM_CHANNEL_2);

	Setup_Gear_Ratio(27);
 8000f14:	201b      	movs	r0, #27
 8000f16:	f008 fbc9 	bl	80096ac <Setup_Gear_Ratio>
	Setup_CPR(68);
 8000f1a:	2044      	movs	r0, #68	@ 0x44
 8000f1c:	f008 fbb6 	bl	800968c <Setup_CPR>
	Setup_frequency_Motor(100);
 8000f20:	2064      	movs	r0, #100	@ 0x64
 8000f22:	f008 fba3 	bl	800966c <Setup_frequency_Motor>

	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _LF);
 8000f26:	2000      	movs	r0, #0
 8000f28:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 80011cc <main+0x34c>
 8000f2c:	eddf 1aa8 	vldr	s3, [pc, #672]	@ 80011d0 <main+0x350>
 8000f30:	ed9f 1aa8 	vldr	s2, [pc, #672]	@ 80011d4 <main+0x354>
 8000f34:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 80011d8 <main+0x358>
 8000f38:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f3c:	f008 fc66 	bl	800980c <Setup_PID_Wheel>
	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _LB);
 8000f40:	2001      	movs	r0, #1
 8000f42:	ed9f 2aa2 	vldr	s4, [pc, #648]	@ 80011cc <main+0x34c>
 8000f46:	eddf 1aa2 	vldr	s3, [pc, #648]	@ 80011d0 <main+0x350>
 8000f4a:	ed9f 1aa2 	vldr	s2, [pc, #648]	@ 80011d4 <main+0x354>
 8000f4e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 80011d8 <main+0x358>
 8000f52:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f56:	f008 fc59 	bl	800980c <Setup_PID_Wheel>
	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _RF);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	ed9f 2a9b 	vldr	s4, [pc, #620]	@ 80011cc <main+0x34c>
 8000f60:	eddf 1a9b 	vldr	s3, [pc, #620]	@ 80011d0 <main+0x350>
 8000f64:	ed9f 1a9b 	vldr	s2, [pc, #620]	@ 80011d4 <main+0x354>
 8000f68:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 80011d8 <main+0x358>
 8000f6c:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f70:	f008 fc4c 	bl	800980c <Setup_PID_Wheel>
	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _RB);
 8000f74:	2003      	movs	r0, #3
 8000f76:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80011cc <main+0x34c>
 8000f7a:	eddf 1a95 	vldr	s3, [pc, #596]	@ 80011d0 <main+0x350>
 8000f7e:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 80011d4 <main+0x354>
 8000f82:	eddf 0a95 	vldr	s1, [pc, #596]	@ 80011d8 <main+0x358>
 8000f86:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f8a:	f008 fc3f 	bl	800980c <Setup_PID_Wheel>

	//	Setup_PID_Wheel(1.0, 0.0, 0.2, 0, 300, _EXTRA1);
	//	Setup_PID_Wheel(1.0, 0.0, 0.2, 0, 300, _EXTRA2);

	Setup_Ramp_Count(1.5, 0.004, 0.1, 13790.0, 2700.0);
 8000f8e:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80011dc <main+0x35c>
 8000f92:	eddf 1a93 	vldr	s3, [pc, #588]	@ 80011e0 <main+0x360>
 8000f96:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 80011d4 <main+0x354>
 8000f9a:	eddf 0a92 	vldr	s1, [pc, #584]	@ 80011e4 <main+0x364>
 8000f9e:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000fa2:	f009 fd1b 	bl	800a9dc <Setup_Ramp_Count>

	//	Setup_frequency_Forward_Kinematic(100);
	//  Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);

	Setup_Inverse_Kinematic(0.23f, 0.23f, 0.06f);
 8000fa6:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 80011e8 <main+0x368>
 8000faa:	eddf 0a90 	vldr	s1, [pc, #576]	@ 80011ec <main+0x36c>
 8000fae:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80011ec <main+0x36c>
 8000fb2:	f009 fb9d 	bl	800a6f0 <Setup_Inverse_Kinematic>

	HAL_UART_Receive_IT(&huart2, (uint8_t*) &Str_PS2, sizeof(Str_PS2));
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	498d      	ldr	r1, [pc, #564]	@ (80011f0 <main+0x370>)
 8000fba:	488e      	ldr	r0, [pc, #568]	@ (80011f4 <main+0x374>)
 8000fbc:	f005 fc28 	bl	8006810 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if ((uwTick - PastTime) > 10) {
 8000fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80011f8 <main+0x378>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a8d      	ldr	r2, [pc, #564]	@ (80011fc <main+0x37c>)
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d9f8      	bls.n	8000fc0 <main+0x140>
			PastTime = uwTick;
 8000fce:	4b8a      	ldr	r3, [pc, #552]	@ (80011f8 <main+0x378>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b89      	ldr	r3, [pc, #548]	@ (80011fc <main+0x37c>)
 8000fd6:	601a      	str	r2, [r3, #0]

			digitalWrite("PE15", (UART_Runner(&huart2) == 1) ? 1 : 0);
 8000fd8:	4886      	ldr	r0, [pc, #536]	@ (80011f4 <main+0x374>)
 8000fda:	f009 fdeb 	bl	800abb4 <UART_Runner>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	4884      	ldr	r0, [pc, #528]	@ (8001200 <main+0x380>)
 8000fee:	f007 fe7b 	bl	8008ce8 <digitalWrite>

			Vx = map(Str_PS2.stickValue[0], 100.0f, -100.0f, 4.0f, -4.0f);
 8000ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80011f0 <main+0x370>)
 8000ff4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001000:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 8001004:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 8001008:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8001204 <main+0x384>
 800100c:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8001208 <main+0x388>
 8001010:	eeb0 0a67 	vmov.f32	s0, s15
 8001014:	f008 f9ce 	bl	80093b4 <map>
 8001018:	eef0 7a40 	vmov.f32	s15, s0
 800101c:	4b7b      	ldr	r3, [pc, #492]	@ (800120c <main+0x38c>)
 800101e:	edc3 7a00 	vstr	s15, [r3]
			Vy = map(Str_PS2.stickValue[1], 100.0f, -100.0f, 4.0f, -4.0f);
 8001022:	4b73      	ldr	r3, [pc, #460]	@ (80011f0 <main+0x370>)
 8001024:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 8001034:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 8001038:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 8001204 <main+0x384>
 800103c:	eddf 0a72 	vldr	s1, [pc, #456]	@ 8001208 <main+0x388>
 8001040:	eeb0 0a67 	vmov.f32	s0, s15
 8001044:	f008 f9b6 	bl	80093b4 <map>
 8001048:	eef0 7a40 	vmov.f32	s15, s0
 800104c:	4b70      	ldr	r3, [pc, #448]	@ (8001210 <main+0x390>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
			Vz = map(Str_PS2.stickValue[3], 100.0f, -100.0f, -5.0f, 5.0f);
 8001052:	4b67      	ldr	r3, [pc, #412]	@ (80011f0 <main+0x370>)
 8001054:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	eeb1 2a04 	vmov.f32	s4, #20	@ 0x40a00000  5.0
 8001064:	eef9 1a04 	vmov.f32	s3, #148	@ 0xc0a00000 -5.0
 8001068:	ed9f 1a66 	vldr	s2, [pc, #408]	@ 8001204 <main+0x384>
 800106c:	eddf 0a66 	vldr	s1, [pc, #408]	@ 8001208 <main+0x388>
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	f008 f99e 	bl	80093b4 <map>
 8001078:	eef0 7a40 	vmov.f32	s15, s0
 800107c:	4b65      	ldr	r3, [pc, #404]	@ (8001214 <main+0x394>)
 800107e:	edc3 7a00 	vstr	s15, [r3]

//			Inverse_Kinematic(Vx, Vy, Vz);
			Inverse_Kinematic_Lock_Direction(Vx, Vy, Vz, Rad);
 8001082:	4b62      	ldr	r3, [pc, #392]	@ (800120c <main+0x38c>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <main+0x390>)
 800108a:	ed93 7a00 	vldr	s14, [r3]
 800108e:	4b61      	ldr	r3, [pc, #388]	@ (8001214 <main+0x394>)
 8001090:	edd3 6a00 	vldr	s13, [r3]
 8001094:	4b60      	ldr	r3, [pc, #384]	@ (8001218 <main+0x398>)
 8001096:	ed93 6a00 	vldr	s12, [r3]
 800109a:	eef0 1a46 	vmov.f32	s3, s12
 800109e:	eeb0 1a66 	vmov.f32	s2, s13
 80010a2:	eef0 0a47 	vmov.f32	s1, s14
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f009 fb3f 	bl	800a72c <Inverse_Kinematic_Lock_Direction>

			Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()),getRPM_TIM_Wheel(&htim5, _LF));
 80010ae:	f009 fc5d 	bl	800a96c <get_w_LF>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	f008 fb07 	bl	80096cc <getRad_s_to_RPM>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	b21c      	sxth	r4, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	482f      	ldr	r0, [pc, #188]	@ (800118c <main+0x30c>)
 80010d0:	f008 fb16 	bl	8009700 <getRPM_TIM_Wheel>
 80010d4:	eef0 7a40 	vmov.f32	s15, s0
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	4620      	mov	r0, r4
 80010de:	f008 ff8d 	bl	8009ffc <Motor_Speed_LF>
			Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()),getRPM_TIM_Wheel(&htim1, _LB));
 80010e2:	f009 fc51 	bl	800a988 <get_w_LB>
 80010e6:	eef0 7a40 	vmov.f32	s15, s0
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	f008 faed 	bl	80096cc <getRad_s_to_RPM>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fa:	ee17 3a90 	vmov	r3, s15
 80010fe:	b21c      	sxth	r4, r3
 8001100:	2101      	movs	r1, #1
 8001102:	4825      	ldr	r0, [pc, #148]	@ (8001198 <main+0x318>)
 8001104:	f008 fafc 	bl	8009700 <getRPM_TIM_Wheel>
 8001108:	eef0 7a40 	vmov.f32	s15, s0
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	4620      	mov	r0, r4
 8001112:	f008 ffdf 	bl	800a0d4 <Motor_Speed_LB>
			Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()),getRPM_TIM_Wheel(&htim8, _RF));
 8001116:	f009 fc45 	bl	800a9a4 <get_w_RF>
 800111a:	eef0 7a40 	vmov.f32	s15, s0
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	f008 fad3 	bl	80096cc <getRad_s_to_RPM>
 8001126:	eef0 7a40 	vmov.f32	s15, s0
 800112a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112e:	ee17 3a90 	vmov	r3, s15
 8001132:	b21c      	sxth	r4, r3
 8001134:	2102      	movs	r1, #2
 8001136:	481b      	ldr	r0, [pc, #108]	@ (80011a4 <main+0x324>)
 8001138:	f008 fae2 	bl	8009700 <getRPM_TIM_Wheel>
 800113c:	eef0 7a40 	vmov.f32	s15, s0
 8001140:	eeb0 0a67 	vmov.f32	s0, s15
 8001144:	4620      	mov	r0, r4
 8001146:	f009 f831 	bl	800a1ac <Motor_Speed_RF>
			Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()),getRPM_TIM_Wheel(&htim4, _RB));
 800114a:	f009 fc39 	bl	800a9c0 <get_w_RB>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	f008 fab9 	bl	80096cc <getRad_s_to_RPM>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	b21c      	sxth	r4, r3
 8001168:	2103      	movs	r1, #3
 800116a:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <main+0x330>)
 800116c:	f008 fac8 	bl	8009700 <getRPM_TIM_Wheel>
 8001170:	eef0 7a40 	vmov.f32	s15, s0
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	4620      	mov	r0, r4
 800117a:	f009 f883 	bl	800a284 <Motor_Speed_RB>

			Game_Play_ROBOT_1(&htim9 ,&htim2);
 800117e:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <main+0x338>)
 8001180:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <main+0x348>)
 8001182:	f009 f9d1 	bl	800a528 <Game_Play_ROBOT_1>
		if ((uwTick - PastTime) > 10) {
 8001186:	e71b      	b.n	8000fc0 <main+0x140>
 8001188:	0800ee08 	.word	0x0800ee08
 800118c:	200003a0 	.word	0x200003a0
 8001190:	20000598 	.word	0x20000598
 8001194:	0800ee10 	.word	0x0800ee10
 8001198:	20000280 	.word	0x20000280
 800119c:	20000508 	.word	0x20000508
 80011a0:	0800ee18 	.word	0x0800ee18
 80011a4:	200003e8 	.word	0x200003e8
 80011a8:	200004c0 	.word	0x200004c0
 80011ac:	0800ee20 	.word	0x0800ee20
 80011b0:	20000358 	.word	0x20000358
 80011b4:	0800ee28 	.word	0x0800ee28
 80011b8:	200002c8 	.word	0x200002c8
 80011bc:	20000478 	.word	0x20000478
 80011c0:	0800ee30 	.word	0x0800ee30
 80011c4:	20000310 	.word	0x20000310
 80011c8:	20000430 	.word	0x20000430
 80011cc:	43b40000 	.word	0x43b40000
 80011d0:	00000000 	.word	0x00000000
 80011d4:	3dcccccd 	.word	0x3dcccccd
 80011d8:	3d4ccccd 	.word	0x3d4ccccd
 80011dc:	4528c000 	.word	0x4528c000
 80011e0:	46577800 	.word	0x46577800
 80011e4:	3b83126f 	.word	0x3b83126f
 80011e8:	3d75c28f 	.word	0x3d75c28f
 80011ec:	3e6b851f 	.word	0x3e6b851f
 80011f0:	20000670 	.word	0x20000670
 80011f4:	20000628 	.word	0x20000628
 80011f8:	20000688 	.word	0x20000688
 80011fc:	20000678 	.word	0x20000678
 8001200:	0800ee38 	.word	0x0800ee38
 8001204:	c2c80000 	.word	0xc2c80000
 8001208:	42c80000 	.word	0x42c80000
 800120c:	2000067c 	.word	0x2000067c
 8001210:	20000680 	.word	0x20000680
 8001214:	20000684 	.word	0x20000684
 8001218:	20000000 	.word	0x20000000

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	@ 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00c f9c0 	bl	800d5b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <SystemClock_Config+0xcc>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <SystemClock_Config+0xcc>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <SystemClock_Config+0xd0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <SystemClock_Config+0xd0>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 800128c:	2307      	movs	r3, #7
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001290:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001294:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001296:	2304      	movs	r3, #4
 8001298:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800129a:	2308      	movs	r3, #8
 800129c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 feb6 	bl	8005014 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ae:	f000 fe11 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	2302      	movs	r3, #2
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2103      	movs	r1, #3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 f917 	bl	8005504 <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012dc:	f000 fdfa 	bl	8001ed4 <Error_Handler>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3750      	adds	r7, #80	@ 0x50
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001304:	4a21      	ldr	r2, [pc, #132]	@ (800138c <MX_ADC1_Init+0x9c>)
 8001306:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001308:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <MX_ADC1_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_ADC1_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_ADC1_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001330:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <MX_ADC1_Init+0xa0>)
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <MX_ADC1_Init+0x98>)
 800133c:	2201      	movs	r2, #1
 800133e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_ADC1_Init+0x98>)
 800134a:	2201      	movs	r2, #1
 800134c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134e:	480e      	ldr	r0, [pc, #56]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001350:	f001 fbe0 	bl	8002b14 <HAL_ADC_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800135a:	f000 fdbb 	bl	8001ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800135e:	2305      	movs	r3, #5
 8001360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	@ (8001388 <MX_ADC1_Init+0x98>)
 8001370:	f001 fc14 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800137a:	f000 fdab 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000018c 	.word	0x2000018c
 800138c:	40012000 	.word	0x40012000
 8001390:	0f000001 	.word	0x0f000001

08001394 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_I2C2_Init+0x50>)
 800139a:	4a13      	ldr	r2, [pc, #76]	@ (80013e8 <MX_I2C2_Init+0x54>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <MX_I2C2_Init+0x58>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_I2C2_Init+0x50>)
 80013d2:	f002 fa89 	bl	80038e8 <HAL_I2C_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 fd7a 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001d4 	.word	0x200001d4
 80013e8:	40005800 	.word	0x40005800
 80013ec:	000186a0 	.word	0x000186a0

080013f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_SPI2_Init+0x64>)
 80013f6:	4a18      	ldr	r2, [pc, #96]	@ (8001458 <MX_SPI2_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_SPI2_Init+0x64>)
 80013fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001400:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_SPI2_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_SPI2_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_SPI2_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_SPI2_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_SPI2_Init+0x64>)
 800141c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001420:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_SPI2_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <MX_SPI2_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_SPI2_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <MX_SPI2_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <MX_SPI2_Init+0x64>)
 800143c:	220a      	movs	r2, #10
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_SPI2_Init+0x64>)
 8001442:	f004 fa7f 	bl	8005944 <HAL_SPI_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800144c:	f000 fd42 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000228 	.word	0x20000228
 8001458:	40003800 	.word	0x40003800

0800145c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2224      	movs	r2, #36	@ 0x24
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f00c f8a0 	bl	800d5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001478:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <MX_TIM1_Init+0xa8>)
 800147a:	4a23      	ldr	r2, [pc, #140]	@ (8001508 <MX_TIM1_Init+0xac>)
 800147c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800147e:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <MX_TIM1_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <MX_TIM1_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <MX_TIM1_Init+0xa8>)
 800148c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <MX_TIM1_Init+0xa8>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <MX_TIM1_Init+0xa8>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_TIM1_Init+0xa8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a4:	2303      	movs	r3, #3
 80014a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014bc:	2301      	movs	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	480d      	ldr	r0, [pc, #52]	@ (8001504 <MX_TIM1_Init+0xa8>)
 80014d0:	f004 fc28 	bl	8005d24 <HAL_TIM_Encoder_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014da:	f000 fcfb 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4806      	ldr	r0, [pc, #24]	@ (8001504 <MX_TIM1_Init+0xa8>)
 80014ec:	f005 f892 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014f6:	f000 fced 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	3730      	adds	r7, #48	@ 0x30
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000280 	.word	0x20000280
 8001508:	40010000 	.word	0x40010000

0800150c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	@ 0x30
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2224      	movs	r2, #36	@ 0x24
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f00c f848 	bl	800d5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 800152a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800152e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001530:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 800153e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001550:	2303      	movs	r3, #3
 8001552:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001558:	2301      	movs	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001568:	2301      	movs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 800157c:	f004 fbd2 	bl	8005d24 <HAL_TIM_Encoder_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001586:	f000 fca5 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4806      	ldr	r0, [pc, #24]	@ (80015b0 <MX_TIM2_Init+0xa4>)
 8001598:	f005 f83c 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015a2:	f000 fc97 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	3730      	adds	r7, #48	@ 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002c8 	.word	0x200002c8

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2224      	movs	r2, #36	@ 0x24
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00b fff4 	bl	800d5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d0:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <MX_TIM3_Init+0xa0>)
 80015d2:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <MX_TIM3_Init+0xa4>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_TIM3_Init+0xa0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <MX_TIM3_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_TIM3_Init+0xa0>)
 80015e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_TIM3_Init+0xa0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <MX_TIM3_Init+0xa0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015f6:	2303      	movs	r3, #3
 80015f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015fe:	2301      	movs	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800160e:	2301      	movs	r3, #1
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <MX_TIM3_Init+0xa0>)
 8001622:	f004 fb7f 	bl	8005d24 <HAL_TIM_Encoder_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800162c:	f000 fc52 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_TIM3_Init+0xa0>)
 800163e:	f004 ffe9 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001648:	f000 fc44 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	@ 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000310 	.word	0x20000310
 8001658:	40000400 	.word	0x40000400

0800165c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2224      	movs	r2, #36	@ 0x24
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f00b ffa0 	bl	800d5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <MX_TIM4_Init+0xa0>)
 800167a:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <MX_TIM4_Init+0xa4>)
 800167c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_TIM4_Init+0xa0>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <MX_TIM4_Init+0xa0>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_TIM4_Init+0xa0>)
 800168c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001690:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_TIM4_Init+0xa0>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_TIM4_Init+0xa0>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800169e:	2303      	movs	r3, #3
 80016a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016a6:	2301      	movs	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016b6:	2301      	movs	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <MX_TIM4_Init+0xa0>)
 80016ca:	f004 fb2b 	bl	8005d24 <HAL_TIM_Encoder_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f000 fbfe 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_TIM4_Init+0xa0>)
 80016e6:	f004 ff95 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016f0:	f000 fbf0 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3730      	adds	r7, #48	@ 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000358 	.word	0x20000358
 8001700:	40000800 	.word	0x40000800

08001704 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2224      	movs	r2, #36	@ 0x24
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f00b ff4c 	bl	800d5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 8001722:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <MX_TIM5_Init+0xa4>)
 8001724:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 8001734:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001738:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001746:	2303      	movs	r3, #3
 8001748:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800175e:	2301      	movs	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 8001772:	f004 fad7 	bl	8005d24 <HAL_TIM_Encoder_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800177c:	f000 fbaa 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_TIM5_Init+0xa0>)
 800178e:	f004 ff41 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001798:	f000 fb9c 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3730      	adds	r7, #48	@ 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200003a0 	.word	0x200003a0
 80017a8:	40000c00 	.word	0x40000c00

080017ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	@ 0x30
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	2224      	movs	r2, #36	@ 0x24
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00b fef8 	bl	800d5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017c8:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <MX_TIM8_Init+0xa8>)
 80017ca:	4a23      	ldr	r2, [pc, #140]	@ (8001858 <MX_TIM8_Init+0xac>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017ce:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <MX_TIM8_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <MX_TIM8_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017da:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <MX_TIM8_Init+0xa8>)
 80017dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <MX_TIM8_Init+0xa8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <MX_TIM8_Init+0xa8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <MX_TIM8_Init+0xa8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017f4:	2303      	movs	r3, #3
 80017f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800180c:	2301      	movs	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	@ (8001854 <MX_TIM8_Init+0xa8>)
 8001820:	f004 fa80 	bl	8005d24 <HAL_TIM_Encoder_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800182a:	f000 fb53 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	@ (8001854 <MX_TIM8_Init+0xa8>)
 800183c:	f004 feea 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001846:	f000 fb45 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3730      	adds	r7, #48	@ 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200003e8 	.word	0x200003e8
 8001858:	40010400 	.word	0x40010400

0800185c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	615a      	str	r2, [r3, #20]
 8001872:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001874:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <MX_TIM9_Init+0x98>)
 8001876:	4a20      	ldr	r2, [pc, #128]	@ (80018f8 <MX_TIM9_Init+0x9c>)
 8001878:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <MX_TIM9_Init+0x98>)
 800187c:	2201      	movs	r2, #1
 800187e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_TIM9_Init+0x98>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8001886:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <MX_TIM9_Init+0x98>)
 8001888:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800188c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <MX_TIM9_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <MX_TIM9_Init+0x98>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800189a:	4816      	ldr	r0, [pc, #88]	@ (80018f4 <MX_TIM9_Init+0x98>)
 800189c:	f004 f92a 	bl	8005af4 <HAL_TIM_PWM_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80018a6:	f000 fb15 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018aa:	2360      	movs	r3, #96	@ 0x60
 80018ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <MX_TIM9_Init+0x98>)
 80018c2:	f004 fb63 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80018cc:	f000 fb02 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2204      	movs	r2, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <MX_TIM9_Init+0x98>)
 80018d8:	f004 fb58 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80018e2:	f000 faf7 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80018e6:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <MX_TIM9_Init+0x98>)
 80018e8:	f000 fe44 	bl	8002574 <HAL_TIM_MspPostInit>

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000430 	.word	0x20000430
 80018f8:	40014000 	.word	0x40014000

080018fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <MX_TIM10_Init+0x94>)
 8001916:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <MX_TIM10_Init+0x98>)
 8001918:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <MX_TIM10_Init+0x94>)
 800191c:	2201      	movs	r2, #1
 800191e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <MX_TIM10_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <MX_TIM10_Init+0x94>)
 8001928:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800192c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <MX_TIM10_Init+0x94>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_TIM10_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800193a:	4815      	ldr	r0, [pc, #84]	@ (8001990 <MX_TIM10_Init+0x94>)
 800193c:	f004 f88b 	bl	8005a56 <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001946:	f000 fac5 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800194a:	4811      	ldr	r0, [pc, #68]	@ (8001990 <MX_TIM10_Init+0x94>)
 800194c:	f004 f8d2 	bl	8005af4 <HAL_TIM_PWM_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001956:	f000 fabd 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	@ 0x60
 800195c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4807      	ldr	r0, [pc, #28]	@ (8001990 <MX_TIM10_Init+0x94>)
 8001972:	f004 fb0b 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800197c:	f000 faaa 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001980:	4803      	ldr	r0, [pc, #12]	@ (8001990 <MX_TIM10_Init+0x94>)
 8001982:	f000 fdf7 	bl	8002574 <HAL_TIM_MspPostInit>

}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000478 	.word	0x20000478
 8001994:	40014400 	.word	0x40014400

08001998 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a30 <MX_TIM11_Init+0x98>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019c4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80019c8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019d6:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019d8:	f004 f83d 	bl	8005a56 <HAL_TIM_Base_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80019e2:	f000 fa77 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80019e6:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <MX_TIM11_Init+0x94>)
 80019e8:	f004 f884 	bl	8005af4 <HAL_TIM_PWM_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80019f2:	f000 fa6f 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f6:	2360      	movs	r3, #96	@ 0x60
 80019f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	@ (8001a2c <MX_TIM11_Init+0x94>)
 8001a0e:	f004 fabd 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001a18:	f000 fa5c 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001a1c:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <MX_TIM11_Init+0x94>)
 8001a1e:	f000 fda9 	bl	8002574 <HAL_TIM_MspPostInit>

}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200004c0 	.word	0x200004c0
 8001a30:	40014800 	.word	0x40014800

08001a34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a4e:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <MX_TIM12_Init+0x9c>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a60:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001a64:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a72:	4816      	ldr	r0, [pc, #88]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a74:	f004 f83e 	bl	8005af4 <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001a7e:	f000 fa29 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a82:	2360      	movs	r3, #96	@ 0x60
 8001a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001a9a:	f004 fa77 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001aa4:	f000 fa16 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001ab0:	f004 fa6c 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001aba:	f000 fa0b 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001abe:	4803      	ldr	r0, [pc, #12]	@ (8001acc <MX_TIM12_Init+0x98>)
 8001ac0:	f000 fd58 	bl	8002574 <HAL_TIM_MspPostInit>

}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000508 	.word	0x20000508
 8001ad0:	40001800 	.word	0x40001800

08001ad4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001aee:	4a1f      	ldr	r2, [pc, #124]	@ (8001b6c <MX_TIM13_Init+0x98>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001b00:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b04:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001b12:	4815      	ldr	r0, [pc, #84]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001b14:	f003 ff9f 	bl	8005a56 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001b1e:	f000 f9d9 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001b22:	4811      	ldr	r0, [pc, #68]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001b24:	f003 ffe6 	bl	8005af4 <HAL_TIM_PWM_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001b2e:	f000 f9d1 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b32:	2360      	movs	r3, #96	@ 0x60
 8001b34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2200      	movs	r2, #0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001b4a:	f004 fa1f 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001b54:	f000 f9be 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001b58:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <MX_TIM13_Init+0x94>)
 8001b5a:	f000 fd0b 	bl	8002574 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000550 	.word	0x20000550
 8001b6c:	40001c00 	.word	0x40001c00

08001b70 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	615a      	str	r2, [r3, #20]
 8001b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c08 <MX_TIM14_Init+0x98>)
 8001b8c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001b9c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001ba0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001bae:	4815      	ldr	r0, [pc, #84]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001bb0:	f003 ff51 	bl	8005a56 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001bba:	f000 f98b 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001bbe:	4811      	ldr	r0, [pc, #68]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001bc0:	f003 ff98 	bl	8005af4 <HAL_TIM_PWM_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001bca:	f000 f983 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bce:	2360      	movs	r3, #96	@ 0x60
 8001bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4807      	ldr	r0, [pc, #28]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001be6:	f004 f9d1 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001bf0:	f000 f970 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001bf4:	4803      	ldr	r0, [pc, #12]	@ (8001c04 <MX_TIM14_Init+0x94>)
 8001bf6:	f000 fcbd 	bl	8002574 <HAL_TIM_MspPostInit>

}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000598 	.word	0x20000598
 8001c08:	40002000 	.word	0x40002000

08001c0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <MX_UART4_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_UART4_Init+0x4c>)
 8001c44:	f004 fd62 	bl	800670c <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 f941 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200005e0 	.word	0x200005e0
 8001c5c:	40004c00 	.word	0x40004c00

08001c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <MX_USART2_UART_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c86:	2204      	movs	r2, #4
 8001c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c98:	f004 fd38 	bl	800670c <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca2:	f000 f917 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000628 	.word	0x20000628
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	4b68      	ldr	r3, [pc, #416]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a67      	ldr	r2, [pc, #412]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b65      	ldr	r3, [pc, #404]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b61      	ldr	r3, [pc, #388]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b5a      	ldr	r3, [pc, #360]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a59      	ldr	r2, [pc, #356]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b57      	ldr	r3, [pc, #348]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a52      	ldr	r2, [pc, #328]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b50      	ldr	r3, [pc, #320]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a4b      	ldr	r2, [pc, #300]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b49      	ldr	r3, [pc, #292]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a44      	ldr	r2, [pc, #272]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b42      	ldr	r3, [pc, #264]	@ (8001e70 <MX_GPIO_Init+0x1bc>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001d72:	2200      	movs	r2, #0
 8001d74:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 8001d78:	483e      	ldr	r0, [pc, #248]	@ (8001e74 <MX_GPIO_Init+0x1c0>)
 8001d7a:	f001 fd9b 	bl	80038b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001d84:	483c      	ldr	r0, [pc, #240]	@ (8001e78 <MX_GPIO_Init+0x1c4>)
 8001d86:	f001 fd95 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	483b      	ldr	r0, [pc, #236]	@ (8001e7c <MX_GPIO_Init+0x1c8>)
 8001d90:	f001 fd90 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d9a:	4839      	ldr	r0, [pc, #228]	@ (8001e80 <MX_GPIO_Init+0x1cc>)
 8001d9c:	f001 fd8a 	bl	80038b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 PE13 PE15 EXTRA2_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001da0:	f24a 538d 	movw	r3, #42381	@ 0xa58d
 8001da4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_15|EXTRA2_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	482e      	ldr	r0, [pc, #184]	@ (8001e74 <MX_GPIO_Init+0x1c0>)
 8001dba:	f001 fae3 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA1_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin;
 8001dbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(EXTRA1_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4828      	ldr	r0, [pc, #160]	@ (8001e78 <MX_GPIO_Init+0x1c4>)
 8001dd8:	f001 fad4 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4825      	ldr	r0, [pc, #148]	@ (8001e84 <MX_GPIO_Init+0x1d0>)
 8001df0:	f001 fac8 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = LF_DIGI_R_Pin;
 8001df4:	2320      	movs	r3, #32
 8001df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LF_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481b      	ldr	r0, [pc, #108]	@ (8001e78 <MX_GPIO_Init+0x1c4>)
 8001e0c:	f001 faba 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	4815      	ldr	r0, [pc, #84]	@ (8001e7c <MX_GPIO_Init+0x1c8>)
 8001e28:	f001 faac 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LB_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = LB_DIGI_R_Pin|RF_DIGI_R_Pin;
 8001e2c:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e36:	2302      	movs	r3, #2
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	480b      	ldr	r0, [pc, #44]	@ (8001e74 <MX_GPIO_Init+0x1c0>)
 8001e46:	f001 fa9d 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 8001e4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e54:	2302      	movs	r3, #2
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <MX_GPIO_Init+0x1cc>)
 8001e64:	f001 fa8e 	bl	8003384 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	@ 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40020000 	.word	0x40020000

08001e88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
     if (huart->Instance == USART2){
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a09      	ldr	r2, [pc, #36]	@ (8001ebc <HAL_UART_RxCpltCallback+0x34>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10b      	bne.n	8001eb2 <HAL_UART_RxCpltCallback+0x2a>
        last_uart_data_time = uwTick;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_UART_RxCpltCallback+0x38>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_UART_RxCpltCallback+0x3c>)
 8001ea0:	6013      	str	r3, [r2, #0]
        uart_resetting = 0;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_UART_RxCpltCallback+0x40>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&Str_PS2, sizeof(Str_PS2));
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <HAL_UART_RxCpltCallback+0x44>)
 8001eac:	4808      	ldr	r0, [pc, #32]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x48>)
 8001eae:	f004 fcaf 	bl	8006810 <HAL_UART_Receive_IT>
     }
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40004400 	.word	0x40004400
 8001ec0:	20000688 	.word	0x20000688
 8001ec4:	200008b4 	.word	0x200008b4
 8001ec8:	200008b8 	.word	0x200008b8
 8001ecc:	20000670 	.word	0x20000670
 8001ed0:	20000628 	.word	0x20000628

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <Error_Handler+0x8>

08001ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4a0f      	ldr	r2, [pc, #60]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	@ 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a24      	ldr	r2, [pc, #144]	@ (8001fe0 <HAL_ADC_MspInit+0xb0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d141      	bne.n	8001fd6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4a14      	ldr	r2, [pc, #80]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <HAL_ADC_MspInit+0xb4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001faa:	2303      	movs	r3, #3
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480b      	ldr	r0, [pc, #44]	@ (8001fe8 <HAL_ADC_MspInit+0xb8>)
 8001fba:	f001 f9e3 	bl	8003384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4806      	ldr	r0, [pc, #24]	@ (8001fec <HAL_ADC_MspInit+0xbc>)
 8001fd2:	f001 f9d7 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020000 	.word	0x40020000

08001ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_I2C_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12c      	bne.n	800206c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800202e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002034:	2312      	movs	r3, #18
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002040:	2304      	movs	r3, #4
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	480c      	ldr	r0, [pc, #48]	@ (800207c <HAL_I2C_MspInit+0x8c>)
 800204c:	f001 f99a 	bl	8003384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4a07      	ldr	r2, [pc, #28]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 800205a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800205e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_I2C_MspInit+0x88>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40005800 	.word	0x40005800
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400

08002080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	@ 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <HAL_SPI_MspInit+0xc0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d14a      	bne.n	8002138 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	4a26      	ldr	r2, [pc, #152]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a18      	ldr	r2, [pc, #96]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <HAL_SPI_MspInit+0xc4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020f6:	230c      	movs	r3, #12
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002106:	2305      	movs	r3, #5
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	480d      	ldr	r0, [pc, #52]	@ (8002148 <HAL_SPI_MspInit+0xc8>)
 8002112:	f001 f937 	bl	8003384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002128:	2305      	movs	r3, #5
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	4806      	ldr	r0, [pc, #24]	@ (800214c <HAL_SPI_MspInit+0xcc>)
 8002134:	f001 f926 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	@ 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40003800 	.word	0x40003800
 8002144:	40023800 	.word	0x40023800
 8002148:	40020800 	.word	0x40020800
 800214c:	40020400 	.word	0x40020400

08002150 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	@ 0x50
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a8c      	ldr	r2, [pc, #560]	@ (80023a0 <HAL_TIM_Encoder_MspInit+0x250>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d12d      	bne.n	80021ce <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002176:	4b8b      	ldr	r3, [pc, #556]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a8a      	ldr	r2, [pc, #552]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b88      	ldr	r3, [pc, #544]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800218c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
 8002192:	4b84      	ldr	r3, [pc, #528]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a83      	ldr	r2, [pc, #524]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b81      	ldr	r3, [pc, #516]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80021aa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021b4:	2302      	movs	r3, #2
 80021b6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021bc:	2301      	movs	r3, #1
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021c4:	4619      	mov	r1, r3
 80021c6:	4878      	ldr	r0, [pc, #480]	@ (80023a8 <HAL_TIM_Encoder_MspInit+0x258>)
 80021c8:	f001 f8dc 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021cc:	e12b      	b.n	8002426 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d6:	d14b      	bne.n	8002270 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
 80021dc:	4b71      	ldr	r3, [pc, #452]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	4a70      	ldr	r2, [pc, #448]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e8:	4b6e      	ldr	r3, [pc, #440]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80021f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	4a69      	ldr	r2, [pc, #420]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6313      	str	r3, [r2, #48]	@ 0x30
 8002204:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800220e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002214:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	4a62      	ldr	r2, [pc, #392]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002220:	4b60      	ldr	r3, [pc, #384]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 800222c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002230:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800223e:	2301      	movs	r3, #1
 8002240:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002246:	4619      	mov	r1, r3
 8002248:	4858      	ldr	r0, [pc, #352]	@ (80023ac <HAL_TIM_Encoder_MspInit+0x25c>)
 800224a:	f001 f89b 	bl	8003384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 800224e:	2308      	movs	r3, #8
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225e:	2301      	movs	r3, #1
 8002260:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002266:	4619      	mov	r1, r3
 8002268:	4851      	ldr	r0, [pc, #324]	@ (80023b0 <HAL_TIM_Encoder_MspInit+0x260>)
 800226a:	f001 f88b 	bl	8003384 <HAL_GPIO_Init>
}
 800226e:	e0da      	b.n	8002426 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a4f      	ldr	r2, [pc, #316]	@ (80023b4 <HAL_TIM_Encoder_MspInit+0x264>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12c      	bne.n	80022d4 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
 800227e:	4b49      	ldr	r3, [pc, #292]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a48      	ldr	r2, [pc, #288]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
 800228a:	4b46      	ldr	r3, [pc, #280]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	4b42      	ldr	r3, [pc, #264]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	4a41      	ldr	r2, [pc, #260]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a6:	4b3f      	ldr	r3, [pc, #252]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80022b2:	2330      	movs	r3, #48	@ 0x30
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022ba:	2302      	movs	r3, #2
 80022bc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022c2:	2302      	movs	r3, #2
 80022c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80022ca:	4619      	mov	r1, r3
 80022cc:	4838      	ldr	r0, [pc, #224]	@ (80023b0 <HAL_TIM_Encoder_MspInit+0x260>)
 80022ce:	f001 f859 	bl	8003384 <HAL_GPIO_Init>
}
 80022d2:	e0a8      	b.n	8002426 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a37      	ldr	r2, [pc, #220]	@ (80023b8 <HAL_TIM_Encoder_MspInit+0x268>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d12d      	bne.n	800233a <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	4b30      	ldr	r3, [pc, #192]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	4a2f      	ldr	r2, [pc, #188]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ee:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a28      	ldr	r2, [pc, #160]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b26      	ldr	r3, [pc, #152]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002316:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800231a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002328:	2302      	movs	r3, #2
 800232a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002330:	4619      	mov	r1, r3
 8002332:	4822      	ldr	r0, [pc, #136]	@ (80023bc <HAL_TIM_Encoder_MspInit+0x26c>)
 8002334:	f001 f826 	bl	8003384 <HAL_GPIO_Init>
}
 8002338:	e075      	b.n	8002426 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d13f      	bne.n	80023c4 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	4a15      	ldr	r2, [pc, #84]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	6413      	str	r3, [r2, #64]	@ 0x40
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002370:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800237c:	2303      	movs	r3, #3
 800237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002384:	2302      	movs	r3, #2
 8002386:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800238c:	2302      	movs	r3, #2
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002394:	4619      	mov	r1, r3
 8002396:	4805      	ldr	r0, [pc, #20]	@ (80023ac <HAL_TIM_Encoder_MspInit+0x25c>)
 8002398:	f000 fff4 	bl	8003384 <HAL_GPIO_Init>
}
 800239c:	e043      	b.n	8002426 <HAL_TIM_Encoder_MspInit+0x2d6>
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	@ (8002430 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d12b      	bne.n	8002426 <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a17      	ldr	r2, [pc, #92]	@ (8002434 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a10      	ldr	r2, [pc, #64]	@ (8002434 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002406:	23c0      	movs	r3, #192	@ 0xc0
 8002408:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800240e:	2302      	movs	r3, #2
 8002410:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002416:	2303      	movs	r3, #3
 8002418:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002422:	f000 ffaf 	bl	8003384 <HAL_GPIO_Init>
}
 8002426:	bf00      	nop
 8002428:	3750      	adds	r7, #80	@ 0x50
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40010400 	.word	0x40010400
 8002434:	40023800 	.word	0x40023800
 8002438:	40020800 	.word	0x40020800

0800243c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <HAL_TIM_PWM_MspInit+0x64>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10e      	bne.n	800246c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x68>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x68>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245c:	6453      	str	r3, [r2, #68]	@ 0x44
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x68>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800246a:	e012      	b.n	8002492 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10d      	bne.n	8002492 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x68>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a09      	ldr	r2, [pc, #36]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x68>)
 8002480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x68>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40001800 	.word	0x40001800

080024ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a29      	ldr	r2, [pc, #164]	@ (8002560 <HAL_TIM_Base_MspInit+0xb4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	4a27      	ldr	r2, [pc, #156]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80024da:	e03a      	b.n	8002552 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_TIM_Base_MspInit+0xbc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
}
 8002502:	e026      	b.n	8002552 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a18      	ldr	r2, [pc, #96]	@ (800256c <HAL_TIM_Base_MspInit+0xc0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10e      	bne.n	800252c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a13      	ldr	r2, [pc, #76]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 8002518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	e012      	b.n	8002552 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0f      	ldr	r2, [pc, #60]	@ (8002570 <HAL_TIM_Base_MspInit+0xc4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10d      	bne.n	8002552 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <HAL_TIM_Base_MspInit+0xb8>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40014400 	.word	0x40014400
 8002564:	40023800 	.word	0x40023800
 8002568:	40014800 	.word	0x40014800
 800256c:	40001c00 	.word	0x40001c00
 8002570:	40002000 	.word	0x40002000

08002574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08e      	sub	sp, #56	@ 0x38
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6d      	ldr	r2, [pc, #436]	@ (8002748 <HAL_TIM_MspPostInit+0x1d4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11e      	bne.n	80025d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	4b6c      	ldr	r3, [pc, #432]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a6b      	ldr	r2, [pc, #428]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80025a0:	f043 0310 	orr.w	r3, r3, #16
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b69      	ldr	r3, [pc, #420]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025b2:	2360      	movs	r3, #96	@ 0x60
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025c2:	2303      	movs	r3, #3
 80025c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ca:	4619      	mov	r1, r3
 80025cc:	4860      	ldr	r0, [pc, #384]	@ (8002750 <HAL_TIM_MspPostInit+0x1dc>)
 80025ce:	f000 fed9 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80025d2:	e0b5      	b.n	8002740 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002754 <HAL_TIM_MspPostInit+0x1e0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11f      	bne.n	800261e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	4b5a      	ldr	r3, [pc, #360]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a59      	ldr	r2, [pc, #356]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b57      	ldr	r3, [pc, #348]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 80025fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800260c:	2303      	movs	r3, #3
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002614:	4619      	mov	r1, r3
 8002616:	4850      	ldr	r0, [pc, #320]	@ (8002758 <HAL_TIM_MspPostInit+0x1e4>)
 8002618:	f000 feb4 	bl	8003384 <HAL_GPIO_Init>
}
 800261c:	e090      	b.n	8002740 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a4e      	ldr	r2, [pc, #312]	@ (800275c <HAL_TIM_MspPostInit+0x1e8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d11f      	bne.n	8002668 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	4a46      	ldr	r2, [pc, #280]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	6313      	str	r3, [r2, #48]	@ 0x30
 8002638:	4b44      	ldr	r3, [pc, #272]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8002644:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002656:	2303      	movs	r3, #3
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800265a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265e:	4619      	mov	r1, r3
 8002660:	483d      	ldr	r0, [pc, #244]	@ (8002758 <HAL_TIM_MspPostInit+0x1e4>)
 8002662:	f000 fe8f 	bl	8003384 <HAL_GPIO_Init>
}
 8002666:	e06b      	b.n	8002740 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3c      	ldr	r2, [pc, #240]	@ (8002760 <HAL_TIM_MspPostInit+0x1ec>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11f      	bne.n	80026b2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	4b35      	ldr	r3, [pc, #212]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a34      	ldr	r2, [pc, #208]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b32      	ldr	r3, [pc, #200]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 800268e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80026a0:	2309      	movs	r3, #9
 80026a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a8:	4619      	mov	r1, r3
 80026aa:	482b      	ldr	r0, [pc, #172]	@ (8002758 <HAL_TIM_MspPostInit+0x1e4>)
 80026ac:	f000 fe6a 	bl	8003384 <HAL_GPIO_Init>
}
 80026b0:	e046      	b.n	8002740 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <HAL_TIM_MspPostInit+0x1f0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d11e      	bne.n	80026fa <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	4b22      	ldr	r3, [pc, #136]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	4a21      	ldr	r2, [pc, #132]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80026cc:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 80026d8:	2340      	movs	r3, #64	@ 0x40
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80026e8:	2309      	movs	r3, #9
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 80026ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	481d      	ldr	r0, [pc, #116]	@ (8002768 <HAL_TIM_MspPostInit+0x1f4>)
 80026f4:	f000 fe46 	bl	8003384 <HAL_GPIO_Init>
}
 80026f8:	e022      	b.n	8002740 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	@ (800276c <HAL_TIM_MspPostInit+0x1f8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d11d      	bne.n	8002740 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	4a0f      	ldr	r2, [pc, #60]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6313      	str	r3, [r2, #48]	@ 0x30
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_TIM_MspPostInit+0x1d8>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8002720:	2380      	movs	r3, #128	@ 0x80
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002730:	2309      	movs	r3, #9
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002738:	4619      	mov	r1, r3
 800273a:	480b      	ldr	r0, [pc, #44]	@ (8002768 <HAL_TIM_MspPostInit+0x1f4>)
 800273c:	f000 fe22 	bl	8003384 <HAL_GPIO_Init>
}
 8002740:	bf00      	nop
 8002742:	3738      	adds	r7, #56	@ 0x38
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40014000 	.word	0x40014000
 800274c:	40023800 	.word	0x40023800
 8002750:	40021000 	.word	0x40021000
 8002754:	40014400 	.word	0x40014400
 8002758:	40020400 	.word	0x40020400
 800275c:	40014800 	.word	0x40014800
 8002760:	40001800 	.word	0x40001800
 8002764:	40001c00 	.word	0x40001c00
 8002768:	40020000 	.word	0x40020000
 800276c:	40002000 	.word	0x40002000

08002770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	@ 0x30
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a36      	ldr	r2, [pc, #216]	@ (8002868 <HAL_UART_MspInit+0xf8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12d      	bne.n	80027ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	4b35      	ldr	r3, [pc, #212]	@ (800286c <HAL_UART_MspInit+0xfc>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a34      	ldr	r2, [pc, #208]	@ (800286c <HAL_UART_MspInit+0xfc>)
 800279c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b32      	ldr	r3, [pc, #200]	@ (800286c <HAL_UART_MspInit+0xfc>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <HAL_UART_MspInit+0xfc>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a2d      	ldr	r2, [pc, #180]	@ (800286c <HAL_UART_MspInit+0xfc>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b2b      	ldr	r3, [pc, #172]	@ (800286c <HAL_UART_MspInit+0xfc>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027dc:	2308      	movs	r3, #8
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4822      	ldr	r0, [pc, #136]	@ (8002870 <HAL_UART_MspInit+0x100>)
 80027e8:	f000 fdcc 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ec:	e038      	b.n	8002860 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a20      	ldr	r2, [pc, #128]	@ (8002874 <HAL_UART_MspInit+0x104>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d133      	bne.n	8002860 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_UART_MspInit+0xfc>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	4a1a      	ldr	r2, [pc, #104]	@ (800286c <HAL_UART_MspInit+0xfc>)
 8002802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002806:	6413      	str	r3, [r2, #64]	@ 0x40
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_UART_MspInit+0xfc>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	4b14      	ldr	r3, [pc, #80]	@ (800286c <HAL_UART_MspInit+0xfc>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	4a13      	ldr	r2, [pc, #76]	@ (800286c <HAL_UART_MspInit+0xfc>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6313      	str	r3, [r2, #48]	@ 0x30
 8002824:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_UART_MspInit+0xfc>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002830:	230c      	movs	r3, #12
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002840:	2307      	movs	r3, #7
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	480b      	ldr	r0, [pc, #44]	@ (8002878 <HAL_UART_MspInit+0x108>)
 800284c:	f000 fd9a 	bl	8003384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	2026      	movs	r0, #38	@ 0x26
 8002856:	f000 fcbe 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800285a:	2026      	movs	r0, #38	@ 0x26
 800285c:	f000 fcd7 	bl	800320e <HAL_NVIC_EnableIRQ>
}
 8002860:	bf00      	nop
 8002862:	3730      	adds	r7, #48	@ 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40004c00 	.word	0x40004c00
 800286c:	40023800 	.word	0x40023800
 8002870:	40020800 	.word	0x40020800
 8002874:	40004400 	.word	0x40004400
 8002878:	40020000 	.word	0x40020000

0800287c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <HAL_UART_MspDeInit+0x58>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10b      	bne.n	80028a6 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_UART_MspDeInit+0x5c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <HAL_UART_MspDeInit+0x5c>)
 8002894:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 800289a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800289e:	480f      	ldr	r0, [pc, #60]	@ (80028dc <HAL_UART_MspDeInit+0x60>)
 80028a0:	f000 ff0c 	bl	80036bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80028a4:	e011      	b.n	80028ca <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <HAL_UART_MspDeInit+0x64>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d10c      	bne.n	80028ca <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80028b0:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <HAL_UART_MspDeInit+0x5c>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4a08      	ldr	r2, [pc, #32]	@ (80028d8 <HAL_UART_MspDeInit+0x5c>)
 80028b6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80028ba:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80028bc:	210c      	movs	r1, #12
 80028be:	4809      	ldr	r0, [pc, #36]	@ (80028e4 <HAL_UART_MspDeInit+0x68>)
 80028c0:	f000 fefc 	bl	80036bc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80028c4:	2026      	movs	r0, #38	@ 0x26
 80028c6:	f000 fcb0 	bl	800322a <HAL_NVIC_DisableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40004c00 	.word	0x40004c00
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40004400 	.word	0x40004400
 80028e4:	40020000 	.word	0x40020000

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <NMI_Handler+0x4>

080028f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <HardFault_Handler+0x4>

080028f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <MemManage_Handler+0x4>

08002900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <UsageFault_Handler+0x4>

08002910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293e:	f000 f8a5 	bl	8002a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800294c:	4802      	ldr	r0, [pc, #8]	@ (8002958 <USART2_IRQHandler+0x10>)
 800294e:	f003 ff85 	bl	800685c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000628 	.word	0x20000628

0800295c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002960:	4802      	ldr	r0, [pc, #8]	@ (800296c <OTG_FS_IRQHandler+0x10>)
 8002962:	f001 fa49 	bl	8003df8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20001d98 	.word	0x20001d98

08002970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <SystemInit+0x20>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <SystemInit+0x20>)
 800297c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002998:	f7ff ffea 	bl	8002970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800299c:	480c      	ldr	r0, [pc, #48]	@ (80029d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800299e:	490d      	ldr	r1, [pc, #52]	@ (80029d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a4:	e002      	b.n	80029ac <LoopCopyDataInit>

080029a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029aa:	3304      	adds	r3, #4

080029ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b0:	d3f9      	bcc.n	80029a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b2:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029b4:	4c0a      	ldr	r4, [pc, #40]	@ (80029e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b8:	e001      	b.n	80029be <LoopFillZerobss>

080029ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029bc:	3204      	adds	r2, #4

080029be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c0:	d3fb      	bcc.n	80029ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029c2:	f00a fe03 	bl	800d5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029c6:	f7fe fa5b 	bl	8000e80 <main>
  bx  lr    
 80029ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80029d8:	0800f120 	.word	0x0800f120
  ldr r2, =_sbss
 80029dc:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80029e0:	200025d4 	.word	0x200025d4

080029e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC_IRQHandler>
	...

080029e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <HAL_Init+0x40>)
 80029f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_Init+0x40>)
 80029fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a04:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_Init+0x40>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <HAL_Init+0x40>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f000 fbd5 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a16:	200f      	movs	r0, #15
 8002a18:	f000 f808 	bl	8002a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a1c:	f7ff fa60 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023c00 	.word	0x40023c00

08002a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a34:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_InitTick+0x54>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_InitTick+0x58>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fbfb 	bl	8003246 <HAL_SYSTICK_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00e      	b.n	8002a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b0f      	cmp	r3, #15
 8002a5e:	d80a      	bhi.n	8002a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a60:	2200      	movs	r2, #0
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	f000 fbb5 	bl	80031d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a6c:	4a06      	ldr	r2, [pc, #24]	@ (8002a88 <HAL_InitTick+0x5c>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000004 	.word	0x20000004
 8002a84:	2000000c 	.word	0x2000000c
 8002a88:	20000008 	.word	0x20000008

08002a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_IncTick+0x20>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_IncTick+0x24>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <HAL_IncTick+0x24>)
 8002a9e:	6013      	str	r3, [r2, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	2000000c 	.word	0x2000000c
 8002ab0:	20000688 	.word	0x20000688

08002ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <HAL_GetTick+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000688 	.word	0x20000688

08002acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff ffee 	bl	8002ab4 <HAL_GetTick>
 8002ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d005      	beq.n	8002af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_Delay+0x44>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002af2:	bf00      	nop
 8002af4:	f7ff ffde 	bl	8002ab4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d8f7      	bhi.n	8002af4 <HAL_Delay+0x28>
  {
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000000c 	.word	0x2000000c

08002b14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e033      	b.n	8002b92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff f9fc 	bl	8001f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d118      	bne.n	8002b84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b5a:	f023 0302 	bic.w	r3, r3, #2
 8002b5e:	f043 0202 	orr.w	r2, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f93a 	bl	8002de0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b82:	e001      	b.n	8002b88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1c>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e105      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x228>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	d925      	bls.n	8002c14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1e      	subs	r3, #30
 8002bde:	2207      	movs	r2, #7
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43da      	mvns	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	400a      	ands	r2, r1
 8002bec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68d9      	ldr	r1, [r3, #12]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	4603      	mov	r3, r0
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4403      	add	r3, r0
 8002c06:	3b1e      	subs	r3, #30
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	e022      	b.n	8002c5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6919      	ldr	r1, [r3, #16]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	2207      	movs	r2, #7
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	400a      	ands	r2, r1
 8002c36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6919      	ldr	r1, [r3, #16]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4403      	add	r3, r0
 8002c50:	409a      	lsls	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d824      	bhi.n	8002cac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	3b05      	subs	r3, #5
 8002c74:	221f      	movs	r2, #31
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	400a      	ands	r2, r1
 8002c82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4618      	mov	r0, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b05      	subs	r3, #5
 8002c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002caa:	e04c      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d824      	bhi.n	8002cfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b23      	subs	r3, #35	@ 0x23
 8002cc6:	221f      	movs	r2, #31
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b23      	subs	r3, #35	@ 0x23
 8002cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cfc:	e023      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3b41      	subs	r3, #65	@ 0x41
 8002d10:	221f      	movs	r2, #31
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	3b41      	subs	r3, #65	@ 0x41
 8002d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d46:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x234>)
 8002d48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a21      	ldr	r2, [pc, #132]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x238>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d109      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1cc>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b12      	cmp	r3, #18
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x238>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d123      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x21e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d003      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x1e6>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b11      	cmp	r3, #17
 8002d80:	d11b      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d111      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x23c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	@ (8002ddc <HAL_ADC_ConfigChannel+0x240>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	0c9a      	lsrs	r2, r3, #18
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002dac:	e002      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f9      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40012300 	.word	0x40012300
 8002dd4:	40012000 	.word	0x40012000
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de8:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <ADC_Init+0x1f0>)
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	4a58      	ldr	r2, [pc, #352]	@ (8002fd4 <ADC_Init+0x1f4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e00f      	b.n	8002ede <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002edc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0202 	bic.w	r2, r2, #2
 8002eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7e1b      	ldrb	r3, [r3, #24]
 8002ef8:	005a      	lsls	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	3b01      	subs	r3, #1
 8002f38:	035a      	lsls	r2, r3, #13
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e007      	b.n	8002f54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	051a      	lsls	r2, r3, #20
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f96:	025a      	lsls	r2, r3, #9
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	029a      	lsls	r2, r3, #10
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	0f000001 	.word	0x0f000001

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <__NVIC_EnableIRQ+0x38>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db12      	blt.n	80030b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	490a      	ldr	r1, [pc, #40]	@ (80030bc <__NVIC_DisableIRQ+0x44>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	3320      	adds	r3, #32
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030a4:	f3bf 8f4f 	dsb	sy
}
 80030a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030aa:	f3bf 8f6f 	isb	sy
}
 80030ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	@ (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	@ (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	@ 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800318c:	d301      	bcc.n	8003192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318e:	2301      	movs	r3, #1
 8003190:	e00f      	b.n	80031b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003192:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <SysTick_Config+0x40>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319a:	210f      	movs	r1, #15
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f7ff ff8e 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <SysTick_Config+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031aa:	4b04      	ldr	r3, [pc, #16]	@ (80031bc <SysTick_Config+0x40>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff05 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e8:	f7ff ff1a 	bl	8003020 <__NVIC_GetPriorityGrouping>
 80031ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff8e 	bl	8003114 <NVIC_EncodePriority>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff5d 	bl	80030c0 <__NVIC_SetPriority>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff0d 	bl	800303c <__NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff1d 	bl	8003078 <__NVIC_DisableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff94 	bl	800317c <SysTick_Config>
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800326c:	f7ff fc22 	bl	8002ab4 <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d008      	beq.n	8003290 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2280      	movs	r2, #128	@ 0x80
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e052      	b.n	8003336 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0216 	bic.w	r2, r2, #22
 800329e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <HAL_DMA_Abort+0x62>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0208 	bic.w	r2, r2, #8
 80032ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e0:	e013      	b.n	800330a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e2:	f7ff fbe7 	bl	8002ab4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d90c      	bls.n	800330a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2203      	movs	r2, #3
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e015      	b.n	8003336 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e4      	bne.n	80032e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	223f      	movs	r2, #63	@ 0x3f
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d004      	beq.n	800335c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2280      	movs	r2, #128	@ 0x80
 8003356:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e00c      	b.n	8003376 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2205      	movs	r2, #5
 8003360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e16b      	b.n	8003678 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a0:	2201      	movs	r2, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	f040 815a 	bne.w	8003672 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d005      	beq.n	80033d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d130      	bne.n	8003438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0201 	and.w	r2, r3, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b03      	cmp	r3, #3
 8003442:	d017      	beq.n	8003474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d123      	bne.n	80034c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	08da      	lsrs	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3208      	adds	r2, #8
 8003488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	08da      	lsrs	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	69b9      	ldr	r1, [r7, #24]
 80034c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80b4 	beq.w	8003672 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b60      	ldr	r3, [pc, #384]	@ (8003690 <HAL_GPIO_Init+0x30c>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	4a5f      	ldr	r2, [pc, #380]	@ (8003690 <HAL_GPIO_Init+0x30c>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003518:	6453      	str	r3, [r2, #68]	@ 0x44
 800351a:	4b5d      	ldr	r3, [pc, #372]	@ (8003690 <HAL_GPIO_Init+0x30c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003526:	4a5b      	ldr	r2, [pc, #364]	@ (8003694 <HAL_GPIO_Init+0x310>)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	220f      	movs	r2, #15
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a52      	ldr	r2, [pc, #328]	@ (8003698 <HAL_GPIO_Init+0x314>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <HAL_GPIO_Init+0x226>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a51      	ldr	r2, [pc, #324]	@ (800369c <HAL_GPIO_Init+0x318>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d025      	beq.n	80035a6 <HAL_GPIO_Init+0x222>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a50      	ldr	r2, [pc, #320]	@ (80036a0 <HAL_GPIO_Init+0x31c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01f      	beq.n	80035a2 <HAL_GPIO_Init+0x21e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4f      	ldr	r2, [pc, #316]	@ (80036a4 <HAL_GPIO_Init+0x320>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d019      	beq.n	800359e <HAL_GPIO_Init+0x21a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4e      	ldr	r2, [pc, #312]	@ (80036a8 <HAL_GPIO_Init+0x324>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_GPIO_Init+0x216>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4d      	ldr	r2, [pc, #308]	@ (80036ac <HAL_GPIO_Init+0x328>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00d      	beq.n	8003596 <HAL_GPIO_Init+0x212>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4c      	ldr	r2, [pc, #304]	@ (80036b0 <HAL_GPIO_Init+0x32c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <HAL_GPIO_Init+0x20e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4b      	ldr	r2, [pc, #300]	@ (80036b4 <HAL_GPIO_Init+0x330>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_GPIO_Init+0x20a>
 800358a:	2307      	movs	r3, #7
 800358c:	e00e      	b.n	80035ac <HAL_GPIO_Init+0x228>
 800358e:	2308      	movs	r3, #8
 8003590:	e00c      	b.n	80035ac <HAL_GPIO_Init+0x228>
 8003592:	2306      	movs	r3, #6
 8003594:	e00a      	b.n	80035ac <HAL_GPIO_Init+0x228>
 8003596:	2305      	movs	r3, #5
 8003598:	e008      	b.n	80035ac <HAL_GPIO_Init+0x228>
 800359a:	2304      	movs	r3, #4
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x228>
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x228>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x228>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x228>
 80035aa:	2300      	movs	r3, #0
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f002 0203 	and.w	r2, r2, #3
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035bc:	4935      	ldr	r1, [pc, #212]	@ (8003694 <HAL_GPIO_Init+0x310>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ee:	4a32      	ldr	r2, [pc, #200]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f4:	4b30      	ldr	r3, [pc, #192]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003618:	4a27      	ldr	r2, [pc, #156]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800361e:	4b26      	ldr	r3, [pc, #152]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003642:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003648:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800366c:	4a12      	ldr	r2, [pc, #72]	@ (80036b8 <HAL_GPIO_Init+0x334>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3301      	adds	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	f67f ae90 	bls.w	80033a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3724      	adds	r7, #36	@ 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40013800 	.word	0x40013800
 8003698:	40020000 	.word	0x40020000
 800369c:	40020400 	.word	0x40020400
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020c00 	.word	0x40020c00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40021400 	.word	0x40021400
 80036b0:	40021800 	.word	0x40021800
 80036b4:	40021c00 	.word	0x40021c00
 80036b8:	40013c00 	.word	0x40013c00

080036bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e0cd      	b.n	8003874 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d8:	2201      	movs	r2, #1
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	f040 80bd 	bne.w	800386e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036f4:	4a65      	ldr	r2, [pc, #404]	@ (800388c <HAL_GPIO_DeInit+0x1d0>)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	089b      	lsrs	r3, r3, #2
 80036fa:	3302      	adds	r3, #2
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a5d      	ldr	r2, [pc, #372]	@ (8003890 <HAL_GPIO_DeInit+0x1d4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02b      	beq.n	8003776 <HAL_GPIO_DeInit+0xba>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a5c      	ldr	r2, [pc, #368]	@ (8003894 <HAL_GPIO_DeInit+0x1d8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d025      	beq.n	8003772 <HAL_GPIO_DeInit+0xb6>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a5b      	ldr	r2, [pc, #364]	@ (8003898 <HAL_GPIO_DeInit+0x1dc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01f      	beq.n	800376e <HAL_GPIO_DeInit+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a5a      	ldr	r2, [pc, #360]	@ (800389c <HAL_GPIO_DeInit+0x1e0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d019      	beq.n	800376a <HAL_GPIO_DeInit+0xae>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a59      	ldr	r2, [pc, #356]	@ (80038a0 <HAL_GPIO_DeInit+0x1e4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_GPIO_DeInit+0xaa>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a58      	ldr	r2, [pc, #352]	@ (80038a4 <HAL_GPIO_DeInit+0x1e8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00d      	beq.n	8003762 <HAL_GPIO_DeInit+0xa6>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a57      	ldr	r2, [pc, #348]	@ (80038a8 <HAL_GPIO_DeInit+0x1ec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <HAL_GPIO_DeInit+0xa2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a56      	ldr	r2, [pc, #344]	@ (80038ac <HAL_GPIO_DeInit+0x1f0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_GPIO_DeInit+0x9e>
 8003756:	2307      	movs	r3, #7
 8003758:	e00e      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 800375a:	2308      	movs	r3, #8
 800375c:	e00c      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 800375e:	2306      	movs	r3, #6
 8003760:	e00a      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 8003762:	2305      	movs	r3, #5
 8003764:	e008      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 8003766:	2304      	movs	r3, #4
 8003768:	e006      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 800376a:	2303      	movs	r3, #3
 800376c:	e004      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 800376e:	2302      	movs	r3, #2
 8003770:	e002      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_GPIO_DeInit+0xbc>
 8003776:	2300      	movs	r3, #0
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	f002 0203 	and.w	r2, r2, #3
 800377e:	0092      	lsls	r2, r2, #2
 8003780:	4093      	lsls	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d132      	bne.n	80037ee <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003788:	4b49      	ldr	r3, [pc, #292]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	4947      	ldr	r1, [pc, #284]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 8003792:	4013      	ands	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003796:	4b46      	ldr	r3, [pc, #280]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43db      	mvns	r3, r3
 800379e:	4944      	ldr	r1, [pc, #272]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80037a4:	4b42      	ldr	r3, [pc, #264]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	4940      	ldr	r1, [pc, #256]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037b2:	4b3f      	ldr	r3, [pc, #252]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	493d      	ldr	r1, [pc, #244]	@ (80038b0 <HAL_GPIO_DeInit+0x1f4>)
 80037bc:	4013      	ands	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	220f      	movs	r2, #15
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037d0:	4a2e      	ldr	r2, [pc, #184]	@ (800388c <HAL_GPIO_DeInit+0x1d0>)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	3302      	adds	r3, #2
 80037d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	43da      	mvns	r2, r3
 80037e0:	482a      	ldr	r0, [pc, #168]	@ (800388c <HAL_GPIO_DeInit+0x1d0>)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	400a      	ands	r2, r1
 80037e8:	3302      	adds	r3, #2
 80037ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2103      	movs	r1, #3
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	220f      	movs	r2, #15
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	08d2      	lsrs	r2, r2, #3
 8003824:	4019      	ands	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2103      	movs	r1, #3
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	2101      	movs	r1, #1
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2103      	movs	r1, #3
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	401a      	ands	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3301      	adds	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	f67f af2e 	bls.w	80036d8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40013800 	.word	0x40013800
 8003890:	40020000 	.word	0x40020000
 8003894:	40020400 	.word	0x40020400
 8003898:	40020800 	.word	0x40020800
 800389c:	40020c00 	.word	0x40020c00
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40021400 	.word	0x40021400
 80038a8:	40021800 	.word	0x40021800
 80038ac:	40021c00 	.word	0x40021c00
 80038b0:	40013c00 	.word	0x40013c00

080038b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
 80038c0:	4613      	mov	r3, r2
 80038c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c4:	787b      	ldrb	r3, [r7, #1]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ca:	887a      	ldrh	r2, [r7, #2]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d0:	e003      	b.n	80038da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	041a      	lsls	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e12b      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fe fb6e 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	@ 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800393a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800394c:	f001 ffd2 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a81      	ldr	r2, [pc, #516]	@ (8003b5c <HAL_I2C_Init+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <HAL_I2C_Init+0x84>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a80      	ldr	r2, [pc, #512]	@ (8003b60 <HAL_I2C_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e006      	b.n	800397a <HAL_I2C_Init+0x92>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b64 <HAL_I2C_Init+0x27c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0e7      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a78      	ldr	r2, [pc, #480]	@ (8003b68 <HAL_I2C_Init+0x280>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <HAL_I2C_Init+0xd4>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e009      	b.n	80039d0 <HAL_I2C_Init+0xe8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <HAL_I2C_Init+0x284>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	3301      	adds	r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	495c      	ldr	r1, [pc, #368]	@ (8003b5c <HAL_I2C_Init+0x274>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d819      	bhi.n	8003a24 <HAL_I2C_Init+0x13c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e59      	subs	r1, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a04:	400b      	ands	r3, r1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_I2C_Init+0x138>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e59      	subs	r1, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	e051      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x168>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x18e>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x196>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1bc>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e101      	b.n	8003d86 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f009 f9f3 	bl	800cf88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 fe62 	bl	8007886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7c1a      	ldrb	r2, [r3, #16]
 8003bca:	f88d 2000 	strb.w	r2, [sp]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd2:	f003 fd41 	bl	8007658 <USB_CoreInit>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0ce      	b.n	8003d86 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 fe5a 	bl	80078a8 <USB_SetCurrentMode>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0bf      	b.n	8003d86 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e04a      	b.n	8003ca2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3315      	adds	r3, #21
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3314      	adds	r3, #20
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	b298      	uxth	r0, r3
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	332e      	adds	r3, #46	@ 0x2e
 8003c48:	4602      	mov	r2, r0
 8003c4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	331c      	adds	r3, #28
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3320      	adds	r3, #32
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3324      	adds	r3, #36	@ 0x24
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	791b      	ldrb	r3, [r3, #4]
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3af      	bcc.n	8003c0c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e044      	b.n	8003d3c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d20:	7bfa      	ldrb	r2, [r7, #15]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3b5      	bcc.n	8003cb2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7c1a      	ldrb	r2, [r3, #16]
 8003d4e:	f88d 2000 	strb.w	r2, [sp]
 8003d52:	3304      	adds	r3, #4
 8003d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d56:	f003 fdf3 	bl	8007940 <USB_DevInit>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e00c      	b.n	8003d86 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 fe3d 	bl	80089fe <USB_DevDisconnect>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_PCD_Start+0x1c>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e022      	b.n	8003df0 <HAL_PCD_Start+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f003 fd44 	bl	8007864 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 fdeb 	bl	80089bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b08d      	sub	sp, #52	@ 0x34
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 fea9 	bl	8008b66 <USB_GetMode>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 848c 	bne.w	8004734 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f004 fe0d 	bl	8008a40 <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8482 	beq.w	8004732 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 fdfa 	bl	8008a40 <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d107      	bne.n	8003e66 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f002 0202 	and.w	r2, r2, #2
 8003e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f004 fde8 	bl	8008a40 <USB_ReadInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d161      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0210 	bic.w	r2, r2, #16
 8003e88:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 020f 	and.w	r2, r3, #15
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	0c5b      	lsrs	r3, r3, #17
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d124      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d035      	beq.n	8003f2e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6a38      	ldr	r0, [r7, #32]
 8003ed6:	f004 fc1f 	bl	8008718 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee6:	441a      	add	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef8:	441a      	add	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	615a      	str	r2, [r3, #20]
 8003efe:	e016      	b.n	8003f2e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	0c5b      	lsrs	r3, r3, #17
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	2b06      	cmp	r3, #6
 8003f0a:	d110      	bne.n	8003f2e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f12:	2208      	movs	r2, #8
 8003f14:	4619      	mov	r1, r3
 8003f16:	6a38      	ldr	r0, [r7, #32]
 8003f18:	f004 fbfe 	bl	8008718 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f28:	441a      	add	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0210 	orr.w	r2, r2, #16
 8003f3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 fd7c 	bl	8008a40 <USB_ReadInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f4e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f52:	f040 80a7 	bne.w	80040a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f004 fd81 	bl	8008a66 <USB_ReadDevAllOutEpInterrupt>
 8003f64:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f66:	e099      	b.n	800409c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 808e 	beq.w	8004090 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 fda5 	bl	8008ace <USB_ReadDevOutEPInterrupt>
 8003f84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fea3 	bl	8004cf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 ff79 	bl	8004ec0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2310      	movs	r3, #16
 8003fe8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d030      	beq.n	8004056 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffc:	2b80      	cmp	r3, #128	@ 0x80
 8003ffe:	d109      	bne.n	8004014 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004012:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	3304      	adds	r3, #4
 8004028:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	78db      	ldrb	r3, [r3, #3]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f009 f8a8 	bl	800d194 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004050:	461a      	mov	r2, r3
 8004052:	2302      	movs	r3, #2
 8004054:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	2320      	movs	r3, #32
 8004070:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004088:	461a      	mov	r2, r3
 800408a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800408e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	3301      	adds	r3, #1
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800409c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f47f af62 	bne.w	8003f68 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f004 fcc9 	bl	8008a40 <USB_ReadInterrupts>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040b8:	f040 80db 	bne.w	8004272 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f004 fcea 	bl	8008a9a <USB_ReadDevAllInEpInterrupt>
 80040c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80040cc:	e0cd      	b.n	800426a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80c2 	beq.w	800425e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f004 fd10 	bl	8008b0a <USB_ReadDevInEPInterrupt>
 80040ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d057      	beq.n	80041a6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	2201      	movs	r2, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800410a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	43db      	mvns	r3, r3
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004116:	4013      	ands	r3, r2
 8004118:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004126:	461a      	mov	r2, r3
 8004128:	2301      	movs	r3, #1
 800412a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	799b      	ldrb	r3, [r3, #6]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d132      	bne.n	800419a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3320      	adds	r3, #32
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4403      	add	r3, r0
 8004154:	331c      	adds	r3, #28
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4419      	add	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4403      	add	r3, r0
 8004168:	3320      	adds	r3, #32
 800416a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d113      	bne.n	800419a <HAL_PCD_IRQHandler+0x3a2>
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	3324      	adds	r3, #36	@ 0x24
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004192:	461a      	mov	r2, r3
 8004194:	2101      	movs	r1, #1
 8004196:	f004 fd17 	bl	8008bc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	b2db      	uxtb	r3, r3
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f008 ff72 	bl	800d08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041bc:	461a      	mov	r2, r3
 80041be:	2308      	movs	r3, #8
 80041c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d8:	461a      	mov	r2, r3
 80041da:	2310      	movs	r3, #16
 80041dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f4:	461a      	mov	r2, r3
 80041f6:	2340      	movs	r3, #64	@ 0x40
 80041f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d023      	beq.n	800424c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004206:	6a38      	ldr	r0, [r7, #32]
 8004208:	f003 fcfe 	bl	8007c08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800420c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3310      	adds	r3, #16
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	78db      	ldrb	r3, [r3, #3]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d108      	bne.n	800423a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f008 ffbf 	bl	800d1b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004246:	461a      	mov	r2, r3
 8004248:	2302      	movs	r3, #2
 800424a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fcbd 	bl	8004bd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	3301      	adds	r3, #1
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	f47f af2e 	bne.w	80040ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f004 fbe2 	bl	8008a40 <USB_ReadInterrupts>
 800427c:	4603      	mov	r3, r0
 800427e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004286:	d122      	bne.n	80042ce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d108      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042ae:	2100      	movs	r1, #0
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fea3 	bl	8004ffc <HAL_PCDEx_LPM_Callback>
 80042b6:	e002      	b.n	80042be <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f008 ff5d 	bl	800d178 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80042cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f004 fbb4 	bl	8008a40 <USB_ReadInterrupts>
 80042d8:	4603      	mov	r3, r0
 80042da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042e2:	d112      	bne.n	800430a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d102      	bne.n	80042fa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f008 ff19 	bl	800d12c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004308:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 fb96 	bl	8008a40 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431e:	f040 80b7 	bne.w	8004490 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2110      	movs	r1, #16
 800433c:	4618      	mov	r0, r3
 800433e:	f003 fc63 	bl	8007c08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004346:	e046      	b.n	80043d6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004354:	461a      	mov	r2, r3
 8004356:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800435a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436c:	0151      	lsls	r1, r2, #5
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	440a      	add	r2, r1
 8004372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004376:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800437a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800438e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d2:	3301      	adds	r3, #1
 80043d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	791b      	ldrb	r3, [r3, #4]
 80043da:	461a      	mov	r2, r3
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	4293      	cmp	r3, r2
 80043e0:	d3b2      	bcc.n	8004348 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80043f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7bdb      	ldrb	r3, [r3, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800440e:	f043 030b 	orr.w	r3, r3, #11
 8004412:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004424:	f043 030b 	orr.w	r3, r3, #11
 8004428:	6453      	str	r3, [r2, #68]	@ 0x44
 800442a:	e015      	b.n	8004458 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800443a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800443e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004442:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004452:	f043 030b 	orr.w	r3, r3, #11
 8004456:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004466:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800446a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800447a:	461a      	mov	r2, r3
 800447c:	f004 fba4 	bl	8008bc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800448e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f004 fad3 	bl	8008a40 <USB_ReadInterrupts>
 800449a:	4603      	mov	r3, r0
 800449c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044a4:	d123      	bne.n	80044ee <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f004 fb69 	bl	8008b82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f003 fc20 	bl	8007cfa <USB_GetDevSpeed>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681c      	ldr	r4, [r3, #0]
 80044c6:	f001 fa09 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 80044ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044d0:	461a      	mov	r2, r3
 80044d2:	4620      	mov	r0, r4
 80044d4:	f003 f924 	bl	8007720 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f008 fdfe 	bl	800d0da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80044ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f004 faa4 	bl	8008a40 <USB_ReadInterrupts>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d10a      	bne.n	8004518 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f008 fddb 	bl	800d0be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f002 0208 	and.w	r2, r2, #8
 8004516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f004 fa8f 	bl	8008a40 <USB_ReadInterrupts>
 8004522:	4603      	mov	r3, r0
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	2b80      	cmp	r3, #128	@ 0x80
 800452a:	d123      	bne.n	8004574 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004538:	2301      	movs	r3, #1
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
 800453c:	e014      	b.n	8004568 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	b2db      	uxtb	r3, r3
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fb0a 	bl	8004b76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	3301      	adds	r3, #1
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	791b      	ldrb	r3, [r3, #4]
 800456c:	461a      	mov	r2, r3
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	4293      	cmp	r3, r2
 8004572:	d3e4      	bcc.n	800453e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f004 fa61 	bl	8008a40 <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004584:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004588:	d13c      	bne.n	8004604 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800458a:	2301      	movs	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
 800458e:	e02b      	b.n	80045e8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	3318      	adds	r3, #24
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d115      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da12      	bge.n	80045e2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	3317      	adds	r3, #23
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 faca 	bl	8004b76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	3301      	adds	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d3cd      	bcc.n	8004590 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f004 fa19 	bl	8008a40 <USB_ReadInterrupts>
 800460e:	4603      	mov	r3, r0
 8004610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004618:	d156      	bne.n	80046c8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800461a:	2301      	movs	r3, #1
 800461c:	627b      	str	r3, [r7, #36]	@ 0x24
 800461e:	e045      	b.n	80046ac <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d12e      	bne.n	80046a6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004648:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800464a:	2b00      	cmp	r3, #0
 800464c:	da2b      	bge.n	80046a6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800465a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800465e:	429a      	cmp	r2, r3
 8004660:	d121      	bne.n	80046a6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800469e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046a2:	6053      	str	r3, [r2, #4]
            break;
 80046a4:	e008      	b.n	80046b8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	3301      	adds	r3, #1
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	791b      	ldrb	r3, [r3, #4]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d3b3      	bcc.n	8004620 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80046c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f004 f9b7 	bl	8008a40 <USB_ReadInterrupts>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d10a      	bne.n	80046f4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f008 fd7c 	bl	800d1dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f004 f9a1 	bl	8008a40 <USB_ReadInterrupts>
 80046fe:	4603      	mov	r3, r0
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d115      	bne.n	8004734 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f008 fd6c 	bl	800d1f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	e000      	b.n	8004734 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004732:	bf00      	nop
    }
  }
}
 8004734:	3734      	adds	r7, #52	@ 0x34
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}

0800473a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_PCD_SetAddress+0x1a>
 8004750:	2302      	movs	r3, #2
 8004752:	e012      	b.n	800477a <HAL_PCD_SetAddress+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f004 f900 	bl	8008970 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	461a      	mov	r2, r3
 8004790:	4603      	mov	r3, r0
 8004792:	70fb      	strb	r3, [r7, #3]
 8004794:	460b      	mov	r3, r1
 8004796:	803b      	strh	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da0f      	bge.n	80047c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	f003 020f 	and.w	r2, r3, #15
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	3310      	adds	r3, #16
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4413      	add	r3, r2
 80047bc:	3304      	adds	r3, #4
 80047be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	705a      	strb	r2, [r3, #1]
 80047c6:	e00f      	b.n	80047e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	f003 020f 	and.w	r2, r3, #15
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	3304      	adds	r3, #4
 80047e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80047f4:	883b      	ldrh	r3, [r7, #0]
 80047f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	78ba      	ldrb	r2, [r7, #2]
 8004802:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d004      	beq.n	8004816 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004816:	78bb      	ldrb	r3, [r7, #2]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d102      	bne.n	8004822 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_PCD_EP_Open+0xae>
 800482c:	2302      	movs	r3, #2
 800482e:	e00e      	b.n	800484e <HAL_PCD_EP_Open+0xcc>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68f9      	ldr	r1, [r7, #12]
 800483e:	4618      	mov	r0, r3
 8004840:	f003 fa80 	bl	8007d44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800484c:	7afb      	ldrb	r3, [r7, #11]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004866:	2b00      	cmp	r3, #0
 8004868:	da0f      	bge.n	800488a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	3310      	adds	r3, #16
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	3304      	adds	r3, #4
 8004880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	705a      	strb	r2, [r3, #1]
 8004888:	e00f      	b.n	80048aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	f003 020f 	and.w	r2, r3, #15
 8004890:	4613      	mov	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	3304      	adds	r3, #4
 80048a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_PCD_EP_Close+0x6e>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e00e      	b.n	80048e2 <HAL_PCD_EP_Close+0x8c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68f9      	ldr	r1, [r7, #12]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f003 fabe 	bl	8007e54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	460b      	mov	r3, r1
 80048f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048fa:	7afb      	ldrb	r3, [r7, #11]
 80048fc:	f003 020f 	and.w	r2, r3, #15
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	3304      	adds	r3, #4
 8004912:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2200      	movs	r2, #0
 8004924:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	b2da      	uxtb	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	799b      	ldrb	r3, [r3, #6]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d102      	bne.n	8004946 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	799b      	ldrb	r3, [r3, #6]
 800494e:	461a      	mov	r2, r3
 8004950:	6979      	ldr	r1, [r7, #20]
 8004952:	f003 fb5b 	bl	800800c <USB_EPStartXfer>

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004982:	681b      	ldr	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	460b      	mov	r3, r1
 800499e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049a0:	7afb      	ldrb	r3, [r7, #11]
 80049a2:	f003 020f 	and.w	r2, r3, #15
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	3310      	adds	r3, #16
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	3304      	adds	r3, #4
 80049b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2201      	movs	r2, #1
 80049ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d0:	7afb      	ldrb	r3, [r7, #11]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	799b      	ldrb	r3, [r3, #6]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d102      	bne.n	80049ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	799b      	ldrb	r3, [r3, #6]
 80049f2:	461a      	mov	r2, r3
 80049f4:	6979      	ldr	r1, [r7, #20]
 80049f6:	f003 fb09 	bl	800800c <USB_EPStartXfer>

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	7912      	ldrb	r2, [r2, #4]
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e04f      	b.n	8004ac2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da0f      	bge.n	8004a4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	3310      	adds	r3, #16
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3304      	adds	r3, #4
 8004a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	705a      	strb	r2, [r3, #1]
 8004a48:	e00d      	b.n	8004a66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_PCD_EP_SetStall+0x82>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e01d      	b.n	8004ac2 <HAL_PCD_EP_SetStall+0xbe>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 fe97 	bl	80087c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7999      	ldrb	r1, [r3, #6]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f004 f888 	bl	8008bc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	7912      	ldrb	r2, [r2, #4]
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e042      	b.n	8004b6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da0f      	bge.n	8004b10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3310      	adds	r3, #16
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	3304      	adds	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	705a      	strb	r2, [r3, #1]
 8004b0e:	e00f      	b.n	8004b30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	3304      	adds	r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_PCD_EP_ClrStall+0x86>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e00e      	b.n	8004b6e <HAL_PCD_EP_ClrStall+0xa4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f003 fea0 	bl	80088a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da0c      	bge.n	8004ba4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	3310      	adds	r3, #16
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e00c      	b.n	8004bbe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	3304      	adds	r3, #4
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f003 fcbf 	bl	8008548 <USB_EPStopXfer>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bce:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	@ 0x28
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d901      	bls.n	8004c10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e06b      	b.n	8004ce8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d902      	bls.n	8004c2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	3303      	adds	r3, #3
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c34:	e02a      	b.n	8004c8c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d902      	bls.n	8004c52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3303      	adds	r3, #3
 8004c56:	089b      	lsrs	r3, r3, #2
 8004c58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68d9      	ldr	r1, [r3, #12]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f003 fd14 	bl	800869c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	441a      	add	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d809      	bhi.n	8004cb6 <PCD_WriteEmptyTxFifo+0xde>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d203      	bcs.n	8004cb6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1bf      	bne.n	8004c36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d811      	bhi.n	8004ce6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2201      	movs	r2, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	6939      	ldr	r1, [r7, #16]
 8004cde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	333c      	adds	r3, #60	@ 0x3c
 8004d08:	3304      	adds	r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	799b      	ldrb	r3, [r3, #6]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d17b      	bne.n	8004e1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4a61      	ldr	r2, [pc, #388]	@ (8004eb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	f240 80b9 	bls.w	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80b3 	beq.w	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d52:	461a      	mov	r2, r3
 8004d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d58:	6093      	str	r3, [r2, #8]
 8004d5a:	e0a7      	b.n	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	2320      	movs	r3, #32
 8004d76:	6093      	str	r3, [r2, #8]
 8004d78:	e098      	b.n	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 8093 	bne.w	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d90f      	bls.n	8004dae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da4:	461a      	mov	r2, r3
 8004da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004daa:	6093      	str	r3, [r2, #8]
 8004dac:	e07e      	b.n	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	0159      	lsls	r1, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d114      	bne.n	8004e10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	f003 fee4 	bl	8008bc8 <USB_EP0_OutStart>
 8004e00:	e006      	b.n	8004e10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f008 f91c 	bl	800d054 <HAL_PCD_DataOutStageCallback>
 8004e1c:	e046      	b.n	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d124      	bne.n	8004e70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e42:	6093      	str	r3, [r2, #8]
 8004e44:	e032      	b.n	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2320      	movs	r3, #32
 8004e60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f008 f8f3 	bl	800d054 <HAL_PCD_DataOutStageCallback>
 8004e6e:	e01d      	b.n	8004eac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d114      	bne.n	8004ea0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	f003 fe94 	bl	8008bc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f008 f8d4 	bl	800d054 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	4f54300a 	.word	0x4f54300a
 8004ebc:	4f54310a 	.word	0x4f54310a

08004ec0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	333c      	adds	r3, #60	@ 0x3c
 8004ed8:	3304      	adds	r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a15      	ldr	r2, [pc, #84]	@ (8004f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d90e      	bls.n	8004f14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f008 f88b 	bl	800d030 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d90c      	bls.n	8004f3c <PCD_EP_OutSetupPacket_int+0x7c>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	799b      	ldrb	r3, [r3, #6]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d108      	bne.n	8004f3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f34:	461a      	mov	r2, r3
 8004f36:	2101      	movs	r1, #1
 8004f38:	f003 fe46 	bl	8008bc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	4f54300a 	.word	0x4f54300a

08004f4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f6a:	883b      	ldrh	r3, [r7, #0]
 8004f6c:	0419      	lsls	r1, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f78:	e028      	b.n	8004fcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4413      	add	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	e00d      	b.n	8004faa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	3340      	adds	r3, #64	@ 0x40
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3ec      	bcc.n	8004f8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fb4:	883b      	ldrh	r3, [r7, #0]
 8004fb6:	0418      	lsls	r0, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6819      	ldr	r1, [r3, #0]
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4302      	orrs	r2, r0
 8004fc4:	3340      	adds	r3, #64	@ 0x40
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e267      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d075      	beq.n	800511e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005032:	4b88      	ldr	r3, [pc, #544]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b04      	cmp	r3, #4
 800503c:	d00c      	beq.n	8005058 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503e:	4b85      	ldr	r3, [pc, #532]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005046:	2b08      	cmp	r3, #8
 8005048:	d112      	bne.n	8005070 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504a:	4b82      	ldr	r3, [pc, #520]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005056:	d10b      	bne.n	8005070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	4b7e      	ldr	r3, [pc, #504]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05b      	beq.n	800511c <HAL_RCC_OscConfig+0x108>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d157      	bne.n	800511c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e242      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005078:	d106      	bne.n	8005088 <HAL_RCC_OscConfig+0x74>
 800507a:	4b76      	ldr	r3, [pc, #472]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a75      	ldr	r2, [pc, #468]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e01d      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x98>
 8005092:	4b70      	ldr	r3, [pc, #448]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a6f      	ldr	r2, [pc, #444]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4b6d      	ldr	r3, [pc, #436]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a6c      	ldr	r2, [pc, #432]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e00b      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 80050ac:	4b69      	ldr	r3, [pc, #420]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a68      	ldr	r2, [pc, #416]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b66      	ldr	r3, [pc, #408]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a65      	ldr	r2, [pc, #404]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fd fcf2 	bl	8002ab4 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fd fcee 	bl	8002ab4 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	@ 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e207      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0xc0>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fd fcde 	bl	8002ab4 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fd fcda 	bl	8002ab4 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	@ 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e1f3      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510e:	4b51      	ldr	r3, [pc, #324]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0xe8>
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d063      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800512a:	4b4a      	ldr	r3, [pc, #296]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005136:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800513e:	2b08      	cmp	r3, #8
 8005140:	d11c      	bne.n	800517c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005142:	4b44      	ldr	r3, [pc, #272]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d116      	bne.n	800517c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514e:	4b41      	ldr	r3, [pc, #260]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_RCC_OscConfig+0x152>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d001      	beq.n	8005166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e1c7      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005166:	4b3b      	ldr	r3, [pc, #236]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4937      	ldr	r1, [pc, #220]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517a:	e03a      	b.n	80051f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d020      	beq.n	80051c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005184:	4b34      	ldr	r3, [pc, #208]	@ (8005258 <HAL_RCC_OscConfig+0x244>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fd fc93 	bl	8002ab4 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005192:	f7fd fc8f 	bl	8002ab4 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e1a8      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b0:	4b28      	ldr	r3, [pc, #160]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4925      	ldr	r1, [pc, #148]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]
 80051c4:	e015      	b.n	80051f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c6:	4b24      	ldr	r3, [pc, #144]	@ (8005258 <HAL_RCC_OscConfig+0x244>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fd fc72 	bl	8002ab4 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d4:	f7fd fc6e 	bl	8002ab4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e187      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d036      	beq.n	800526c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <HAL_RCC_OscConfig+0x248>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fd fc52 	bl	8002ab4 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005214:	f7fd fc4e 	bl	8002ab4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e167      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005226:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <HAL_RCC_OscConfig+0x240>)
 8005228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x200>
 8005232:	e01b      	b.n	800526c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <HAL_RCC_OscConfig+0x248>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523a:	f7fd fc3b 	bl	8002ab4 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005240:	e00e      	b.n	8005260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005242:	f7fd fc37 	bl	8002ab4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d907      	bls.n	8005260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e150      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
 8005254:	40023800 	.word	0x40023800
 8005258:	42470000 	.word	0x42470000
 800525c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005260:	4b88      	ldr	r3, [pc, #544]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ea      	bne.n	8005242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8097 	beq.w	80053a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527e:	4b81      	ldr	r3, [pc, #516]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	4b7d      	ldr	r3, [pc, #500]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	4a7c      	ldr	r2, [pc, #496]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005298:	6413      	str	r3, [r2, #64]	@ 0x40
 800529a:	4b7a      	ldr	r3, [pc, #488]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052aa:	4b77      	ldr	r3, [pc, #476]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d118      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b6:	4b74      	ldr	r3, [pc, #464]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a73      	ldr	r2, [pc, #460]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fd fbf7 	bl	8002ab4 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ca:	f7fd fbf3 	bl	8002ab4 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e10c      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005488 <HAL_RCC_OscConfig+0x474>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d106      	bne.n	80052fe <HAL_RCC_OscConfig+0x2ea>
 80052f0:	4b64      	ldr	r3, [pc, #400]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	4a63      	ldr	r2, [pc, #396]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fc:	e01c      	b.n	8005338 <HAL_RCC_OscConfig+0x324>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b05      	cmp	r3, #5
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0x30c>
 8005306:	4b5f      	ldr	r3, [pc, #380]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530a:	4a5e      	ldr	r2, [pc, #376]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	6713      	str	r3, [r2, #112]	@ 0x70
 8005312:	4b5c      	ldr	r3, [pc, #368]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005316:	4a5b      	ldr	r2, [pc, #364]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	6713      	str	r3, [r2, #112]	@ 0x70
 800531e:	e00b      	b.n	8005338 <HAL_RCC_OscConfig+0x324>
 8005320:	4b58      	ldr	r3, [pc, #352]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005324:	4a57      	ldr	r2, [pc, #348]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	6713      	str	r3, [r2, #112]	@ 0x70
 800532c:	4b55      	ldr	r3, [pc, #340]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005330:	4a54      	ldr	r2, [pc, #336]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005332:	f023 0304 	bic.w	r3, r3, #4
 8005336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005340:	f7fd fbb8 	bl	8002ab4 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	e00a      	b.n	800535e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f7fd fbb4 	bl	8002ab4 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e0cb      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535e:	4b49      	ldr	r3, [pc, #292]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0ee      	beq.n	8005348 <HAL_RCC_OscConfig+0x334>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536c:	f7fd fba2 	bl	8002ab4 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005372:	e00a      	b.n	800538a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005374:	f7fd fb9e 	bl	8002ab4 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e0b5      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538a:	4b3e      	ldr	r3, [pc, #248]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1ee      	bne.n	8005374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539c:	4b39      	ldr	r3, [pc, #228]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	4a38      	ldr	r2, [pc, #224]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80053a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80a1 	beq.w	80054f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b2:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d05c      	beq.n	8005478 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d141      	bne.n	800544a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c6:	4b31      	ldr	r3, [pc, #196]	@ (800548c <HAL_RCC_OscConfig+0x478>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053cc:	f7fd fb72 	bl	8002ab4 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fd fb6e 	bl	8002ab4 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e087      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e6:	4b27      	ldr	r3, [pc, #156]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	3b01      	subs	r3, #1
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	491b      	ldr	r1, [pc, #108]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 8005418:	4313      	orrs	r3, r2
 800541a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800541c:	4b1b      	ldr	r3, [pc, #108]	@ (800548c <HAL_RCC_OscConfig+0x478>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005422:	f7fd fb47 	bl	8002ab4 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542a:	f7fd fb43 	bl	8002ab4 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e05c      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543c:	4b11      	ldr	r3, [pc, #68]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x416>
 8005448:	e054      	b.n	80054f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544a:	4b10      	ldr	r3, [pc, #64]	@ (800548c <HAL_RCC_OscConfig+0x478>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fd fb30 	bl	8002ab4 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005458:	f7fd fb2c 	bl	8002ab4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e045      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_RCC_OscConfig+0x470>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x444>
 8005476:	e03d      	b.n	80054f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d107      	bne.n	8005490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e038      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
 8005484:	40023800 	.word	0x40023800
 8005488:	40007000 	.word	0x40007000
 800548c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005490:	4b1b      	ldr	r3, [pc, #108]	@ (8005500 <HAL_RCC_OscConfig+0x4ec>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d028      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d121      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d11a      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054c0:	4013      	ands	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d111      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	3b01      	subs	r3, #1
 80054da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0cc      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b68      	ldr	r3, [pc, #416]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d90c      	bls.n	8005540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b65      	ldr	r3, [pc, #404]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b63      	ldr	r3, [pc, #396]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0b8      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005558:	4b59      	ldr	r3, [pc, #356]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a58      	ldr	r2, [pc, #352]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005570:	4b53      	ldr	r3, [pc, #332]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a52      	ldr	r2, [pc, #328]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800557a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557c:	4b50      	ldr	r3, [pc, #320]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	494d      	ldr	r1, [pc, #308]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d044      	beq.n	8005624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a2:	4b47      	ldr	r3, [pc, #284]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d119      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e07f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d003      	beq.n	80055c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c2:	4b3f      	ldr	r3, [pc, #252]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e06f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d2:	4b3b      	ldr	r3, [pc, #236]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e067      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e2:	4b37      	ldr	r3, [pc, #220]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0203 	bic.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4934      	ldr	r1, [pc, #208]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f4:	f7fd fa5e 	bl	8002ab4 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	e00a      	b.n	8005612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055fc:	f7fd fa5a 	bl	8002ab4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e04f      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	4b2b      	ldr	r3, [pc, #172]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 020c 	and.w	r2, r3, #12
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	429a      	cmp	r2, r3
 8005622:	d1eb      	bne.n	80055fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005624:	4b25      	ldr	r3, [pc, #148]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d20c      	bcs.n	800564c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005632:	4b22      	ldr	r3, [pc, #136]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563a:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e032      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005658:	4b19      	ldr	r3, [pc, #100]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4916      	ldr	r1, [pc, #88]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005676:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	490e      	ldr	r1, [pc, #56]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800568a:	f000 f821 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 800568e:	4602      	mov	r2, r0
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	490a      	ldr	r1, [pc, #40]	@ (80056c4 <HAL_RCC_ClockConfig+0x1c0>)
 800569c:	5ccb      	ldrb	r3, [r1, r3]
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	4a09      	ldr	r2, [pc, #36]	@ (80056c8 <HAL_RCC_ClockConfig+0x1c4>)
 80056a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056a6:	4b09      	ldr	r3, [pc, #36]	@ (80056cc <HAL_RCC_ClockConfig+0x1c8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fd f9be 	bl	8002a2c <HAL_InitTick>

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40023c00 	.word	0x40023c00
 80056c0:	40023800 	.word	0x40023800
 80056c4:	0800eeb0 	.word	0x0800eeb0
 80056c8:	20000004 	.word	0x20000004
 80056cc:	20000008 	.word	0x20000008

080056d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b094      	sub	sp, #80	@ 0x50
 80056d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e8:	4b79      	ldr	r3, [pc, #484]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d00d      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x40>
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	f200 80e1 	bhi.w	80058bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0x34>
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d003      	beq.n	800570a <HAL_RCC_GetSysClockFreq+0x3a>
 8005702:	e0db      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005704:	4b73      	ldr	r3, [pc, #460]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005706:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005708:	e0db      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800570a:	4b73      	ldr	r3, [pc, #460]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800570e:	e0d8      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005710:	4b6f      	ldr	r3, [pc, #444]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005718:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571a:	4b6d      	ldr	r3, [pc, #436]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d063      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005726:	4b6a      	ldr	r3, [pc, #424]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	099b      	lsrs	r3, r3, #6
 800572c:	2200      	movs	r2, #0
 800572e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005730:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005738:	633b      	str	r3, [r7, #48]	@ 0x30
 800573a:	2300      	movs	r3, #0
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
 800573e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	f04f 0000 	mov.w	r0, #0
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	0159      	lsls	r1, r3, #5
 8005750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005754:	0150      	lsls	r0, r2, #5
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4621      	mov	r1, r4
 800575c:	1a51      	subs	r1, r2, r1
 800575e:	6139      	str	r1, [r7, #16]
 8005760:	4629      	mov	r1, r5
 8005762:	eb63 0301 	sbc.w	r3, r3, r1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005774:	4659      	mov	r1, fp
 8005776:	018b      	lsls	r3, r1, #6
 8005778:	4651      	mov	r1, sl
 800577a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800577e:	4651      	mov	r1, sl
 8005780:	018a      	lsls	r2, r1, #6
 8005782:	4651      	mov	r1, sl
 8005784:	ebb2 0801 	subs.w	r8, r2, r1
 8005788:	4659      	mov	r1, fp
 800578a:	eb63 0901 	sbc.w	r9, r3, r1
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800579e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a2:	4690      	mov	r8, r2
 80057a4:	4699      	mov	r9, r3
 80057a6:	4623      	mov	r3, r4
 80057a8:	eb18 0303 	adds.w	r3, r8, r3
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	462b      	mov	r3, r5
 80057b0:	eb49 0303 	adc.w	r3, r9, r3
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057c2:	4629      	mov	r1, r5
 80057c4:	024b      	lsls	r3, r1, #9
 80057c6:	4621      	mov	r1, r4
 80057c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057cc:	4621      	mov	r1, r4
 80057ce:	024a      	lsls	r2, r1, #9
 80057d0:	4610      	mov	r0, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d6:	2200      	movs	r2, #0
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057e0:	f7fb f9d6 	bl	8000b90 <__aeabi_uldivmod>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4613      	mov	r3, r2
 80057ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ec:	e058      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ee:	4b38      	ldr	r3, [pc, #224]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	2200      	movs	r2, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	4611      	mov	r1, r2
 80057fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	@ 0x24
 8005804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	f04f 0000 	mov.w	r0, #0
 8005810:	f04f 0100 	mov.w	r1, #0
 8005814:	0159      	lsls	r1, r3, #5
 8005816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800581a:	0150      	lsls	r0, r2, #5
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4641      	mov	r1, r8
 8005822:	ebb2 0a01 	subs.w	sl, r2, r1
 8005826:	4649      	mov	r1, r9
 8005828:	eb63 0b01 	sbc.w	fp, r3, r1
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800583c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005840:	ebb2 040a 	subs.w	r4, r2, sl
 8005844:	eb63 050b 	sbc.w	r5, r3, fp
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	00eb      	lsls	r3, r5, #3
 8005852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005856:	00e2      	lsls	r2, r4, #3
 8005858:	4614      	mov	r4, r2
 800585a:	461d      	mov	r5, r3
 800585c:	4643      	mov	r3, r8
 800585e:	18e3      	adds	r3, r4, r3
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	464b      	mov	r3, r9
 8005864:	eb45 0303 	adc.w	r3, r5, r3
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005876:	4629      	mov	r1, r5
 8005878:	028b      	lsls	r3, r1, #10
 800587a:	4621      	mov	r1, r4
 800587c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005880:	4621      	mov	r1, r4
 8005882:	028a      	lsls	r2, r1, #10
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588a:	2200      	movs	r2, #0
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	61fa      	str	r2, [r7, #28]
 8005890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005894:	f7fb f97c 	bl	8000b90 <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4613      	mov	r3, r2
 800589e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058a0:	4b0b      	ldr	r3, [pc, #44]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	3301      	adds	r3, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80058b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3750      	adds	r7, #80	@ 0x50
 80058c8:	46bd      	mov	sp, r7
 80058ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ce:	bf00      	nop
 80058d0:	40023800 	.word	0x40023800
 80058d4:	00f42400 	.word	0x00f42400
 80058d8:	007a1200 	.word	0x007a1200

080058dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e0:	4b03      	ldr	r3, [pc, #12]	@ (80058f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000004 	.word	0x20000004

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058f8:	f7ff fff0 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	0a9b      	lsrs	r3, r3, #10
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4903      	ldr	r1, [pc, #12]	@ (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40023800 	.word	0x40023800
 8005918:	0800eec0 	.word	0x0800eec0

0800591c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005920:	f7ff ffdc 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b05      	ldr	r3, [pc, #20]	@ (800593c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	0b5b      	lsrs	r3, r3, #13
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4903      	ldr	r1, [pc, #12]	@ (8005940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40023800 	.word	0x40023800
 8005940:	0800eec0 	.word	0x0800eec0

08005944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07b      	b.n	8005a4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d108      	bne.n	8005970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005966:	d009      	beq.n	800597c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	61da      	str	r2, [r3, #28]
 800596e:	e005      	b.n	800597c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fb72 	bl	8002080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a00:	ea42 0103 	orr.w	r1, r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	f003 0104 	and.w	r1, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	f003 0210 	and.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e041      	b.n	8005aec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d106      	bne.n	8005a82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7fc fd15 	bl	80024ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f000 fb3b 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e041      	b.n	8005b8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc fc8e 	bl	800243c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f000 faec 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d109      	bne.n	8005bb8 <HAL_TIM_PWM_Start+0x24>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	bf14      	ite	ne
 8005bb0:	2301      	movne	r3, #1
 8005bb2:	2300      	moveq	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e022      	b.n	8005bfe <HAL_TIM_PWM_Start+0x6a>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d109      	bne.n	8005bd2 <HAL_TIM_PWM_Start+0x3e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e015      	b.n	8005bfe <HAL_TIM_PWM_Start+0x6a>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d109      	bne.n	8005bec <HAL_TIM_PWM_Start+0x58>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e008      	b.n	8005bfe <HAL_TIM_PWM_Start+0x6a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e07c      	b.n	8005d00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x82>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c14:	e013      	b.n	8005c3e <HAL_TIM_PWM_Start+0xaa>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0x92>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c24:	e00b      	b.n	8005c3e <HAL_TIM_PWM_Start+0xaa>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_Start+0xa2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c34:	e003      	b.n	8005c3e <HAL_TIM_PWM_Start+0xaa>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2201      	movs	r2, #1
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fcbe 	bl	80065c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2d      	ldr	r2, [pc, #180]	@ (8005d08 <HAL_TIM_PWM_Start+0x174>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_TIM_PWM_Start+0xcc>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d0c <HAL_TIM_PWM_Start+0x178>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIM_PWM_Start+0xd0>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_TIM_PWM_Start+0xd2>
 8005c64:	2300      	movs	r3, #0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a22      	ldr	r2, [pc, #136]	@ (8005d08 <HAL_TIM_PWM_Start+0x174>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_TIM_PWM_Start+0x136>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8c:	d01d      	beq.n	8005cca <HAL_TIM_PWM_Start+0x136>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1f      	ldr	r2, [pc, #124]	@ (8005d10 <HAL_TIM_PWM_Start+0x17c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d018      	beq.n	8005cca <HAL_TIM_PWM_Start+0x136>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d14 <HAL_TIM_PWM_Start+0x180>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_TIM_PWM_Start+0x136>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d18 <HAL_TIM_PWM_Start+0x184>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <HAL_TIM_PWM_Start+0x136>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a16      	ldr	r2, [pc, #88]	@ (8005d0c <HAL_TIM_PWM_Start+0x178>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_TIM_PWM_Start+0x136>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a18      	ldr	r2, [pc, #96]	@ (8005d1c <HAL_TIM_PWM_Start+0x188>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_TIM_PWM_Start+0x136>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a16      	ldr	r2, [pc, #88]	@ (8005d20 <HAL_TIM_PWM_Start+0x18c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d111      	bne.n	8005cee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b06      	cmp	r3, #6
 8005cda:	d010      	beq.n	8005cfe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	e007      	b.n	8005cfe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40001800 	.word	0x40001800

08005d24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e097      	b.n	8005e68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fc f9ff 	bl	8002150 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d68:	f023 0307 	bic.w	r3, r3, #7
 8005d6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f000 f9c9 	bl	8006110 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	4313      	orrs	r3, r2
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005dc4:	f023 030c 	bic.w	r3, r3, #12
 8005dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	4313      	orrs	r3, r2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	011a      	lsls	r2, r3, #4
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	031b      	lsls	r3, r3, #12
 8005df4:	4313      	orrs	r3, r2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	4313      	orrs	r3, r2
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d110      	bne.n	8005ec2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d102      	bne.n	8005eac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ea6:	7b7b      	ldrb	r3, [r7, #13]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e069      	b.n	8005f84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ec0:	e031      	b.n	8005f26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d110      	bne.n	8005eea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ec8:	7bbb      	ldrb	r3, [r7, #14]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d102      	bne.n	8005ed4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ece:	7b3b      	ldrb	r3, [r7, #12]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d001      	beq.n	8005ed8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e055      	b.n	8005f84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ee8:	e01d      	b.n	8005f26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d108      	bne.n	8005f02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d105      	bne.n	8005f02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ef6:	7b7b      	ldrb	r3, [r7, #13]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d102      	bne.n	8005f02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005efc:	7b3b      	ldrb	r3, [r7, #12]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d001      	beq.n	8005f06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e03e      	b.n	8005f84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_TIM_Encoder_Start+0xc4>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d008      	beq.n	8005f44 <HAL_TIM_Encoder_Start+0xd4>
 8005f32:	e00f      	b.n	8005f54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fb43 	bl	80065c8 <TIM_CCxChannelCmd>
      break;
 8005f42:	e016      	b.n	8005f72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	2104      	movs	r1, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fb3b 	bl	80065c8 <TIM_CCxChannelCmd>
      break;
 8005f52:	e00e      	b.n	8005f72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fb33 	bl	80065c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2201      	movs	r2, #1
 8005f68:	2104      	movs	r1, #4
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fb2c 	bl	80065c8 <TIM_CCxChannelCmd>
      break;
 8005f70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0201 	orr.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e0ae      	b.n	8006108 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b0c      	cmp	r3, #12
 8005fb6:	f200 809f 	bhi.w	80060f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fba:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005ff5 	.word	0x08005ff5
 8005fc4:	080060f9 	.word	0x080060f9
 8005fc8:	080060f9 	.word	0x080060f9
 8005fcc:	080060f9 	.word	0x080060f9
 8005fd0:	08006035 	.word	0x08006035
 8005fd4:	080060f9 	.word	0x080060f9
 8005fd8:	080060f9 	.word	0x080060f9
 8005fdc:	080060f9 	.word	0x080060f9
 8005fe0:	08006077 	.word	0x08006077
 8005fe4:	080060f9 	.word	0x080060f9
 8005fe8:	080060f9 	.word	0x080060f9
 8005fec:	080060f9 	.word	0x080060f9
 8005ff0:	080060b7 	.word	0x080060b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f934 	bl	8006268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0208 	orr.w	r2, r2, #8
 800600e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0204 	bic.w	r2, r2, #4
 800601e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6999      	ldr	r1, [r3, #24]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	619a      	str	r2, [r3, #24]
      break;
 8006032:	e064      	b.n	80060fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f984 	bl	8006348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800604e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800605e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6999      	ldr	r1, [r3, #24]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	021a      	lsls	r2, r3, #8
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	619a      	str	r2, [r3, #24]
      break;
 8006074:	e043      	b.n	80060fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f9d9 	bl	8006434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0208 	orr.w	r2, r2, #8
 8006090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0204 	bic.w	r2, r2, #4
 80060a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69d9      	ldr	r1, [r3, #28]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	61da      	str	r2, [r3, #28]
      break;
 80060b4:	e023      	b.n	80060fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fa2d 	bl	800651c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69d9      	ldr	r1, [r3, #28]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	021a      	lsls	r2, r3, #8
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	61da      	str	r2, [r3, #28]
      break;
 80060f6:	e002      	b.n	80060fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
      break;
 80060fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006106:	7dfb      	ldrb	r3, [r7, #23]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a46      	ldr	r2, [pc, #280]	@ (800623c <TIM_Base_SetConfig+0x12c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612e:	d00f      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a43      	ldr	r2, [pc, #268]	@ (8006240 <TIM_Base_SetConfig+0x130>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00b      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a42      	ldr	r2, [pc, #264]	@ (8006244 <TIM_Base_SetConfig+0x134>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a41      	ldr	r2, [pc, #260]	@ (8006248 <TIM_Base_SetConfig+0x138>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a40      	ldr	r2, [pc, #256]	@ (800624c <TIM_Base_SetConfig+0x13c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d108      	bne.n	8006162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a35      	ldr	r2, [pc, #212]	@ (800623c <TIM_Base_SetConfig+0x12c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d02b      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006170:	d027      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a32      	ldr	r2, [pc, #200]	@ (8006240 <TIM_Base_SetConfig+0x130>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d023      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a31      	ldr	r2, [pc, #196]	@ (8006244 <TIM_Base_SetConfig+0x134>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01f      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a30      	ldr	r2, [pc, #192]	@ (8006248 <TIM_Base_SetConfig+0x138>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01b      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2f      	ldr	r2, [pc, #188]	@ (800624c <TIM_Base_SetConfig+0x13c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d017      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2e      	ldr	r2, [pc, #184]	@ (8006250 <TIM_Base_SetConfig+0x140>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2d      	ldr	r2, [pc, #180]	@ (8006254 <TIM_Base_SetConfig+0x144>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006258 <TIM_Base_SetConfig+0x148>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2b      	ldr	r2, [pc, #172]	@ (800625c <TIM_Base_SetConfig+0x14c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2a      	ldr	r2, [pc, #168]	@ (8006260 <TIM_Base_SetConfig+0x150>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a29      	ldr	r2, [pc, #164]	@ (8006264 <TIM_Base_SetConfig+0x154>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d108      	bne.n	80061d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a10      	ldr	r2, [pc, #64]	@ (800623c <TIM_Base_SetConfig+0x12c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0xf8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a12      	ldr	r2, [pc, #72]	@ (800624c <TIM_Base_SetConfig+0x13c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d103      	bne.n	8006210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b01      	cmp	r3, #1
 8006220:	d105      	bne.n	800622e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	611a      	str	r2, [r3, #16]
  }
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40010000 	.word	0x40010000
 8006240:	40000400 	.word	0x40000400
 8006244:	40000800 	.word	0x40000800
 8006248:	40000c00 	.word	0x40000c00
 800624c:	40010400 	.word	0x40010400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800
 800625c:	40001800 	.word	0x40001800
 8006260:	40001c00 	.word	0x40001c00
 8006264:	40002000 	.word	0x40002000

08006268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f023 0201 	bic.w	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 0302 	bic.w	r3, r3, #2
 80062b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a20      	ldr	r2, [pc, #128]	@ (8006340 <TIM_OC1_SetConfig+0xd8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d003      	beq.n	80062cc <TIM_OC1_SetConfig+0x64>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <TIM_OC1_SetConfig+0xdc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d10c      	bne.n	80062e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0308 	bic.w	r3, r3, #8
 80062d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 0304 	bic.w	r3, r3, #4
 80062e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a15      	ldr	r2, [pc, #84]	@ (8006340 <TIM_OC1_SetConfig+0xd8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_OC1_SetConfig+0x8e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a14      	ldr	r2, [pc, #80]	@ (8006344 <TIM_OC1_SetConfig+0xdc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d111      	bne.n	800631a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	40010000 	.word	0x40010000
 8006344:	40010400 	.word	0x40010400

08006348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f023 0210 	bic.w	r2, r3, #16
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800637e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0320 	bic.w	r3, r3, #32
 8006392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a22      	ldr	r2, [pc, #136]	@ (800642c <TIM_OC2_SetConfig+0xe4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_OC2_SetConfig+0x68>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a21      	ldr	r2, [pc, #132]	@ (8006430 <TIM_OC2_SetConfig+0xe8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10d      	bne.n	80063cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a17      	ldr	r2, [pc, #92]	@ (800642c <TIM_OC2_SetConfig+0xe4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC2_SetConfig+0x94>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a16      	ldr	r2, [pc, #88]	@ (8006430 <TIM_OC2_SetConfig+0xe8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d113      	bne.n	8006404 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40010400 	.word	0x40010400

08006434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800647c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a21      	ldr	r2, [pc, #132]	@ (8006514 <TIM_OC3_SetConfig+0xe0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d003      	beq.n	800649a <TIM_OC3_SetConfig+0x66>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a20      	ldr	r2, [pc, #128]	@ (8006518 <TIM_OC3_SetConfig+0xe4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d10d      	bne.n	80064b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a16      	ldr	r2, [pc, #88]	@ (8006514 <TIM_OC3_SetConfig+0xe0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_OC3_SetConfig+0x92>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a15      	ldr	r2, [pc, #84]	@ (8006518 <TIM_OC3_SetConfig+0xe4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d113      	bne.n	80064ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	621a      	str	r2, [r3, #32]
}
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	40010000 	.word	0x40010000
 8006518:	40010400 	.word	0x40010400

0800651c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	031b      	lsls	r3, r3, #12
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a12      	ldr	r2, [pc, #72]	@ (80065c0 <TIM_OC4_SetConfig+0xa4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_OC4_SetConfig+0x68>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a11      	ldr	r2, [pc, #68]	@ (80065c4 <TIM_OC4_SetConfig+0xa8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d109      	bne.n	8006598 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800658a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	019b      	lsls	r3, r3, #6
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40010400 	.word	0x40010400

080065c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2201      	movs	r2, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	401a      	ands	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e05a      	b.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a21      	ldr	r2, [pc, #132]	@ (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d022      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006678:	d01d      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1d      	ldr	r2, [pc, #116]	@ (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1b      	ldr	r2, [pc, #108]	@ (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1a      	ldr	r2, [pc, #104]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a18      	ldr	r2, [pc, #96]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a17      	ldr	r2, [pc, #92]	@ (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a15      	ldr	r2, [pc, #84]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10c      	bne.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40001800 	.word	0x40001800

0800670c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e042      	b.n	80067a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fc f81c 	bl	8002770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2224      	movs	r2, #36	@ 0x24
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800674e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fd0d 	bl	8007170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695a      	ldr	r2, [r3, #20]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e024      	b.n	8006808 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2224      	movs	r2, #36	@ 0x24
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067d4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fc f850 	bl	800287c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b20      	cmp	r3, #32
 8006828:	d112      	bne.n	8006850 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_UART_Receive_IT+0x26>
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e00b      	b.n	8006852 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	461a      	mov	r2, r3
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 faba 	bl	8006dc0 <UART_Start_Receive_IT>
 800684c:	4603      	mov	r3, r0
 800684e:	e000      	b.n	8006852 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
  }
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0ba      	sub	sp, #232	@ 0xe8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006882:	2300      	movs	r3, #0
 8006884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800689a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_UART_IRQHandler+0x66>
 80068ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fb99 	bl	8006ff2 <UART_Receive_IT>
      return;
 80068c0:	e25b      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80de 	beq.w	8006a88 <HAL_UART_IRQHandler+0x22c>
 80068cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80d1 	beq.w	8006a88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_UART_IRQHandler+0xae>
 80068f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	f043 0202 	orr.w	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_UART_IRQHandler+0xf6>
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d011      	beq.n	8006982 <HAL_UART_IRQHandler+0x126>
 800695e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800696a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697a:	f043 0208 	orr.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 81f2 	beq.w	8006d70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_UART_IRQHandler+0x14e>
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb24 	bl	8006ff2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b4:	2b40      	cmp	r3, #64	@ 0x40
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <HAL_UART_IRQHandler+0x17a>
 80069ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d04f      	beq.n	8006a76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa2c 	bl	8006e34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	d141      	bne.n	8006a6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3314      	adds	r3, #20
 8006a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1d9      	bne.n	80069ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d013      	beq.n	8006a66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	4a7e      	ldr	r2, [pc, #504]	@ (8006c3c <HAL_UART_IRQHandler+0x3e0>)
 8006a44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fc fc77 	bl	800333e <HAL_DMA_Abort_IT>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d016      	beq.n	8006a84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	e00e      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f994 	bl	8006d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	e00a      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f990 	bl	8006d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	e006      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f98c 	bl	8006d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a82:	e175      	b.n	8006d70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	bf00      	nop
    return;
 8006a86:	e173      	b.n	8006d70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	f040 814f 	bne.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 8148 	beq.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8141 	beq.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b40      	cmp	r3, #64	@ 0x40
 8006ad0:	f040 80b6 	bne.w	8006c40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8145 	beq.w	8006d74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006af2:	429a      	cmp	r2, r3
 8006af4:	f080 813e 	bcs.w	8006d74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006afe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b0a:	f000 8088 	beq.w	8006c1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1d9      	bne.n	8006b0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e1      	bne.n	8006b5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3314      	adds	r3, #20
 8006b9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3314      	adds	r3, #20
 8006bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e3      	bne.n	8006b96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e3      	bne.n	8006bdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fc fb20 	bl	800325e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8b7 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c3a:	e09b      	b.n	8006d74 <HAL_UART_IRQHandler+0x518>
 8006c3c:	08006efb 	.word	0x08006efb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 808e 	beq.w	8006d78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8089 	beq.w	8006d78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	623b      	str	r3, [r7, #32]
   return(result);
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e3      	bne.n	8006c9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0310 	bic.w	r3, r3, #16
 8006cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d08:	61fa      	str	r2, [r7, #28]
 8006d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	617b      	str	r3, [r7, #20]
   return(result);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e3      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f83d 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d2e:	e023      	b.n	8006d78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_UART_IRQHandler+0x4f4>
 8006d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f8ea 	bl	8006f22 <UART_Transmit_IT>
    return;
 8006d4e:	e014      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00e      	beq.n	8006d7a <HAL_UART_IRQHandler+0x51e>
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f92a 	bl	8006fc2 <UART_EndTransmit_IT>
    return;
 8006d6e:	e004      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006d70:	bf00      	nop
 8006d72:	e002      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d78:	bf00      	nop
  }
}
 8006d7a:	37e8      	adds	r7, #232	@ 0xe8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2222      	movs	r2, #34	@ 0x22
 8006dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0220 	orr.w	r2, r2, #32
 8006e24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b095      	sub	sp, #84	@ 0x54
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3314      	adds	r3, #20
 8006e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3314      	adds	r3, #20
 8006e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e5      	bne.n	8006e70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d119      	bne.n	8006ee0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f023 0310 	bic.w	r3, r3, #16
 8006ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ecc:	61ba      	str	r2, [r7, #24]
 8006ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006eee:	bf00      	nop
 8006ef0:	3754      	adds	r7, #84	@ 0x54
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff ff3d 	bl	8006d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b21      	cmp	r3, #33	@ 0x21
 8006f34:	d13e      	bne.n	8006fb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f3e:	d114      	bne.n	8006f6a <UART_Transmit_IT+0x48>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d110      	bne.n	8006f6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	1c9a      	adds	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]
 8006f68:	e008      	b.n	8006f7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6211      	str	r1, [r2, #32]
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fb4:	2302      	movs	r3, #2
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fecc 	bl	8006d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b08c      	sub	sp, #48	@ 0x30
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b22      	cmp	r3, #34	@ 0x22
 8007004:	f040 80ae 	bne.w	8007164 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007010:	d117      	bne.n	8007042 <UART_Receive_IT+0x50>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d113      	bne.n	8007042 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007030:	b29a      	uxth	r2, r3
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	1c9a      	adds	r2, r3, #2
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007040:	e026      	b.n	8007090 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007046:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007054:	d007      	beq.n	8007066 <UART_Receive_IT+0x74>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <UART_Receive_IT+0x82>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	e008      	b.n	8007086 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007080:	b2da      	uxtb	r2, r3
 8007082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007084:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29b      	uxth	r3, r3
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4619      	mov	r1, r3
 800709e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15d      	bne.n	8007160 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0220 	bic.w	r2, r2, #32
 80070b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695a      	ldr	r2, [r3, #20]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0201 	bic.w	r2, r2, #1
 80070d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d135      	bne.n	8007156 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f023 0310 	bic.w	r3, r3, #16
 8007106:	627b      	str	r3, [r7, #36]	@ 0x24
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007110:	623a      	str	r2, [r7, #32]
 8007112:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	69f9      	ldr	r1, [r7, #28]
 8007116:	6a3a      	ldr	r2, [r7, #32]
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	61bb      	str	r3, [r7, #24]
   return(result);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e5      	bne.n	80070f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b10      	cmp	r3, #16
 8007130:	d10a      	bne.n	8007148 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fe2a 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
 8007154:	e002      	b.n	800715c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fa fe96 	bl	8001e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	e002      	b.n	8007166 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e000      	b.n	8007166 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3730      	adds	r7, #48	@ 0x30
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007174:	b0c0      	sub	sp, #256	@ 0x100
 8007176:	af00      	add	r7, sp, #0
 8007178:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718c:	68d9      	ldr	r1, [r3, #12]
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	ea40 0301 	orr.w	r3, r0, r1
 8007198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071c8:	f021 010c 	bic.w	r1, r1, #12
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071d6:	430b      	orrs	r3, r1
 80071d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ea:	6999      	ldr	r1, [r3, #24]
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	ea40 0301 	orr.w	r3, r0, r1
 80071f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b8f      	ldr	r3, [pc, #572]	@ (800743c <UART_SetConfig+0x2cc>)
 8007200:	429a      	cmp	r2, r3
 8007202:	d005      	beq.n	8007210 <UART_SetConfig+0xa0>
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b8d      	ldr	r3, [pc, #564]	@ (8007440 <UART_SetConfig+0x2d0>)
 800720c:	429a      	cmp	r2, r3
 800720e:	d104      	bne.n	800721a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007210:	f7fe fb84 	bl	800591c <HAL_RCC_GetPCLK2Freq>
 8007214:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007218:	e003      	b.n	8007222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800721a:	f7fe fb6b 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 800721e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800722c:	f040 810c 	bne.w	8007448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007234:	2200      	movs	r2, #0
 8007236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800723a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800723e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	1891      	adds	r1, r2, r2
 8007248:	65b9      	str	r1, [r7, #88]	@ 0x58
 800724a:	415b      	adcs	r3, r3
 800724c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800724e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007252:	4621      	mov	r1, r4
 8007254:	eb12 0801 	adds.w	r8, r2, r1
 8007258:	4629      	mov	r1, r5
 800725a:	eb43 0901 	adc.w	r9, r3, r1
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800726a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800726e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007272:	4690      	mov	r8, r2
 8007274:	4699      	mov	r9, r3
 8007276:	4623      	mov	r3, r4
 8007278:	eb18 0303 	adds.w	r3, r8, r3
 800727c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007280:	462b      	mov	r3, r5
 8007282:	eb49 0303 	adc.w	r3, r9, r3
 8007286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007296:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800729a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800729e:	460b      	mov	r3, r1
 80072a0:	18db      	adds	r3, r3, r3
 80072a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80072a4:	4613      	mov	r3, r2
 80072a6:	eb42 0303 	adc.w	r3, r2, r3
 80072aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072b4:	f7f9 fc6c 	bl	8000b90 <__aeabi_uldivmod>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4b61      	ldr	r3, [pc, #388]	@ (8007444 <UART_SetConfig+0x2d4>)
 80072be:	fba3 2302 	umull	r2, r3, r3, r2
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	011c      	lsls	r4, r3, #4
 80072c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	1891      	adds	r1, r2, r2
 80072de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072e0:	415b      	adcs	r3, r3
 80072e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072e8:	4641      	mov	r1, r8
 80072ea:	eb12 0a01 	adds.w	sl, r2, r1
 80072ee:	4649      	mov	r1, r9
 80072f0:	eb43 0b01 	adc.w	fp, r3, r1
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007308:	4692      	mov	sl, r2
 800730a:	469b      	mov	fp, r3
 800730c:	4643      	mov	r3, r8
 800730e:	eb1a 0303 	adds.w	r3, sl, r3
 8007312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007316:	464b      	mov	r3, r9
 8007318:	eb4b 0303 	adc.w	r3, fp, r3
 800731c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800732c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007334:	460b      	mov	r3, r1
 8007336:	18db      	adds	r3, r3, r3
 8007338:	643b      	str	r3, [r7, #64]	@ 0x40
 800733a:	4613      	mov	r3, r2
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	647b      	str	r3, [r7, #68]	@ 0x44
 8007342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800734a:	f7f9 fc21 	bl	8000b90 <__aeabi_uldivmod>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4611      	mov	r1, r2
 8007354:	4b3b      	ldr	r3, [pc, #236]	@ (8007444 <UART_SetConfig+0x2d4>)
 8007356:	fba3 2301 	umull	r2, r3, r3, r1
 800735a:	095b      	lsrs	r3, r3, #5
 800735c:	2264      	movs	r2, #100	@ 0x64
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	1acb      	subs	r3, r1, r3
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800736a:	4b36      	ldr	r3, [pc, #216]	@ (8007444 <UART_SetConfig+0x2d4>)
 800736c:	fba3 2302 	umull	r2, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007378:	441c      	add	r4, r3
 800737a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800737e:	2200      	movs	r2, #0
 8007380:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007384:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800738c:	4642      	mov	r2, r8
 800738e:	464b      	mov	r3, r9
 8007390:	1891      	adds	r1, r2, r2
 8007392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007394:	415b      	adcs	r3, r3
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800739c:	4641      	mov	r1, r8
 800739e:	1851      	adds	r1, r2, r1
 80073a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80073a2:	4649      	mov	r1, r9
 80073a4:	414b      	adcs	r3, r1
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073b4:	4659      	mov	r1, fp
 80073b6:	00cb      	lsls	r3, r1, #3
 80073b8:	4651      	mov	r1, sl
 80073ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073be:	4651      	mov	r1, sl
 80073c0:	00ca      	lsls	r2, r1, #3
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	4642      	mov	r2, r8
 80073ca:	189b      	adds	r3, r3, r2
 80073cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073d0:	464b      	mov	r3, r9
 80073d2:	460a      	mov	r2, r1
 80073d4:	eb42 0303 	adc.w	r3, r2, r3
 80073d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073f0:	460b      	mov	r3, r1
 80073f2:	18db      	adds	r3, r3, r3
 80073f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f6:	4613      	mov	r3, r2
 80073f8:	eb42 0303 	adc.w	r3, r2, r3
 80073fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007406:	f7f9 fbc3 	bl	8000b90 <__aeabi_uldivmod>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <UART_SetConfig+0x2d4>)
 8007410:	fba3 1302 	umull	r1, r3, r3, r2
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	2164      	movs	r1, #100	@ 0x64
 8007418:	fb01 f303 	mul.w	r3, r1, r3
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	3332      	adds	r3, #50	@ 0x32
 8007422:	4a08      	ldr	r2, [pc, #32]	@ (8007444 <UART_SetConfig+0x2d4>)
 8007424:	fba2 2303 	umull	r2, r3, r2, r3
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	f003 0207 	and.w	r2, r3, #7
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4422      	add	r2, r4
 8007436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007438:	e106      	b.n	8007648 <UART_SetConfig+0x4d8>
 800743a:	bf00      	nop
 800743c:	40011000 	.word	0x40011000
 8007440:	40011400 	.word	0x40011400
 8007444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744c:	2200      	movs	r2, #0
 800744e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007452:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800745a:	4642      	mov	r2, r8
 800745c:	464b      	mov	r3, r9
 800745e:	1891      	adds	r1, r2, r2
 8007460:	6239      	str	r1, [r7, #32]
 8007462:	415b      	adcs	r3, r3
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24
 8007466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800746a:	4641      	mov	r1, r8
 800746c:	1854      	adds	r4, r2, r1
 800746e:	4649      	mov	r1, r9
 8007470:	eb43 0501 	adc.w	r5, r3, r1
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	00eb      	lsls	r3, r5, #3
 800747e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007482:	00e2      	lsls	r2, r4, #3
 8007484:	4614      	mov	r4, r2
 8007486:	461d      	mov	r5, r3
 8007488:	4643      	mov	r3, r8
 800748a:	18e3      	adds	r3, r4, r3
 800748c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007490:	464b      	mov	r3, r9
 8007492:	eb45 0303 	adc.w	r3, r5, r3
 8007496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074b6:	4629      	mov	r1, r5
 80074b8:	008b      	lsls	r3, r1, #2
 80074ba:	4621      	mov	r1, r4
 80074bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c0:	4621      	mov	r1, r4
 80074c2:	008a      	lsls	r2, r1, #2
 80074c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074c8:	f7f9 fb62 	bl	8000b90 <__aeabi_uldivmod>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4b60      	ldr	r3, [pc, #384]	@ (8007654 <UART_SetConfig+0x4e4>)
 80074d2:	fba3 2302 	umull	r2, r3, r3, r2
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	011c      	lsls	r4, r3, #4
 80074da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	1891      	adds	r1, r2, r2
 80074f2:	61b9      	str	r1, [r7, #24]
 80074f4:	415b      	adcs	r3, r3
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074fc:	4641      	mov	r1, r8
 80074fe:	1851      	adds	r1, r2, r1
 8007500:	6139      	str	r1, [r7, #16]
 8007502:	4649      	mov	r1, r9
 8007504:	414b      	adcs	r3, r1
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007514:	4659      	mov	r1, fp
 8007516:	00cb      	lsls	r3, r1, #3
 8007518:	4651      	mov	r1, sl
 800751a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751e:	4651      	mov	r1, sl
 8007520:	00ca      	lsls	r2, r1, #3
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	4603      	mov	r3, r0
 8007528:	4642      	mov	r2, r8
 800752a:	189b      	adds	r3, r3, r2
 800752c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007530:	464b      	mov	r3, r9
 8007532:	460a      	mov	r2, r1
 8007534:	eb42 0303 	adc.w	r3, r2, r3
 8007538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007546:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007554:	4649      	mov	r1, r9
 8007556:	008b      	lsls	r3, r1, #2
 8007558:	4641      	mov	r1, r8
 800755a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800755e:	4641      	mov	r1, r8
 8007560:	008a      	lsls	r2, r1, #2
 8007562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007566:	f7f9 fb13 	bl	8000b90 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b38      	ldr	r3, [pc, #224]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	@ 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	3332      	adds	r3, #50	@ 0x32
 8007584:	4a33      	ldr	r2, [pc, #204]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007590:	441c      	add	r4, r3
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007596:	2200      	movs	r2, #0
 8007598:	673b      	str	r3, [r7, #112]	@ 0x70
 800759a:	677a      	str	r2, [r7, #116]	@ 0x74
 800759c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	1891      	adds	r1, r2, r2
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	415b      	adcs	r3, r3
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075b0:	4641      	mov	r1, r8
 80075b2:	1851      	adds	r1, r2, r1
 80075b4:	6039      	str	r1, [r7, #0]
 80075b6:	4649      	mov	r1, r9
 80075b8:	414b      	adcs	r3, r1
 80075ba:	607b      	str	r3, [r7, #4]
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075c8:	4659      	mov	r1, fp
 80075ca:	00cb      	lsls	r3, r1, #3
 80075cc:	4651      	mov	r1, sl
 80075ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d2:	4651      	mov	r1, sl
 80075d4:	00ca      	lsls	r2, r1, #3
 80075d6:	4610      	mov	r0, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	4642      	mov	r2, r8
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075e2:	464b      	mov	r3, r9
 80075e4:	460a      	mov	r2, r1
 80075e6:	eb42 0303 	adc.w	r3, r2, r3
 80075ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007604:	4649      	mov	r1, r9
 8007606:	008b      	lsls	r3, r1, #2
 8007608:	4641      	mov	r1, r8
 800760a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800760e:	4641      	mov	r1, r8
 8007610:	008a      	lsls	r2, r1, #2
 8007612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007616:	f7f9 fabb 	bl	8000b90 <__aeabi_uldivmod>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007620:	fba3 1302 	umull	r1, r3, r3, r2
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	2164      	movs	r1, #100	@ 0x64
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	3332      	adds	r3, #50	@ 0x32
 8007632:	4a08      	ldr	r2, [pc, #32]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	f003 020f 	and.w	r2, r3, #15
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4422      	add	r2, r4
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800764e:	46bd      	mov	sp, r7
 8007650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007654:	51eb851f 	.word	0x51eb851f

08007658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007658:	b084      	sub	sp, #16
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	f107 001c 	add.w	r0, r7, #28
 8007666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800766a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800766e:	2b01      	cmp	r3, #1
 8007670:	d123      	bne.n	80076ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007676:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800769a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fae8 	bl	8008c84 <USB_CoreReset>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	e01b      	b.n	80076f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fadc 	bl	8008c84 <USB_CoreReset>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80076e4:	e005      	b.n	80076f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076f2:	7fbb      	ldrb	r3, [r7, #30]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d10b      	bne.n	8007710 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f043 0206 	orr.w	r2, r3, #6
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f043 0220 	orr.w	r2, r3, #32
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800771c:	b004      	add	sp, #16
 800771e:	4770      	bx	lr

08007720 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d165      	bne.n	8007800 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a41      	ldr	r2, [pc, #260]	@ (800783c <USB_SetTurnaroundTime+0x11c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d906      	bls.n	800774a <USB_SetTurnaroundTime+0x2a>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4a40      	ldr	r2, [pc, #256]	@ (8007840 <USB_SetTurnaroundTime+0x120>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d202      	bcs.n	800774a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007744:	230f      	movs	r3, #15
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e062      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4a3c      	ldr	r2, [pc, #240]	@ (8007840 <USB_SetTurnaroundTime+0x120>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d306      	bcc.n	8007760 <USB_SetTurnaroundTime+0x40>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4a3b      	ldr	r2, [pc, #236]	@ (8007844 <USB_SetTurnaroundTime+0x124>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d202      	bcs.n	8007760 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800775a:	230e      	movs	r3, #14
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e057      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4a38      	ldr	r2, [pc, #224]	@ (8007844 <USB_SetTurnaroundTime+0x124>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d306      	bcc.n	8007776 <USB_SetTurnaroundTime+0x56>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a37      	ldr	r2, [pc, #220]	@ (8007848 <USB_SetTurnaroundTime+0x128>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d202      	bcs.n	8007776 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007770:	230d      	movs	r3, #13
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e04c      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4a33      	ldr	r2, [pc, #204]	@ (8007848 <USB_SetTurnaroundTime+0x128>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d306      	bcc.n	800778c <USB_SetTurnaroundTime+0x6c>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a32      	ldr	r2, [pc, #200]	@ (800784c <USB_SetTurnaroundTime+0x12c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d802      	bhi.n	800778c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007786:	230c      	movs	r3, #12
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e041      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a2f      	ldr	r2, [pc, #188]	@ (800784c <USB_SetTurnaroundTime+0x12c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d906      	bls.n	80077a2 <USB_SetTurnaroundTime+0x82>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a2e      	ldr	r2, [pc, #184]	@ (8007850 <USB_SetTurnaroundTime+0x130>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d802      	bhi.n	80077a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800779c:	230b      	movs	r3, #11
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e036      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007850 <USB_SetTurnaroundTime+0x130>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d906      	bls.n	80077b8 <USB_SetTurnaroundTime+0x98>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a29      	ldr	r2, [pc, #164]	@ (8007854 <USB_SetTurnaroundTime+0x134>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d802      	bhi.n	80077b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80077b2:	230a      	movs	r3, #10
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e02b      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a26      	ldr	r2, [pc, #152]	@ (8007854 <USB_SetTurnaroundTime+0x134>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d906      	bls.n	80077ce <USB_SetTurnaroundTime+0xae>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a25      	ldr	r2, [pc, #148]	@ (8007858 <USB_SetTurnaroundTime+0x138>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d202      	bcs.n	80077ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077c8:	2309      	movs	r3, #9
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e020      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4a21      	ldr	r2, [pc, #132]	@ (8007858 <USB_SetTurnaroundTime+0x138>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d306      	bcc.n	80077e4 <USB_SetTurnaroundTime+0xc4>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	4a20      	ldr	r2, [pc, #128]	@ (800785c <USB_SetTurnaroundTime+0x13c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d802      	bhi.n	80077e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077de:	2308      	movs	r3, #8
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	e015      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4a1d      	ldr	r2, [pc, #116]	@ (800785c <USB_SetTurnaroundTime+0x13c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d906      	bls.n	80077fa <USB_SetTurnaroundTime+0xda>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007860 <USB_SetTurnaroundTime+0x140>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d202      	bcs.n	80077fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077f4:	2307      	movs	r3, #7
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e00a      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077fa:	2306      	movs	r3, #6
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e007      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007806:	2309      	movs	r3, #9
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	e001      	b.n	8007810 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800780c:	2309      	movs	r3, #9
 800780e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007828:	431a      	orrs	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	00d8acbf 	.word	0x00d8acbf
 8007840:	00e4e1c0 	.word	0x00e4e1c0
 8007844:	00f42400 	.word	0x00f42400
 8007848:	01067380 	.word	0x01067380
 800784c:	011a499f 	.word	0x011a499f
 8007850:	01312cff 	.word	0x01312cff
 8007854:	014ca43f 	.word	0x014ca43f
 8007858:	016e3600 	.word	0x016e3600
 800785c:	01a6ab1f 	.word	0x01a6ab1f
 8007860:	01e84800 	.word	0x01e84800

08007864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f043 0201 	orr.w	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d115      	bne.n	80078f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078d6:	200a      	movs	r0, #10
 80078d8:	f7fb f8f8 	bl	8002acc <HAL_Delay>
      ms += 10U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	330a      	adds	r3, #10
 80078e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f93f 	bl	8008b66 <USB_GetMode>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d01e      	beq.n	800792c <USB_SetCurrentMode+0x84>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80078f2:	d9f0      	bls.n	80078d6 <USB_SetCurrentMode+0x2e>
 80078f4:	e01a      	b.n	800792c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d115      	bne.n	8007928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007908:	200a      	movs	r0, #10
 800790a:	f7fb f8df 	bl	8002acc <HAL_Delay>
      ms += 10U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	330a      	adds	r3, #10
 8007912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 f926 	bl	8008b66 <USB_GetMode>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <USB_SetCurrentMode+0x84>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2bc7      	cmp	r3, #199	@ 0xc7
 8007924:	d9f0      	bls.n	8007908 <USB_SetCurrentMode+0x60>
 8007926:	e001      	b.n	800792c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e005      	b.n	8007938 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007930:	d101      	bne.n	8007936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007940:	b084      	sub	sp, #16
 8007942:	b580      	push	{r7, lr}
 8007944:	b086      	sub	sp, #24
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800794e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800795a:	2300      	movs	r3, #0
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	e009      	b.n	8007974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3340      	adds	r3, #64	@ 0x40
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	2200      	movs	r2, #0
 800796c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	3301      	adds	r3, #1
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b0e      	cmp	r3, #14
 8007978:	d9f2      	bls.n	8007960 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800797a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800797e:	2b00      	cmp	r3, #0
 8007980:	d11c      	bne.n	80079bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007990:	f043 0302 	orr.w	r3, r3, #2
 8007994:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80079ba:	e00b      	b.n	80079d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079da:	461a      	mov	r2, r3
 80079dc:	2300      	movs	r3, #0
 80079de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10d      	bne.n	8007a04 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f968 	bl	8007cc8 <USB_SetDevSpeed>
 80079f8:	e008      	b.n	8007a0c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079fa:	2101      	movs	r1, #1
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f963 	bl	8007cc8 <USB_SetDevSpeed>
 8007a02:	e003      	b.n	8007a0c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a04:	2103      	movs	r1, #3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f95e 	bl	8007cc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a0c:	2110      	movs	r1, #16
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8fa 	bl	8007c08 <USB_FlushTxFifo>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f924 	bl	8007c6c <USB_FlushRxFifo>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a34:	461a      	mov	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
 8007a56:	e043      	b.n	8007ae0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a6e:	d118      	bne.n	8007aa2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a82:	461a      	mov	r2, r3
 8007a84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	e013      	b.n	8007ab4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	e008      	b.n	8007ab4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3301      	adds	r3, #1
 8007ade:	613b      	str	r3, [r7, #16]
 8007ae0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d3b5      	bcc.n	8007a58 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	e043      	b.n	8007b7a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b08:	d118      	bne.n	8007b3c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	e013      	b.n	8007b4e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b32:	461a      	mov	r2, r3
 8007b34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e008      	b.n	8007b4e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	461a      	mov	r2, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	3301      	adds	r3, #1
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b7e:	461a      	mov	r2, r3
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d3b5      	bcc.n	8007af2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ba6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d105      	bne.n	8007bbc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f043 0210 	orr.w	r2, r3, #16
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <USB_DevInit+0x2c4>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bc8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f043 0208 	orr.w	r2, r3, #8
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bdc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d107      	bne.n	8007bf4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bec:	f043 0304 	orr.w	r3, r3, #4
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c00:	b004      	add	sp, #16
 8007c02:	4770      	bx	lr
 8007c04:	803c3800 	.word	0x803c3800

08007c08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c22:	d901      	bls.n	8007c28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e01b      	b.n	8007c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	daf2      	bge.n	8007c16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	019b      	lsls	r3, r3, #6
 8007c38:	f043 0220 	orr.w	r2, r3, #32
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c4c:	d901      	bls.n	8007c52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e006      	b.n	8007c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d0f0      	beq.n	8007c40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c84:	d901      	bls.n	8007c8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e018      	b.n	8007cbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	daf2      	bge.n	8007c78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2210      	movs	r2, #16
 8007c9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ca8:	d901      	bls.n	8007cae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e006      	b.n	8007cbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d0f0      	beq.n	8007c9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b087      	sub	sp, #28
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 0306 	and.w	r3, r3, #6
 8007d12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75fb      	strb	r3, [r7, #23]
 8007d1e:	e00a      	b.n	8007d36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d002      	beq.n	8007d2c <USB_GetDevSpeed+0x32>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b06      	cmp	r3, #6
 8007d2a:	d102      	bne.n	8007d32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	75fb      	strb	r3, [r7, #23]
 8007d30:	e001      	b.n	8007d36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d32:	230f      	movs	r3, #15
 8007d34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d13a      	bne.n	8007dd6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d66:	69da      	ldr	r2, [r3, #28]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	2101      	movs	r1, #1
 8007d72:	fa01 f303 	lsl.w	r3, r1, r3
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	68f9      	ldr	r1, [r7, #12]
 8007d7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d155      	bne.n	8007e44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	791b      	ldrb	r3, [r3, #4]
 8007db2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007db4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	059b      	lsls	r3, r3, #22
 8007dba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	e036      	b.n	8007e44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ddc:	69da      	ldr	r2, [r3, #28]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	2101      	movs	r1, #1
 8007de8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dec:	041b      	lsls	r3, r3, #16
 8007dee:	68f9      	ldr	r1, [r7, #12]
 8007df0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007df4:	4313      	orrs	r3, r2
 8007df6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d11a      	bne.n	8007e44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	791b      	ldrb	r3, [r3, #4]
 8007e28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d161      	bne.n	8007f34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e86:	d11f      	bne.n	8007ec8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ea2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ea6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ec2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	2101      	movs	r1, #1
 8007eda:	fa01 f303 	lsl.w	r3, r1, r3
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ee8:	4013      	ands	r3, r2
 8007eea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	2101      	movs	r1, #1
 8007efe:	fa01 f303 	lsl.w	r3, r1, r3
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	0159      	lsls	r1, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	440b      	add	r3, r1
 8007f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4b35      	ldr	r3, [pc, #212]	@ (8008004 <USB_DeactivateEndpoint+0x1b0>)
 8007f2e:	4013      	ands	r3, r2
 8007f30:	600b      	str	r3, [r1, #0]
 8007f32:	e060      	b.n	8007ff6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f4a:	d11f      	bne.n	8007f8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa2:	041b      	lsls	r3, r3, #16
 8007fa4:	43db      	mvns	r3, r3
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fac:	4013      	ands	r3, r2
 8007fae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb6:	69da      	ldr	r2, [r3, #28]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc6:	041b      	lsls	r3, r3, #16
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	68f9      	ldr	r1, [r7, #12]
 8007fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	0159      	lsls	r1, r3, #5
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	440b      	add	r3, r1
 8007fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <USB_DeactivateEndpoint+0x1b4>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	ec337800 	.word	0xec337800
 8008008:	eff37800 	.word	0xeff37800

0800800c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08a      	sub	sp, #40	@ 0x28
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	2b01      	cmp	r3, #1
 800802a:	f040 817f 	bne.w	800832c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d132      	bne.n	800809c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008050:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008054:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	440a      	add	r2, r1
 8008070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008074:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008078:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	0151      	lsls	r1, r2, #5
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	440a      	add	r2, r1
 8008090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008094:	0cdb      	lsrs	r3, r3, #19
 8008096:	04db      	lsls	r3, r3, #19
 8008098:	6113      	str	r3, [r2, #16]
 800809a:	e097      	b.n	80081cc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	0151      	lsls	r1, r2, #5
 80080ae:	69fa      	ldr	r2, [r7, #28]
 80080b0:	440a      	add	r2, r1
 80080b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080b6:	0cdb      	lsrs	r3, r3, #19
 80080b8:	04db      	lsls	r3, r3, #19
 80080ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d11a      	bne.n	800811c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	691a      	ldr	r2, [r3, #16]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d903      	bls.n	80080fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008114:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008118:	6113      	str	r3, [r2, #16]
 800811a:	e044      	b.n	80081a6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	4413      	add	r3, r2
 8008126:	1e5a      	subs	r2, r3, #1
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008130:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	8afb      	ldrh	r3, [r7, #22]
 8008142:	04d9      	lsls	r1, r3, #19
 8008144:	4ba4      	ldr	r3, [pc, #656]	@ (80083d8 <USB_EPStartXfer+0x3cc>)
 8008146:	400b      	ands	r3, r1
 8008148:	69b9      	ldr	r1, [r7, #24]
 800814a:	0148      	lsls	r0, r1, #5
 800814c:	69f9      	ldr	r1, [r7, #28]
 800814e:	4401      	add	r1, r0
 8008150:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008154:	4313      	orrs	r3, r2
 8008156:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	791b      	ldrb	r3, [r3, #4]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d122      	bne.n	80081a6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800817a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800817e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800818c:	691a      	ldr	r2, [r3, #16]
 800818e:	8afb      	ldrh	r3, [r7, #22]
 8008190:	075b      	lsls	r3, r3, #29
 8008192:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008196:	69b9      	ldr	r1, [r7, #24]
 8008198:	0148      	lsls	r0, r1, #5
 800819a:	69f9      	ldr	r1, [r7, #28]
 800819c:	4401      	add	r1, r0
 800819e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80081a2:	4313      	orrs	r3, r2
 80081a4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081bc:	69b9      	ldr	r1, [r7, #24]
 80081be:	0148      	lsls	r0, r1, #5
 80081c0:	69f9      	ldr	r1, [r7, #28]
 80081c2:	4401      	add	r1, r0
 80081c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80081c8:	4313      	orrs	r3, r2
 80081ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d14b      	bne.n	800826a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e6:	461a      	mov	r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	791b      	ldrb	r3, [r3, #4]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d128      	bne.n	8008248 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d110      	bne.n	8008228 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	440a      	add	r2, r1
 800821c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	e00f      	b.n	8008248 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	0151      	lsls	r1, r2, #5
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	440a      	add	r2, r1
 800823e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008246:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	440a      	add	r2, r1
 800825e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008262:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	e166      	b.n	8008538 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	0151      	lsls	r1, r2, #5
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	440a      	add	r2, r1
 8008280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008284:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008288:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d015      	beq.n	80082be <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 814e 	beq.w	8008538 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	2101      	movs	r1, #1
 80082ae:	fa01 f303 	lsl.w	r3, r1, r3
 80082b2:	69f9      	ldr	r1, [r7, #28]
 80082b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082b8:	4313      	orrs	r3, r2
 80082ba:	634b      	str	r3, [r1, #52]	@ 0x34
 80082bc:	e13c      	b.n	8008538 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d110      	bne.n	80082f0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	0151      	lsls	r1, r2, #5
 80082e0:	69fa      	ldr	r2, [r7, #28]
 80082e2:	440a      	add	r2, r1
 80082e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	e00f      	b.n	8008310 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	440a      	add	r2, r1
 8008306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800830e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	68d9      	ldr	r1, [r3, #12]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	781a      	ldrb	r2, [r3, #0]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	b298      	uxth	r0, r3
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4603      	mov	r3, r0
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f9b9 	bl	800869c <USB_WritePacket>
 800832a:	e105      	b.n	8008538 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008346:	0cdb      	lsrs	r3, r3, #19
 8008348:	04db      	lsls	r3, r3, #19
 800834a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008366:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800836a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800836e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d132      	bne.n	80083dc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	689a      	ldr	r2, [r3, #8]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083a4:	69b9      	ldr	r1, [r7, #24]
 80083a6:	0148      	lsls	r0, r1, #5
 80083a8:	69f9      	ldr	r1, [r7, #28]
 80083aa:	4401      	add	r1, r0
 80083ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083b0:	4313      	orrs	r3, r2
 80083b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	0151      	lsls	r1, r2, #5
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	440a      	add	r2, r1
 80083ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083d2:	6113      	str	r3, [r2, #16]
 80083d4:	e062      	b.n	800849c <USB_EPStartXfer+0x490>
 80083d6:	bf00      	nop
 80083d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d123      	bne.n	800842c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f0:	691a      	ldr	r2, [r3, #16]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083fa:	69b9      	ldr	r1, [r7, #24]
 80083fc:	0148      	lsls	r0, r1, #5
 80083fe:	69f9      	ldr	r1, [r7, #28]
 8008400:	4401      	add	r1, r0
 8008402:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008406:	4313      	orrs	r3, r2
 8008408:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	0151      	lsls	r1, r2, #5
 800841c:	69fa      	ldr	r2, [r7, #28]
 800841e:	440a      	add	r2, r1
 8008420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008424:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008428:	6113      	str	r3, [r2, #16]
 800842a:	e037      	b.n	800849c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	4413      	add	r3, r2
 8008436:	1e5a      	subs	r2, r3, #1
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008440:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	8afa      	ldrh	r2, [r7, #22]
 8008448:	fb03 f202 	mul.w	r2, r3, r2
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	691a      	ldr	r2, [r3, #16]
 800845e:	8afb      	ldrh	r3, [r7, #22]
 8008460:	04d9      	lsls	r1, r3, #19
 8008462:	4b38      	ldr	r3, [pc, #224]	@ (8008544 <USB_EPStartXfer+0x538>)
 8008464:	400b      	ands	r3, r1
 8008466:	69b9      	ldr	r1, [r7, #24]
 8008468:	0148      	lsls	r0, r1, #5
 800846a:	69f9      	ldr	r1, [r7, #28]
 800846c:	4401      	add	r1, r0
 800846e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008472:	4313      	orrs	r3, r2
 8008474:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800848c:	69b9      	ldr	r1, [r7, #24]
 800848e:	0148      	lsls	r0, r1, #5
 8008490:	69f9      	ldr	r1, [r7, #28]
 8008492:	4401      	add	r1, r0
 8008494:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008498:	4313      	orrs	r3, r2
 800849a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d10d      	bne.n	80084be <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	68d9      	ldr	r1, [r3, #12]
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	460a      	mov	r2, r1
 80084bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	791b      	ldrb	r3, [r3, #4]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d128      	bne.n	8008518 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d110      	bne.n	80084f8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	e00f      	b.n	8008518 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	440a      	add	r2, r1
 800850e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008516:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008532:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008536:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	1ff80000 	.word	0x1ff80000

08008548 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d14a      	bne.n	80085fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800857a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800857e:	f040 8086 	bne.w	800868e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	7812      	ldrb	r2, [r2, #0]
 80085ba:	0151      	lsls	r1, r2, #5
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	440a      	add	r2, r1
 80085c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d902      	bls.n	80085e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	75fb      	strb	r3, [r7, #23]
          break;
 80085de:	e056      	b.n	800868e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085f8:	d0e7      	beq.n	80085ca <USB_EPStopXfer+0x82>
 80085fa:	e048      	b.n	800868e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008614:	d13b      	bne.n	800868e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	7812      	ldrb	r2, [r2, #0]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008634:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008638:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	7812      	ldrb	r2, [r2, #0]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800865c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3301      	adds	r3, #1
 8008662:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f242 7210 	movw	r2, #10000	@ 0x2710
 800866a:	4293      	cmp	r3, r2
 800866c:	d902      	bls.n	8008674 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	75fb      	strb	r3, [r7, #23]
          break;
 8008672:	e00c      	b.n	800868e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800868c:	d0e7      	beq.n	800865e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008690:	4618      	mov	r0, r3
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	@ 0x24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4611      	mov	r1, r2
 80086a8:	461a      	mov	r2, r3
 80086aa:	460b      	mov	r3, r1
 80086ac:	71fb      	strb	r3, [r7, #7]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80086ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d123      	bne.n	800870a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80086c2:	88bb      	ldrh	r3, [r7, #4]
 80086c4:	3303      	adds	r3, #3
 80086c6:	089b      	lsrs	r3, r3, #2
 80086c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086ca:	2300      	movs	r3, #0
 80086cc:	61bb      	str	r3, [r7, #24]
 80086ce:	e018      	b.n	8008702 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	031a      	lsls	r2, r3, #12
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086dc:	461a      	mov	r2, r3
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	3301      	adds	r3, #1
 80086e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	3301      	adds	r3, #1
 80086ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	3301      	adds	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	3301      	adds	r3, #1
 80086fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	3301      	adds	r3, #1
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	429a      	cmp	r2, r3
 8008708:	d3e2      	bcc.n	80086d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3724      	adds	r7, #36	@ 0x24
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008718:	b480      	push	{r7}
 800871a:	b08b      	sub	sp, #44	@ 0x2c
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	089b      	lsrs	r3, r3, #2
 8008732:	b29b      	uxth	r3, r3
 8008734:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800873e:	2300      	movs	r3, #0
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	e014      	b.n	800876e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	3301      	adds	r3, #1
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	3301      	adds	r3, #1
 800875a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	3301      	adds	r3, #1
 8008760:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	3301      	adds	r3, #1
 8008766:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	3301      	adds	r3, #1
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	6a3a      	ldr	r2, [r7, #32]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	429a      	cmp	r2, r3
 8008774:	d3e6      	bcc.n	8008744 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008776:	8bfb      	ldrh	r3, [r7, #30]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01e      	beq.n	80087ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008786:	461a      	mov	r2, r3
 8008788:	f107 0310 	add.w	r3, r7, #16
 800878c:	6812      	ldr	r2, [r2, #0]
 800878e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	b2db      	uxtb	r3, r3
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	b2da      	uxtb	r2, r3
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	701a      	strb	r2, [r3, #0]
      i++;
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	3301      	adds	r3, #1
 80087a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087aa:	3301      	adds	r3, #1
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80087ae:	8bfb      	ldrh	r3, [r7, #30]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087b4:	8bfb      	ldrh	r3, [r7, #30]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1ea      	bne.n	8008790 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80087bc:	4618      	mov	r0, r3
 80087be:	372c      	adds	r7, #44	@ 0x2c
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d12c      	bne.n	800883e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	db12      	blt.n	800881c <USB_EPSetStall+0x54>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00f      	beq.n	800881c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4413      	add	r3, r2
 8008804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	440a      	add	r2, r1
 8008812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008816:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800881a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	440a      	add	r2, r1
 8008832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008836:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	e02b      	b.n	8008896 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	db12      	blt.n	8008876 <USB_EPSetStall+0xae>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00f      	beq.n	8008876 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008870:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008874:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	0151      	lsls	r1, r2, #5
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	440a      	add	r2, r1
 800888c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008894:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d128      	bne.n	8008912 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	0151      	lsls	r1, r2, #5
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	440a      	add	r2, r1
 80088d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	791b      	ldrb	r3, [r3, #4]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d003      	beq.n	80088f0 <USB_EPClearStall+0x4c>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	791b      	ldrb	r3, [r3, #4]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d138      	bne.n	8008962 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	0151      	lsls	r1, r2, #5
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	440a      	add	r2, r1
 8008906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800890a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	e027      	b.n	8008962 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	440a      	add	r2, r1
 8008928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800892c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008930:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	791b      	ldrb	r3, [r3, #4]
 8008936:	2b03      	cmp	r3, #3
 8008938:	d003      	beq.n	8008942 <USB_EPClearStall+0x9e>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	791b      	ldrb	r3, [r3, #4]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d10f      	bne.n	8008962 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	440a      	add	r2, r1
 8008958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800895c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008960:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800898e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008992:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80089a4:	68f9      	ldr	r1, [r7, #12]
 80089a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089aa:	4313      	orrs	r3, r2
 80089ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089d6:	f023 0303 	bic.w	r3, r3, #3
 80089da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089ea:	f023 0302 	bic.w	r3, r3, #2
 80089ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a18:	f023 0303 	bic.w	r3, r3, #3
 8008a1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a2c:	f043 0302 	orr.w	r3, r3, #2
 8008a30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4013      	ands	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a58:	68fb      	ldr	r3, [r7, #12]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	4013      	ands	r3, r2
 8008a88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	0c1b      	lsrs	r3, r3, #16
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	4013      	ands	r3, r2
 8008abc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	b29b      	uxth	r3, r3
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4013      	ands	r3, r2
 8008afa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008afc:	68bb      	ldr	r3, [r7, #8]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b087      	sub	sp, #28
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3a:	01db      	lsls	r3, r3, #7
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	4013      	ands	r3, r2
 8008b56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b58:	68bb      	ldr	r3, [r7, #8]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	f003 0301 	and.w	r3, r3, #1
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008ba0:	f023 0307 	bic.w	r3, r3, #7
 8008ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	333c      	adds	r3, #60	@ 0x3c
 8008bde:	3304      	adds	r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	4a26      	ldr	r2, [pc, #152]	@ (8008c80 <USB_EP0_OutStart+0xb8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d90a      	bls.n	8008c02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bfc:	d101      	bne.n	8008c02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e037      	b.n	8008c72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c30:	f043 0318 	orr.w	r3, r3, #24
 8008c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008c48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c4a:	7afb      	ldrb	r3, [r7, #11]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d10f      	bne.n	8008c70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c56:	461a      	mov	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c6a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008c6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	4f54300a 	.word	0x4f54300a

08008c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3301      	adds	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c9c:	d901      	bls.n	8008ca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e01b      	b.n	8008cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	daf2      	bge.n	8008c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f043 0201 	orr.w	r2, r3, #1
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cc6:	d901      	bls.n	8008ccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e006      	b.n	8008cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d0f0      	beq.n	8008cba <USB_CoreReset+0x36>

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <digitalWrite>:
 *  Created on: May 22, 2025
 *      Author: Knnn
 */
#include "Arduino.h"

void digitalWrite(char* _PIN , uint8_t vlue){
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	3b30      	subs	r3, #48	@ 0x30
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	0092      	lsls	r2, r2, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3303      	adds	r3, #3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4413      	add	r3, r2
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	3b30      	subs	r3, #48	@ 0x30
 8008d14:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b41      	cmp	r3, #65	@ 0x41
 8008d1e:	f040 809f 	bne.w	8008e60 <digitalWrite+0x178>
	        switch (PIN) {
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b0f      	cmp	r3, #15
 8008d26:	f200 833f 	bhi.w	80093a8 <digitalWrite+0x6c0>
 8008d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <digitalWrite+0x48>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d71 	.word	0x08008d71
 8008d34:	08008d7f 	.word	0x08008d7f
 8008d38:	08008d8d 	.word	0x08008d8d
 8008d3c:	08008d9b 	.word	0x08008d9b
 8008d40:	08008da9 	.word	0x08008da9
 8008d44:	08008db7 	.word	0x08008db7
 8008d48:	08008dc5 	.word	0x08008dc5
 8008d4c:	08008dd3 	.word	0x08008dd3
 8008d50:	08008de1 	.word	0x08008de1
 8008d54:	08008df1 	.word	0x08008df1
 8008d58:	08008e01 	.word	0x08008e01
 8008d5c:	08008e11 	.word	0x08008e11
 8008d60:	08008e21 	.word	0x08008e21
 8008d64:	08008e31 	.word	0x08008e31
 8008d68:	08008e41 	.word	0x08008e41
 8008d6c:	08008e51 	.word	0x08008e51
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	461a      	mov	r2, r3
 8008d74:	2101      	movs	r1, #1
 8008d76:	48bd      	ldr	r0, [pc, #756]	@ (800906c <digitalWrite+0x384>)
 8008d78:	f7fa fd9c 	bl	80038b4 <HAL_GPIO_WritePin>
 8008d7c:	e314      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	461a      	mov	r2, r3
 8008d82:	2102      	movs	r1, #2
 8008d84:	48b9      	ldr	r0, [pc, #740]	@ (800906c <digitalWrite+0x384>)
 8008d86:	f7fa fd95 	bl	80038b4 <HAL_GPIO_WritePin>
 8008d8a:	e30d      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	2104      	movs	r1, #4
 8008d92:	48b6      	ldr	r0, [pc, #728]	@ (800906c <digitalWrite+0x384>)
 8008d94:	f7fa fd8e 	bl	80038b4 <HAL_GPIO_WritePin>
 8008d98:	e306      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 8008d9a:	78fb      	ldrb	r3, [r7, #3]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2108      	movs	r1, #8
 8008da0:	48b2      	ldr	r0, [pc, #712]	@ (800906c <digitalWrite+0x384>)
 8008da2:	f7fa fd87 	bl	80038b4 <HAL_GPIO_WritePin>
 8008da6:	e2ff      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	461a      	mov	r2, r3
 8008dac:	2110      	movs	r1, #16
 8008dae:	48af      	ldr	r0, [pc, #700]	@ (800906c <digitalWrite+0x384>)
 8008db0:	f7fa fd80 	bl	80038b4 <HAL_GPIO_WritePin>
 8008db4:	e2f8      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	461a      	mov	r2, r3
 8008dba:	2120      	movs	r1, #32
 8008dbc:	48ab      	ldr	r0, [pc, #684]	@ (800906c <digitalWrite+0x384>)
 8008dbe:	f7fa fd79 	bl	80038b4 <HAL_GPIO_WritePin>
 8008dc2:	e2f1      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2140      	movs	r1, #64	@ 0x40
 8008dca:	48a8      	ldr	r0, [pc, #672]	@ (800906c <digitalWrite+0x384>)
 8008dcc:	f7fa fd72 	bl	80038b4 <HAL_GPIO_WritePin>
 8008dd0:	e2ea      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8008dd2:	78fb      	ldrb	r3, [r7, #3]
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	2180      	movs	r1, #128	@ 0x80
 8008dd8:	48a4      	ldr	r0, [pc, #656]	@ (800906c <digitalWrite+0x384>)
 8008dda:	f7fa fd6b 	bl	80038b4 <HAL_GPIO_WritePin>
 8008dde:	e2e3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008de8:	48a0      	ldr	r0, [pc, #640]	@ (800906c <digitalWrite+0x384>)
 8008dea:	f7fa fd63 	bl	80038b4 <HAL_GPIO_WritePin>
 8008dee:	e2db      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008df8:	489c      	ldr	r0, [pc, #624]	@ (800906c <digitalWrite+0x384>)
 8008dfa:	f7fa fd5b 	bl	80038b4 <HAL_GPIO_WritePin>
 8008dfe:	e2d3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008e08:	4898      	ldr	r0, [pc, #608]	@ (800906c <digitalWrite+0x384>)
 8008e0a:	f7fa fd53 	bl	80038b4 <HAL_GPIO_WritePin>
 8008e0e:	e2cb      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008e18:	4894      	ldr	r0, [pc, #592]	@ (800906c <digitalWrite+0x384>)
 8008e1a:	f7fa fd4b 	bl	80038b4 <HAL_GPIO_WritePin>
 8008e1e:	e2c3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008e28:	4890      	ldr	r0, [pc, #576]	@ (800906c <digitalWrite+0x384>)
 8008e2a:	f7fa fd43 	bl	80038b4 <HAL_GPIO_WritePin>
 8008e2e:	e2bb      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008e38:	488c      	ldr	r0, [pc, #560]	@ (800906c <digitalWrite+0x384>)
 8008e3a:	f7fa fd3b 	bl	80038b4 <HAL_GPIO_WritePin>
 8008e3e:	e2b3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	461a      	mov	r2, r3
 8008e44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008e48:	4888      	ldr	r0, [pc, #544]	@ (800906c <digitalWrite+0x384>)
 8008e4a:	f7fa fd33 	bl	80038b4 <HAL_GPIO_WritePin>
 8008e4e:	e2ab      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	461a      	mov	r2, r3
 8008e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e58:	4884      	ldr	r0, [pc, #528]	@ (800906c <digitalWrite+0x384>)
 8008e5a:	f7fa fd2b 	bl	80038b4 <HAL_GPIO_WritePin>
 8008e5e:	e2a3      	b.n	80093a8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3301      	adds	r3, #1
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	2b42      	cmp	r3, #66	@ 0x42
 8008e68:	f040 80a0 	bne.w	8008fac <digitalWrite+0x2c4>
	        switch (PIN) {
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	2b0f      	cmp	r3, #15
 8008e70:	f200 829a 	bhi.w	80093a8 <digitalWrite+0x6c0>
 8008e74:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <digitalWrite+0x194>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008ebd 	.word	0x08008ebd
 8008e80:	08008ecb 	.word	0x08008ecb
 8008e84:	08008ed9 	.word	0x08008ed9
 8008e88:	08008ee7 	.word	0x08008ee7
 8008e8c:	08008ef5 	.word	0x08008ef5
 8008e90:	08008f03 	.word	0x08008f03
 8008e94:	08008f11 	.word	0x08008f11
 8008e98:	08008f1f 	.word	0x08008f1f
 8008e9c:	08008f2d 	.word	0x08008f2d
 8008ea0:	08008f3d 	.word	0x08008f3d
 8008ea4:	08008f4d 	.word	0x08008f4d
 8008ea8:	08008f5d 	.word	0x08008f5d
 8008eac:	08008f6d 	.word	0x08008f6d
 8008eb0:	08008f7d 	.word	0x08008f7d
 8008eb4:	08008f8d 	.word	0x08008f8d
 8008eb8:	08008f9d 	.word	0x08008f9d
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	486b      	ldr	r0, [pc, #428]	@ (8009070 <digitalWrite+0x388>)
 8008ec4:	f7fa fcf6 	bl	80038b4 <HAL_GPIO_WritePin>
 8008ec8:	e26e      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 8008eca:	78fb      	ldrb	r3, [r7, #3]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2102      	movs	r1, #2
 8008ed0:	4867      	ldr	r0, [pc, #412]	@ (8009070 <digitalWrite+0x388>)
 8008ed2:	f7fa fcef 	bl	80038b4 <HAL_GPIO_WritePin>
 8008ed6:	e267      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 8008ed8:	78fb      	ldrb	r3, [r7, #3]
 8008eda:	461a      	mov	r2, r3
 8008edc:	2104      	movs	r1, #4
 8008ede:	4864      	ldr	r0, [pc, #400]	@ (8009070 <digitalWrite+0x388>)
 8008ee0:	f7fa fce8 	bl	80038b4 <HAL_GPIO_WritePin>
 8008ee4:	e260      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2108      	movs	r1, #8
 8008eec:	4860      	ldr	r0, [pc, #384]	@ (8009070 <digitalWrite+0x388>)
 8008eee:	f7fa fce1 	bl	80038b4 <HAL_GPIO_WritePin>
 8008ef2:	e259      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	2110      	movs	r1, #16
 8008efa:	485d      	ldr	r0, [pc, #372]	@ (8009070 <digitalWrite+0x388>)
 8008efc:	f7fa fcda 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f00:	e252      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	461a      	mov	r2, r3
 8008f06:	2120      	movs	r1, #32
 8008f08:	4859      	ldr	r0, [pc, #356]	@ (8009070 <digitalWrite+0x388>)
 8008f0a:	f7fa fcd3 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f0e:	e24b      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	461a      	mov	r2, r3
 8008f14:	2140      	movs	r1, #64	@ 0x40
 8008f16:	4856      	ldr	r0, [pc, #344]	@ (8009070 <digitalWrite+0x388>)
 8008f18:	f7fa fccc 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f1c:	e244      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	461a      	mov	r2, r3
 8008f22:	2180      	movs	r1, #128	@ 0x80
 8008f24:	4852      	ldr	r0, [pc, #328]	@ (8009070 <digitalWrite+0x388>)
 8008f26:	f7fa fcc5 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f2a:	e23d      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8008f2c:	78fb      	ldrb	r3, [r7, #3]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f34:	484e      	ldr	r0, [pc, #312]	@ (8009070 <digitalWrite+0x388>)
 8008f36:	f7fa fcbd 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f3a:	e235      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8008f3c:	78fb      	ldrb	r3, [r7, #3]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f44:	484a      	ldr	r0, [pc, #296]	@ (8009070 <digitalWrite+0x388>)
 8008f46:	f7fa fcb5 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f4a:	e22d      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008f54:	4846      	ldr	r0, [pc, #280]	@ (8009070 <digitalWrite+0x388>)
 8008f56:	f7fa fcad 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f5a:	e225      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008f64:	4842      	ldr	r0, [pc, #264]	@ (8009070 <digitalWrite+0x388>)
 8008f66:	f7fa fca5 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f6a:	e21d      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008f74:	483e      	ldr	r0, [pc, #248]	@ (8009070 <digitalWrite+0x388>)
 8008f76:	f7fa fc9d 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f7a:	e215      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008f84:	483a      	ldr	r0, [pc, #232]	@ (8009070 <digitalWrite+0x388>)
 8008f86:	f7fa fc95 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f8a:	e20d      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008f94:	4836      	ldr	r0, [pc, #216]	@ (8009070 <digitalWrite+0x388>)
 8008f96:	f7fa fc8d 	bl	80038b4 <HAL_GPIO_WritePin>
 8008f9a:	e205      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008fa4:	4832      	ldr	r0, [pc, #200]	@ (8009070 <digitalWrite+0x388>)
 8008fa6:	f7fa fc85 	bl	80038b4 <HAL_GPIO_WritePin>
 8008faa:	e1fd      	b.n	80093a8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b43      	cmp	r3, #67	@ 0x43
 8008fb4:	f040 80a7 	bne.w	8009106 <digitalWrite+0x41e>
	        switch (PIN) {
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	f200 81f4 	bhi.w	80093a8 <digitalWrite+0x6c0>
 8008fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <digitalWrite+0x2e0>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08009009 	.word	0x08009009
 8008fcc:	08009017 	.word	0x08009017
 8008fd0:	08009025 	.word	0x08009025
 8008fd4:	08009033 	.word	0x08009033
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	0800904f 	.word	0x0800904f
 8008fe0:	0800905d 	.word	0x0800905d
 8008fe4:	08009079 	.word	0x08009079
 8008fe8:	08009087 	.word	0x08009087
 8008fec:	08009097 	.word	0x08009097
 8008ff0:	080090a7 	.word	0x080090a7
 8008ff4:	080090b7 	.word	0x080090b7
 8008ff8:	080090c7 	.word	0x080090c7
 8008ffc:	080090d7 	.word	0x080090d7
 8009000:	080090e7 	.word	0x080090e7
 8009004:	080090f7 	.word	0x080090f7
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	461a      	mov	r2, r3
 800900c:	2101      	movs	r1, #1
 800900e:	4819      	ldr	r0, [pc, #100]	@ (8009074 <digitalWrite+0x38c>)
 8009010:	f7fa fc50 	bl	80038b4 <HAL_GPIO_WritePin>
 8009014:	e1c8      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	461a      	mov	r2, r3
 800901a:	2102      	movs	r1, #2
 800901c:	4815      	ldr	r0, [pc, #84]	@ (8009074 <digitalWrite+0x38c>)
 800901e:	f7fa fc49 	bl	80038b4 <HAL_GPIO_WritePin>
 8009022:	e1c1      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	461a      	mov	r2, r3
 8009028:	2104      	movs	r1, #4
 800902a:	4812      	ldr	r0, [pc, #72]	@ (8009074 <digitalWrite+0x38c>)
 800902c:	f7fa fc42 	bl	80038b4 <HAL_GPIO_WritePin>
 8009030:	e1ba      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	461a      	mov	r2, r3
 8009036:	2108      	movs	r1, #8
 8009038:	480e      	ldr	r0, [pc, #56]	@ (8009074 <digitalWrite+0x38c>)
 800903a:	f7fa fc3b 	bl	80038b4 <HAL_GPIO_WritePin>
 800903e:	e1b3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	461a      	mov	r2, r3
 8009044:	2110      	movs	r1, #16
 8009046:	480b      	ldr	r0, [pc, #44]	@ (8009074 <digitalWrite+0x38c>)
 8009048:	f7fa fc34 	bl	80038b4 <HAL_GPIO_WritePin>
 800904c:	e1ac      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	461a      	mov	r2, r3
 8009052:	2120      	movs	r1, #32
 8009054:	4807      	ldr	r0, [pc, #28]	@ (8009074 <digitalWrite+0x38c>)
 8009056:	f7fa fc2d 	bl	80038b4 <HAL_GPIO_WritePin>
 800905a:	e1a5      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	461a      	mov	r2, r3
 8009060:	2140      	movs	r1, #64	@ 0x40
 8009062:	4804      	ldr	r0, [pc, #16]	@ (8009074 <digitalWrite+0x38c>)
 8009064:	f7fa fc26 	bl	80038b4 <HAL_GPIO_WritePin>
 8009068:	e19e      	b.n	80093a8 <digitalWrite+0x6c0>
 800906a:	bf00      	nop
 800906c:	40020000 	.word	0x40020000
 8009070:	40020400 	.word	0x40020400
 8009074:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	461a      	mov	r2, r3
 800907c:	2180      	movs	r1, #128	@ 0x80
 800907e:	48bb      	ldr	r0, [pc, #748]	@ (800936c <digitalWrite+0x684>)
 8009080:	f7fa fc18 	bl	80038b4 <HAL_GPIO_WritePin>
 8009084:	e190      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 8009086:	78fb      	ldrb	r3, [r7, #3]
 8009088:	461a      	mov	r2, r3
 800908a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800908e:	48b7      	ldr	r0, [pc, #732]	@ (800936c <digitalWrite+0x684>)
 8009090:	f7fa fc10 	bl	80038b4 <HAL_GPIO_WritePin>
 8009094:	e188      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	461a      	mov	r2, r3
 800909a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800909e:	48b3      	ldr	r0, [pc, #716]	@ (800936c <digitalWrite+0x684>)
 80090a0:	f7fa fc08 	bl	80038b4 <HAL_GPIO_WritePin>
 80090a4:	e180      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	461a      	mov	r2, r3
 80090aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80090ae:	48af      	ldr	r0, [pc, #700]	@ (800936c <digitalWrite+0x684>)
 80090b0:	f7fa fc00 	bl	80038b4 <HAL_GPIO_WritePin>
 80090b4:	e178      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 80090b6:	78fb      	ldrb	r3, [r7, #3]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80090be:	48ab      	ldr	r0, [pc, #684]	@ (800936c <digitalWrite+0x684>)
 80090c0:	f7fa fbf8 	bl	80038b4 <HAL_GPIO_WritePin>
 80090c4:	e170      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 80090c6:	78fb      	ldrb	r3, [r7, #3]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80090ce:	48a7      	ldr	r0, [pc, #668]	@ (800936c <digitalWrite+0x684>)
 80090d0:	f7fa fbf0 	bl	80038b4 <HAL_GPIO_WritePin>
 80090d4:	e168      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	461a      	mov	r2, r3
 80090da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80090de:	48a3      	ldr	r0, [pc, #652]	@ (800936c <digitalWrite+0x684>)
 80090e0:	f7fa fbe8 	bl	80038b4 <HAL_GPIO_WritePin>
 80090e4:	e160      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	461a      	mov	r2, r3
 80090ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80090ee:	489f      	ldr	r0, [pc, #636]	@ (800936c <digitalWrite+0x684>)
 80090f0:	f7fa fbe0 	bl	80038b4 <HAL_GPIO_WritePin>
 80090f4:	e158      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	461a      	mov	r2, r3
 80090fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090fe:	489b      	ldr	r0, [pc, #620]	@ (800936c <digitalWrite+0x684>)
 8009100:	f7fa fbd8 	bl	80038b4 <HAL_GPIO_WritePin>
 8009104:	e150      	b.n	80093a8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	3301      	adds	r3, #1
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b44      	cmp	r3, #68	@ 0x44
 800910e:	f040 809f 	bne.w	8009250 <digitalWrite+0x568>
	        switch (PIN) {
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	2b0f      	cmp	r3, #15
 8009116:	f200 8147 	bhi.w	80093a8 <digitalWrite+0x6c0>
 800911a:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <digitalWrite+0x438>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009161 	.word	0x08009161
 8009124:	0800916f 	.word	0x0800916f
 8009128:	0800917d 	.word	0x0800917d
 800912c:	0800918b 	.word	0x0800918b
 8009130:	08009199 	.word	0x08009199
 8009134:	080091a7 	.word	0x080091a7
 8009138:	080091b5 	.word	0x080091b5
 800913c:	080091c3 	.word	0x080091c3
 8009140:	080091d1 	.word	0x080091d1
 8009144:	080091e1 	.word	0x080091e1
 8009148:	080091f1 	.word	0x080091f1
 800914c:	08009201 	.word	0x08009201
 8009150:	08009211 	.word	0x08009211
 8009154:	08009221 	.word	0x08009221
 8009158:	08009231 	.word	0x08009231
 800915c:	08009241 	.word	0x08009241
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	461a      	mov	r2, r3
 8009164:	2101      	movs	r1, #1
 8009166:	4882      	ldr	r0, [pc, #520]	@ (8009370 <digitalWrite+0x688>)
 8009168:	f7fa fba4 	bl	80038b4 <HAL_GPIO_WritePin>
 800916c:	e11c      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	461a      	mov	r2, r3
 8009172:	2102      	movs	r1, #2
 8009174:	487e      	ldr	r0, [pc, #504]	@ (8009370 <digitalWrite+0x688>)
 8009176:	f7fa fb9d 	bl	80038b4 <HAL_GPIO_WritePin>
 800917a:	e115      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	461a      	mov	r2, r3
 8009180:	2104      	movs	r1, #4
 8009182:	487b      	ldr	r0, [pc, #492]	@ (8009370 <digitalWrite+0x688>)
 8009184:	f7fa fb96 	bl	80038b4 <HAL_GPIO_WritePin>
 8009188:	e10e      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	461a      	mov	r2, r3
 800918e:	2108      	movs	r1, #8
 8009190:	4877      	ldr	r0, [pc, #476]	@ (8009370 <digitalWrite+0x688>)
 8009192:	f7fa fb8f 	bl	80038b4 <HAL_GPIO_WritePin>
 8009196:	e107      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	461a      	mov	r2, r3
 800919c:	2110      	movs	r1, #16
 800919e:	4874      	ldr	r0, [pc, #464]	@ (8009370 <digitalWrite+0x688>)
 80091a0:	f7fa fb88 	bl	80038b4 <HAL_GPIO_WritePin>
 80091a4:	e100      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	461a      	mov	r2, r3
 80091aa:	2120      	movs	r1, #32
 80091ac:	4870      	ldr	r0, [pc, #448]	@ (8009370 <digitalWrite+0x688>)
 80091ae:	f7fa fb81 	bl	80038b4 <HAL_GPIO_WritePin>
 80091b2:	e0f9      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	461a      	mov	r2, r3
 80091b8:	2140      	movs	r1, #64	@ 0x40
 80091ba:	486d      	ldr	r0, [pc, #436]	@ (8009370 <digitalWrite+0x688>)
 80091bc:	f7fa fb7a 	bl	80038b4 <HAL_GPIO_WritePin>
 80091c0:	e0f2      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	461a      	mov	r2, r3
 80091c6:	2180      	movs	r1, #128	@ 0x80
 80091c8:	4869      	ldr	r0, [pc, #420]	@ (8009370 <digitalWrite+0x688>)
 80091ca:	f7fa fb73 	bl	80038b4 <HAL_GPIO_WritePin>
 80091ce:	e0eb      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091d8:	4865      	ldr	r0, [pc, #404]	@ (8009370 <digitalWrite+0x688>)
 80091da:	f7fa fb6b 	bl	80038b4 <HAL_GPIO_WritePin>
 80091de:	e0e3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80091e8:	4861      	ldr	r0, [pc, #388]	@ (8009370 <digitalWrite+0x688>)
 80091ea:	f7fa fb63 	bl	80038b4 <HAL_GPIO_WritePin>
 80091ee:	e0db      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	461a      	mov	r2, r3
 80091f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80091f8:	485d      	ldr	r0, [pc, #372]	@ (8009370 <digitalWrite+0x688>)
 80091fa:	f7fa fb5b 	bl	80038b4 <HAL_GPIO_WritePin>
 80091fe:	e0d3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	461a      	mov	r2, r3
 8009204:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009208:	4859      	ldr	r0, [pc, #356]	@ (8009370 <digitalWrite+0x688>)
 800920a:	f7fa fb53 	bl	80038b4 <HAL_GPIO_WritePin>
 800920e:	e0cb      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	461a      	mov	r2, r3
 8009214:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009218:	4855      	ldr	r0, [pc, #340]	@ (8009370 <digitalWrite+0x688>)
 800921a:	f7fa fb4b 	bl	80038b4 <HAL_GPIO_WritePin>
 800921e:	e0c3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	461a      	mov	r2, r3
 8009224:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009228:	4851      	ldr	r0, [pc, #324]	@ (8009370 <digitalWrite+0x688>)
 800922a:	f7fa fb43 	bl	80038b4 <HAL_GPIO_WritePin>
 800922e:	e0bb      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	461a      	mov	r2, r3
 8009234:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009238:	484d      	ldr	r0, [pc, #308]	@ (8009370 <digitalWrite+0x688>)
 800923a:	f7fa fb3b 	bl	80038b4 <HAL_GPIO_WritePin>
 800923e:	e0b3      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	461a      	mov	r2, r3
 8009244:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009248:	4849      	ldr	r0, [pc, #292]	@ (8009370 <digitalWrite+0x688>)
 800924a:	f7fa fb33 	bl	80038b4 <HAL_GPIO_WritePin>
 800924e:	e0ab      	b.n	80093a8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3301      	adds	r3, #1
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b45      	cmp	r3, #69	@ 0x45
 8009258:	f040 80a6 	bne.w	80093a8 <digitalWrite+0x6c0>
	        switch (PIN) {
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2b0f      	cmp	r3, #15
 8009260:	f200 80a2 	bhi.w	80093a8 <digitalWrite+0x6c0>
 8009264:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <digitalWrite+0x584>)
 8009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926a:	bf00      	nop
 800926c:	080092ad 	.word	0x080092ad
 8009270:	080092bb 	.word	0x080092bb
 8009274:	080092c9 	.word	0x080092c9
 8009278:	080092d7 	.word	0x080092d7
 800927c:	080092e5 	.word	0x080092e5
 8009280:	080092f3 	.word	0x080092f3
 8009284:	08009301 	.word	0x08009301
 8009288:	0800930f 	.word	0x0800930f
 800928c:	0800931d 	.word	0x0800931d
 8009290:	0800932d 	.word	0x0800932d
 8009294:	0800933d 	.word	0x0800933d
 8009298:	0800934d 	.word	0x0800934d
 800929c:	0800935d 	.word	0x0800935d
 80092a0:	08009379 	.word	0x08009379
 80092a4:	08009389 	.word	0x08009389
 80092a8:	08009399 	.word	0x08009399
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	461a      	mov	r2, r3
 80092b0:	2101      	movs	r1, #1
 80092b2:	4830      	ldr	r0, [pc, #192]	@ (8009374 <digitalWrite+0x68c>)
 80092b4:	f7fa fafe 	bl	80038b4 <HAL_GPIO_WritePin>
 80092b8:	e076      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	461a      	mov	r2, r3
 80092be:	2102      	movs	r1, #2
 80092c0:	482c      	ldr	r0, [pc, #176]	@ (8009374 <digitalWrite+0x68c>)
 80092c2:	f7fa faf7 	bl	80038b4 <HAL_GPIO_WritePin>
 80092c6:	e06f      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	461a      	mov	r2, r3
 80092cc:	2104      	movs	r1, #4
 80092ce:	4829      	ldr	r0, [pc, #164]	@ (8009374 <digitalWrite+0x68c>)
 80092d0:	f7fa faf0 	bl	80038b4 <HAL_GPIO_WritePin>
 80092d4:	e068      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 80092d6:	78fb      	ldrb	r3, [r7, #3]
 80092d8:	461a      	mov	r2, r3
 80092da:	2108      	movs	r1, #8
 80092dc:	4825      	ldr	r0, [pc, #148]	@ (8009374 <digitalWrite+0x68c>)
 80092de:	f7fa fae9 	bl	80038b4 <HAL_GPIO_WritePin>
 80092e2:	e061      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	461a      	mov	r2, r3
 80092e8:	2110      	movs	r1, #16
 80092ea:	4822      	ldr	r0, [pc, #136]	@ (8009374 <digitalWrite+0x68c>)
 80092ec:	f7fa fae2 	bl	80038b4 <HAL_GPIO_WritePin>
 80092f0:	e05a      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	461a      	mov	r2, r3
 80092f6:	2120      	movs	r1, #32
 80092f8:	481e      	ldr	r0, [pc, #120]	@ (8009374 <digitalWrite+0x68c>)
 80092fa:	f7fa fadb 	bl	80038b4 <HAL_GPIO_WritePin>
 80092fe:	e053      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	461a      	mov	r2, r3
 8009304:	2140      	movs	r1, #64	@ 0x40
 8009306:	481b      	ldr	r0, [pc, #108]	@ (8009374 <digitalWrite+0x68c>)
 8009308:	f7fa fad4 	bl	80038b4 <HAL_GPIO_WritePin>
 800930c:	e04c      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	461a      	mov	r2, r3
 8009312:	2180      	movs	r1, #128	@ 0x80
 8009314:	4817      	ldr	r0, [pc, #92]	@ (8009374 <digitalWrite+0x68c>)
 8009316:	f7fa facd 	bl	80038b4 <HAL_GPIO_WritePin>
 800931a:	e045      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	461a      	mov	r2, r3
 8009320:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009324:	4813      	ldr	r0, [pc, #76]	@ (8009374 <digitalWrite+0x68c>)
 8009326:	f7fa fac5 	bl	80038b4 <HAL_GPIO_WritePin>
 800932a:	e03d      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	461a      	mov	r2, r3
 8009330:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009334:	480f      	ldr	r0, [pc, #60]	@ (8009374 <digitalWrite+0x68c>)
 8009336:	f7fa fabd 	bl	80038b4 <HAL_GPIO_WritePin>
 800933a:	e035      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	461a      	mov	r2, r3
 8009340:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009344:	480b      	ldr	r0, [pc, #44]	@ (8009374 <digitalWrite+0x68c>)
 8009346:	f7fa fab5 	bl	80038b4 <HAL_GPIO_WritePin>
 800934a:	e02d      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	461a      	mov	r2, r3
 8009350:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009354:	4807      	ldr	r0, [pc, #28]	@ (8009374 <digitalWrite+0x68c>)
 8009356:	f7fa faad 	bl	80038b4 <HAL_GPIO_WritePin>
 800935a:	e025      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	461a      	mov	r2, r3
 8009360:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009364:	4803      	ldr	r0, [pc, #12]	@ (8009374 <digitalWrite+0x68c>)
 8009366:	f7fa faa5 	bl	80038b4 <HAL_GPIO_WritePin>
 800936a:	e01d      	b.n	80093a8 <digitalWrite+0x6c0>
 800936c:	40020800 	.word	0x40020800
 8009370:	40020c00 	.word	0x40020c00
 8009374:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	461a      	mov	r2, r3
 800937c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009380:	480b      	ldr	r0, [pc, #44]	@ (80093b0 <digitalWrite+0x6c8>)
 8009382:	f7fa fa97 	bl	80038b4 <HAL_GPIO_WritePin>
 8009386:	e00f      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	461a      	mov	r2, r3
 800938c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009390:	4807      	ldr	r0, [pc, #28]	@ (80093b0 <digitalWrite+0x6c8>)
 8009392:	f7fa fa8f 	bl	80038b4 <HAL_GPIO_WritePin>
 8009396:	e007      	b.n	80093a8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	461a      	mov	r2, r3
 800939c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80093a0:	4803      	ldr	r0, [pc, #12]	@ (80093b0 <digitalWrite+0x6c8>)
 80093a2:	f7fa fa87 	bl	80038b4 <HAL_GPIO_WritePin>
 80093a6:	bf00      	nop
	        }
	    }
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	40021000 	.word	0x40021000

080093b4 <map>:
		}
	}
	return value;
}

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80093be:	edc7 0a04 	vstr	s1, [r7, #16]
 80093c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80093c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80093ca:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 80093ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80093d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80093d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093da:	edd7 6a05 	vldr	s13, [r7, #20]
 80093de:	edd7 7a04 	vldr	s15, [r7, #16]
 80093e2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80093e6:	edd7 6a03 	vldr	s13, [r7, #12]
 80093ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80093ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80093f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80093f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80093fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009402:	eeb0 0a67 	vmov.f32	s0, s15
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 800941c:	4a0f      	ldr	r2, [pc, #60]	@ (800945c <Motor_setup_LF+0x4c>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8009422:	4a0f      	ldr	r2, [pc, #60]	@ (8009460 <Motor_setup_LF+0x50>)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8009428:	4b0c      	ldr	r3, [pc, #48]	@ (800945c <Motor_setup_LF+0x4c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f7fc fbb0 	bl	8005b94 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8009434:	4b0a      	ldr	r3, [pc, #40]	@ (8009460 <Motor_setup_LF+0x50>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	213c      	movs	r1, #60	@ 0x3c
 800943a:	4618      	mov	r0, r3
 800943c:	f7fc fd18 	bl	8005e70 <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8009440:	4a08      	ldr	r2, [pc, #32]	@ (8009464 <Motor_setup_LF+0x54>)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8009446:	4b05      	ldr	r3, [pc, #20]	@ (800945c <Motor_setup_LF+0x4c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	b21a      	sxth	r2, r3
 800944e:	4b06      	ldr	r3, [pc, #24]	@ (8009468 <Motor_setup_LF+0x58>)
 8009450:	801a      	strh	r2, [r3, #0]

}
 8009452:	bf00      	nop
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	200006a4 	.word	0x200006a4
 8009460:	2000068c 	.word	0x2000068c
 8009464:	20000704 	.word	0x20000704
 8009468:	200006f8 	.word	0x200006f8

0800946c <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8009478:	4a0f      	ldr	r2, [pc, #60]	@ (80094b8 <Motor_setup_LB+0x4c>)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 800947e:	4a0f      	ldr	r2, [pc, #60]	@ (80094bc <Motor_setup_LB+0x50>)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8009484:	4b0c      	ldr	r3, [pc, #48]	@ (80094b8 <Motor_setup_LB+0x4c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f7fc fb82 	bl	8005b94 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <Motor_setup_LB+0x50>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	213c      	movs	r1, #60	@ 0x3c
 8009496:	4618      	mov	r0, r3
 8009498:	f7fc fcea 	bl	8005e70 <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 800949c:	4a08      	ldr	r2, [pc, #32]	@ (80094c0 <Motor_setup_LB+0x54>)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 80094a2:	4b05      	ldr	r3, [pc, #20]	@ (80094b8 <Motor_setup_LB+0x4c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	b21a      	sxth	r2, r3
 80094aa:	4b06      	ldr	r3, [pc, #24]	@ (80094c4 <Motor_setup_LB+0x58>)
 80094ac:	801a      	strh	r2, [r3, #0]

}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200006a8 	.word	0x200006a8
 80094bc:	20000690 	.word	0x20000690
 80094c0:	20000708 	.word	0x20000708
 80094c4:	200006fa 	.word	0x200006fa

080094c8 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80094d4:	4a0f      	ldr	r2, [pc, #60]	@ (8009514 <Motor_setup_RF+0x4c>)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80094da:	4a0f      	ldr	r2, [pc, #60]	@ (8009518 <Motor_setup_RF+0x50>)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80094e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009514 <Motor_setup_RF+0x4c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fc fb54 	bl	8005b94 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80094ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <Motor_setup_RF+0x50>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	213c      	movs	r1, #60	@ 0x3c
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fc fcbc 	bl	8005e70 <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80094f8:	4a08      	ldr	r2, [pc, #32]	@ (800951c <Motor_setup_RF+0x54>)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80094fe:	4b05      	ldr	r3, [pc, #20]	@ (8009514 <Motor_setup_RF+0x4c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	b21a      	sxth	r2, r3
 8009506:	4b06      	ldr	r3, [pc, #24]	@ (8009520 <Motor_setup_RF+0x58>)
 8009508:	801a      	strh	r2, [r3, #0]

}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	200006ac 	.word	0x200006ac
 8009518:	20000694 	.word	0x20000694
 800951c:	2000070c 	.word	0x2000070c
 8009520:	200006fc 	.word	0x200006fc

08009524 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8009530:	4a0f      	ldr	r2, [pc, #60]	@ (8009570 <Motor_setup_RB+0x4c>)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8009536:	4a0f      	ldr	r2, [pc, #60]	@ (8009574 <Motor_setup_RB+0x50>)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 800953c:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <Motor_setup_RB+0x4c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2104      	movs	r1, #4
 8009542:	4618      	mov	r0, r3
 8009544:	f7fc fb26 	bl	8005b94 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8009548:	4b0a      	ldr	r3, [pc, #40]	@ (8009574 <Motor_setup_RB+0x50>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	213c      	movs	r1, #60	@ 0x3c
 800954e:	4618      	mov	r0, r3
 8009550:	f7fc fc8e 	bl	8005e70 <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8009554:	4a08      	ldr	r2, [pc, #32]	@ (8009578 <Motor_setup_RB+0x54>)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800955a:	4b05      	ldr	r3, [pc, #20]	@ (8009570 <Motor_setup_RB+0x4c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	b21a      	sxth	r2, r3
 8009562:	4b06      	ldr	r3, [pc, #24]	@ (800957c <Motor_setup_RB+0x58>)
 8009564:	801a      	strh	r2, [r3, #0]

}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200006b0 	.word	0x200006b0
 8009574:	20000698 	.word	0x20000698
 8009578:	20000710 	.word	0x20000710
 800957c:	200006fe 	.word	0x200006fe

08009580 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 800958c:	4a0f      	ldr	r2, [pc, #60]	@ (80095cc <Motor_setup_EXTRA1+0x4c>)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8009592:	4a0f      	ldr	r2, [pc, #60]	@ (80095d0 <Motor_setup_EXTRA1+0x50>)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8009598:	4b0c      	ldr	r3, [pc, #48]	@ (80095cc <Motor_setup_EXTRA1+0x4c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fc faf8 	bl	8005b94 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 80095a4:	4b0a      	ldr	r3, [pc, #40]	@ (80095d0 <Motor_setup_EXTRA1+0x50>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	213c      	movs	r1, #60	@ 0x3c
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fc fc60 	bl	8005e70 <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 80095b0:	4a08      	ldr	r2, [pc, #32]	@ (80095d4 <Motor_setup_EXTRA1+0x54>)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 80095b6:	4b05      	ldr	r3, [pc, #20]	@ (80095cc <Motor_setup_EXTRA1+0x4c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	b21a      	sxth	r2, r3
 80095be:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <Motor_setup_EXTRA1+0x58>)
 80095c0:	801a      	strh	r2, [r3, #0]

}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	200006b4 	.word	0x200006b4
 80095d0:	2000069c 	.word	0x2000069c
 80095d4:	20000714 	.word	0x20000714
 80095d8:	20000700 	.word	0x20000700

080095dc <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80095e8:	4a0f      	ldr	r2, [pc, #60]	@ (8009628 <Motor_setup_EXTRA2+0x4c>)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80095ee:	4a0f      	ldr	r2, [pc, #60]	@ (800962c <Motor_setup_EXTRA2+0x50>)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80095f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009628 <Motor_setup_EXTRA2+0x4c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fc faca 	bl	8005b94 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 8009600:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <Motor_setup_EXTRA2+0x50>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	213c      	movs	r1, #60	@ 0x3c
 8009606:	4618      	mov	r0, r3
 8009608:	f7fc fc32 	bl	8005e70 <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 800960c:	4a08      	ldr	r2, [pc, #32]	@ (8009630 <Motor_setup_EXTRA2+0x54>)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 8009612:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <Motor_setup_EXTRA2+0x4c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	b21a      	sxth	r2, r3
 800961a:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <Motor_setup_EXTRA2+0x58>)
 800961c:	801a      	strh	r2, [r3, #0]

}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	200006b8 	.word	0x200006b8
 800962c:	200006a0 	.word	0x200006a0
 8009630:	20000718 	.word	0x20000718
 8009634:	20000702 	.word	0x20000702

08009638 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////RPM///////////////////////////////////////////////////////////////

int32_t getCount(TIM_HandleTypeDef *TIM ,motor_Wheel _Wheel){
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
	Motor_feedback._Count[_Wheel] = ((int32_t)(TIM->Instance->CNT));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	b211      	sxth	r1, r2
 800964e:	4a06      	ldr	r2, [pc, #24]	@ (8009668 <getCount+0x30>)
 8009650:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return Motor_feedback._Count[_Wheel];
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	4a04      	ldr	r2, [pc, #16]	@ (8009668 <getCount+0x30>)
 8009658:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 800965c:	4618      	mov	r0, r3
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	200006bc 	.word	0x200006bc

0800966c <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	80fb      	strh	r3, [r7, #6]
	_Setup._freq = freq;
 8009676:	4a04      	ldr	r2, [pc, #16]	@ (8009688 <Setup_frequency_Motor+0x1c>)
 8009678:	88fb      	ldrh	r3, [r7, #6]
 800967a:	8013      	strh	r3, [r2, #0]
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	20000010 	.word	0x20000010

0800968c <Setup_CPR>:

void Setup_CPR(uint16_t _CPR){
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	80fb      	strh	r3, [r7, #6]
	_Setup.CPR = _CPR;
 8009696:	4a04      	ldr	r2, [pc, #16]	@ (80096a8 <Setup_CPR+0x1c>)
 8009698:	88fb      	ldrh	r3, [r7, #6]
 800969a:	8053      	strh	r3, [r2, #2]
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	20000010 	.word	0x20000010

080096ac <Setup_Gear_Ratio>:

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	80fb      	strh	r3, [r7, #6]
	_Setup.Gear_Ratio = _Gear_Ratio;
 80096b6:	4a04      	ldr	r2, [pc, #16]	@ (80096c8 <Setup_Gear_Ratio+0x1c>)
 80096b8:	88fb      	ldrh	r3, [r7, #6]
 80096ba:	8093      	strh	r3, [r2, #4]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20000010 	.word	0x20000010

080096cc <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 80096d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80096da:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80096fc <getRad_s_to_RPM+0x30>
 80096de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096e2:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	ee07 3a90 	vmov	s15, r3
}
 80096ec:	eeb0 0a67 	vmov.f32	s0, s15
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	4118c9ec 	.word	0x4118c9ec

08009700 <getRPM_TIM_Wheel>:


int16_t Present_Count[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
int16_t Past_Count[6] = {0 ,0 ,0 ,0 ,0 ,0};    //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,motor_Wheel _Wheel){
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
	if(_Wheel == 1){
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d10e      	bne.n	8009730 <getRPM_TIM_Wheel+0x30>
		Present_Count[_Wheel] = (int16_t)-getCount(TIM ,_Wheel);
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff ff8e 	bl	8009638 <getCount>
 800971c:	4603      	mov	r3, r0
 800971e:	b29b      	uxth	r3, r3
 8009720:	425b      	negs	r3, r3
 8009722:	b29a      	uxth	r2, r3
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	b211      	sxth	r1, r2
 8009728:	4a33      	ldr	r2, [pc, #204]	@ (80097f8 <getRPM_TIM_Wheel+0xf8>)
 800972a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800972e:	e00a      	b.n	8009746 <getRPM_TIM_Wheel+0x46>
	}else{
		Present_Count[_Wheel] = (int16_t)getCount(TIM ,_Wheel);
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ff7f 	bl	8009638 <getCount>
 800973a:	4602      	mov	r2, r0
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	b211      	sxth	r1, r2
 8009740:	4a2d      	ldr	r2, [pc, #180]	@ (80097f8 <getRPM_TIM_Wheel+0xf8>)
 8009742:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// V = count/t = count*freq
	Motor_feedback._RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _Setup._freq);
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	4a2b      	ldr	r2, [pc, #172]	@ (80097f8 <getRPM_TIM_Wheel+0xf8>)
 800974a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800974e:	b29a      	uxth	r2, r3
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	492a      	ldr	r1, [pc, #168]	@ (80097fc <getRPM_TIM_Wheel+0xfc>)
 8009754:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8009758:	b29b      	uxth	r3, r3
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	b29b      	uxth	r3, r3
 800975e:	b21b      	sxth	r3, r3
 8009760:	461a      	mov	r2, r3
 8009762:	4b27      	ldr	r3, [pc, #156]	@ (8009800 <getRPM_TIM_Wheel+0x100>)
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	fb03 f202 	mul.w	r2, r3, r2
 800976a:	78fb      	ldrb	r3, [r7, #3]
 800976c:	ee07 2a90 	vmov	s15, r2
 8009770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009774:	4a23      	ldr	r2, [pc, #140]	@ (8009804 <getRPM_TIM_Wheel+0x104>)
 8009776:	3302      	adds	r3, #2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	3304      	adds	r3, #4
 800977e:	edc3 7a00 	vstr	s15, [r3]
	Motor_feedback._RPM[_Wheel] = (float)(((Motor_feedback._RPM[_Wheel]* 60.0f)/_Setup.CPR )/_Setup.Gear_Ratio);
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	4a1f      	ldr	r2, [pc, #124]	@ (8009804 <getRPM_TIM_Wheel+0x104>)
 8009786:	3302      	adds	r3, #2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	3304      	adds	r3, #4
 800978e:	edd3 7a00 	vldr	s15, [r3]
 8009792:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009808 <getRPM_TIM_Wheel+0x108>
 8009796:	ee27 7a87 	vmul.f32	s14, s15, s14
 800979a:	4b19      	ldr	r3, [pc, #100]	@ (8009800 <getRPM_TIM_Wheel+0x100>)
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80097aa:	4b15      	ldr	r3, [pc, #84]	@ (8009800 <getRPM_TIM_Wheel+0x100>)
 80097ac:	889b      	ldrh	r3, [r3, #4]
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097bc:	4a11      	ldr	r2, [pc, #68]	@ (8009804 <getRPM_TIM_Wheel+0x104>)
 80097be:	3302      	adds	r3, #2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	3304      	adds	r3, #4
 80097c6:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 80097ca:	78fa      	ldrb	r2, [r7, #3]
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	490a      	ldr	r1, [pc, #40]	@ (80097f8 <getRPM_TIM_Wheel+0xf8>)
 80097d0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80097d4:	4a09      	ldr	r2, [pc, #36]	@ (80097fc <getRPM_TIM_Wheel+0xfc>)
 80097d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return Motor_feedback._RPM[_Wheel];
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	4a09      	ldr	r2, [pc, #36]	@ (8009804 <getRPM_TIM_Wheel+0x104>)
 80097de:	3302      	adds	r3, #2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	3304      	adds	r3, #4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	ee07 3a90 	vmov	s15, r3
}
 80097ec:	eeb0 0a67 	vmov.f32	s0, s15
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	2000071c 	.word	0x2000071c
 80097fc:	20000728 	.word	0x20000728
 8009800:	20000010 	.word	0x20000010
 8009804:	200006bc 	.word	0x200006bc
 8009808:	42700000 	.word	0x42700000

0800980c <Setup_PID_Wheel>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_Wheel(float Kp ,float Ki ,float Kd ,float _min_speed ,float _max_speed ,motor_Wheel _Wheel){
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	ed87 0a05 	vstr	s0, [r7, #20]
 8009816:	edc7 0a04 	vstr	s1, [r7, #16]
 800981a:	ed87 1a03 	vstr	s2, [r7, #12]
 800981e:	edc7 1a02 	vstr	s3, [r7, #8]
 8009822:	ed87 2a01 	vstr	s4, [r7, #4]
 8009826:	4603      	mov	r3, r0
 8009828:	70fb      	strb	r3, [r7, #3]
	Kp_Wheel[_Wheel] = Kp;
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	4a11      	ldr	r2, [pc, #68]	@ (8009874 <Setup_PID_Wheel+0x68>)
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	601a      	str	r2, [r3, #0]
	Ki_Wheel[_Wheel] = Ki;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	4a0f      	ldr	r2, [pc, #60]	@ (8009878 <Setup_PID_Wheel+0x6c>)
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	601a      	str	r2, [r3, #0]
	Kd_Wheel[_Wheel] = Kd;
 8009842:	78fb      	ldrb	r3, [r7, #3]
 8009844:	4a0d      	ldr	r2, [pc, #52]	@ (800987c <Setup_PID_Wheel+0x70>)
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	601a      	str	r2, [r3, #0]

	min_speed[_Wheel] = _min_speed;
 800984e:	78fb      	ldrb	r3, [r7, #3]
 8009850:	4a0b      	ldr	r2, [pc, #44]	@ (8009880 <Setup_PID_Wheel+0x74>)
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	601a      	str	r2, [r3, #0]
	max_speed[_Wheel] = _max_speed;
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	4a09      	ldr	r2, [pc, #36]	@ (8009884 <Setup_PID_Wheel+0x78>)
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	601a      	str	r2, [r3, #0]
}
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20000734 	.word	0x20000734
 8009878:	2000074c 	.word	0x2000074c
 800987c:	20000764 	.word	0x20000764
 8009880:	2000077c 	.word	0x2000077c
 8009884:	20000794 	.word	0x20000794

08009888 <PID_Speed>:
float Integnator[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float Derivative[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,float RPM ,motor_Wheel _Wheel){
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009892:	edc7 0a02 	vstr	s1, [r7, #8]
 8009896:	4603      	mov	r3, r0
 8009898:	71fb      	strb	r3, [r7, #7]
	Error_Speed[_Wheel] = _Setpoint-RPM;
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	ed97 7a03 	vldr	s14, [r7, #12]
 80098a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80098a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098a8:	4a80      	ldr	r2, [pc, #512]	@ (8009aac <PID_Speed+0x224>)
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 80098b2:	79fa      	ldrb	r2, [r7, #7]
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	497d      	ldr	r1, [pc, #500]	@ (8009aac <PID_Speed+0x224>)
 80098b8:	0092      	lsls	r2, r2, #2
 80098ba:	440a      	add	r2, r1
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	497c      	ldr	r1, [pc, #496]	@ (8009ab0 <PID_Speed+0x228>)
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel] += Error_Speed[_Wheel];
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	4a7a      	ldr	r2, [pc, #488]	@ (8009ab4 <PID_Speed+0x22c>)
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	ed93 7a00 	vldr	s14, [r3]
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	4a75      	ldr	r2, [pc, #468]	@ (8009aac <PID_Speed+0x224>)
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	edd3 7a00 	vldr	s15, [r3]
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098e4:	4a73      	ldr	r2, [pc, #460]	@ (8009ab4 <PID_Speed+0x22c>)
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	edc3 7a00 	vstr	s15, [r3]
	if (Integnator[_Wheel] > 25000) {
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	4a70      	ldr	r2, [pc, #448]	@ (8009ab4 <PID_Speed+0x22c>)
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	edd3 7a00 	vldr	s15, [r3]
 80098fa:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8009ab8 <PID_Speed+0x230>
 80098fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009906:	dd06      	ble.n	8009916 <PID_Speed+0x8e>
		Integnator[_Wheel] = 25000;
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	4a6a      	ldr	r2, [pc, #424]	@ (8009ab4 <PID_Speed+0x22c>)
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	4a6a      	ldr	r2, [pc, #424]	@ (8009abc <PID_Speed+0x234>)
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e021      	b.n	800995a <PID_Speed+0xd2>
	} else if (Integnator[_Wheel] < -25000) {
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	4a66      	ldr	r2, [pc, #408]	@ (8009ab4 <PID_Speed+0x22c>)
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	edd3 7a00 	vldr	s15, [r3]
 8009922:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8009ac0 <PID_Speed+0x238>
 8009926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800992a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992e:	d506      	bpl.n	800993e <PID_Speed+0xb6>
		Integnator[_Wheel] = -25000;
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	4a60      	ldr	r2, [pc, #384]	@ (8009ab4 <PID_Speed+0x22c>)
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	4a62      	ldr	r2, [pc, #392]	@ (8009ac4 <PID_Speed+0x23c>)
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	e00d      	b.n	800995a <PID_Speed+0xd2>
	} else if (_Setpoint == 0) {
 800993e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009942:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994a:	d106      	bne.n	800995a <PID_Speed+0xd2>
		Integnator[_Wheel] = 0;
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	4a59      	ldr	r2, [pc, #356]	@ (8009ab4 <PID_Speed+0x22c>)
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
	}

	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	4a53      	ldr	r2, [pc, #332]	@ (8009aac <PID_Speed+0x224>)
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	ed93 7a00 	vldr	s14, [r3]
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	4a57      	ldr	r2, [pc, #348]	@ (8009ac8 <PID_Speed+0x240>)
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	edd3 7a00 	vldr	s15, [r3]
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009978:	4a54      	ldr	r2, [pc, #336]	@ (8009acc <PID_Speed+0x244>)
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 8009982:	79fa      	ldrb	r2, [r7, #7]
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	4949      	ldr	r1, [pc, #292]	@ (8009aac <PID_Speed+0x224>)
 8009988:	0092      	lsls	r2, r2, #2
 800998a:	440a      	add	r2, r1
 800998c:	6812      	ldr	r2, [r2, #0]
 800998e:	494e      	ldr	r1, [pc, #312]	@ (8009ac8 <PID_Speed+0x240>)
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	440b      	add	r3, r1
 8009994:	601a      	str	r2, [r3, #0]

	Motor_feedback._PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	4a45      	ldr	r2, [pc, #276]	@ (8009ab0 <PID_Speed+0x228>)
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	ed93 7a00 	vldr	s14, [r3]
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	4a4a      	ldr	r2, [pc, #296]	@ (8009ad0 <PID_Speed+0x248>)
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	edd3 7a00 	vldr	s15, [r3]
 80099ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	4a3f      	ldr	r2, [pc, #252]	@ (8009ab4 <PID_Speed+0x22c>)
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	edd3 6a00 	vldr	s13, [r3]
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	4a44      	ldr	r2, [pc, #272]	@ (8009ad4 <PID_Speed+0x24c>)
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	edd3 7a00 	vldr	s15, [r3]
 80099ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	4a3d      	ldr	r2, [pc, #244]	@ (8009acc <PID_Speed+0x244>)
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	edd3 6a00 	vldr	s13, [r3]
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	4a3d      	ldr	r2, [pc, #244]	@ (8009ad8 <PID_Speed+0x250>)
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	edd3 7a00 	vldr	s15, [r3]
 80099ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f4:	4a39      	ldr	r2, [pc, #228]	@ (8009adc <PID_Speed+0x254>)
 80099f6:	3308      	adds	r3, #8
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	3304      	adds	r3, #4
 80099fe:	edc3 7a00 	vstr	s15, [r3]

	if (Motor_feedback._PID[_Wheel] > max_speed[_Wheel]) {
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	4a35      	ldr	r2, [pc, #212]	@ (8009adc <PID_Speed+0x254>)
 8009a06:	3308      	adds	r3, #8
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	ed93 7a00 	vldr	s14, [r3]
 8009a12:	79fb      	ldrb	r3, [r7, #7]
 8009a14:	4a32      	ldr	r2, [pc, #200]	@ (8009ae0 <PID_Speed+0x258>)
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	edd3 7a00 	vldr	s15, [r3]
 8009a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a26:	dd0c      	ble.n	8009a42 <PID_Speed+0x1ba>
		Motor_feedback._PID[_Wheel] = max_speed[_Wheel];
 8009a28:	79fa      	ldrb	r2, [r7, #7]
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	492c      	ldr	r1, [pc, #176]	@ (8009ae0 <PID_Speed+0x258>)
 8009a2e:	0092      	lsls	r2, r2, #2
 8009a30:	440a      	add	r2, r1
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	4929      	ldr	r1, [pc, #164]	@ (8009adc <PID_Speed+0x254>)
 8009a36:	3308      	adds	r3, #8
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	e024      	b.n	8009a8c <PID_Speed+0x204>
	} else if (Motor_feedback._PID[_Wheel] < -max_speed[_Wheel]) {
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	4a25      	ldr	r2, [pc, #148]	@ (8009adc <PID_Speed+0x254>)
 8009a46:	3308      	adds	r3, #8
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	ed93 7a00 	vldr	s14, [r3]
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	4a22      	ldr	r2, [pc, #136]	@ (8009ae0 <PID_Speed+0x258>)
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	edd3 7a00 	vldr	s15, [r3]
 8009a5e:	eef1 7a67 	vneg.f32	s15, s15
 8009a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6a:	d50f      	bpl.n	8009a8c <PID_Speed+0x204>
		Motor_feedback._PID[_Wheel] = -max_speed[_Wheel];
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae0 <PID_Speed+0x258>)
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	edd3 7a00 	vldr	s15, [r3]
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	eef1 7a67 	vneg.f32	s15, s15
 8009a7e:	4a17      	ldr	r2, [pc, #92]	@ (8009adc <PID_Speed+0x254>)
 8009a80:	3308      	adds	r3, #8
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	3304      	adds	r3, #4
 8009a88:	edc3 7a00 	vstr	s15, [r3]
	}

	return Motor_feedback._PID[_Wheel];
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	4a13      	ldr	r2, [pc, #76]	@ (8009adc <PID_Speed+0x254>)
 8009a90:	3308      	adds	r3, #8
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	3304      	adds	r3, #4
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	ee07 3a90 	vmov	s15, r3
}
 8009a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	200007ac 	.word	0x200007ac
 8009ab0:	200007c4 	.word	0x200007c4
 8009ab4:	200007dc 	.word	0x200007dc
 8009ab8:	46c35000 	.word	0x46c35000
 8009abc:	46c35000 	.word	0x46c35000
 8009ac0:	c6c35000 	.word	0xc6c35000
 8009ac4:	c6c35000 	.word	0xc6c35000
 8009ac8:	2000080c 	.word	0x2000080c
 8009acc:	200007f4 	.word	0x200007f4
 8009ad0:	20000734 	.word	0x20000734
 8009ad4:	2000074c 	.word	0x2000074c
 8009ad8:	20000764 	.word	0x20000764
 8009adc:	200006bc 	.word	0x200006bc
 8009ae0:	20000794 	.word	0x20000794

08009ae4 <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8009aee:	4b26      	ldr	r3, [pc, #152]	@ (8009b88 <Motor_DutyCycle_LF+0xa4>)
 8009af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	dd03      	ble.n	8009b04 <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8009afc:	4b22      	ldr	r3, [pc, #136]	@ (8009b88 <Motor_DutyCycle_LF+0xa4>)
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	80fb      	strh	r3, [r7, #6]
 8009b02:	e00e      	b.n	8009b22 <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 8009b04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b08:	4b1f      	ldr	r3, [pc, #124]	@ (8009b88 <Motor_DutyCycle_LF+0xa4>)
 8009b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b0e:	425b      	negs	r3, r3
 8009b10:	429a      	cmp	r2, r3
 8009b12:	da06      	bge.n	8009b22 <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 8009b14:	4b1c      	ldr	r3, [pc, #112]	@ (8009b88 <Motor_DutyCycle_LF+0xa4>)
 8009b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	425b      	negs	r3, r3
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 8009b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dd02      	ble.n	8009b30 <Motor_DutyCycle_LF+0x4c>
 8009b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b2e:	e006      	b.n	8009b3e <Motor_DutyCycle_LF+0x5a>
 8009b30:	4b15      	ldr	r3, [pc, #84]	@ (8009b88 <Motor_DutyCycle_LF+0xa4>)
 8009b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	4a13      	ldr	r2, [pc, #76]	@ (8009b8c <Motor_DutyCycle_LF+0xa8>)
 8009b40:	6812      	ldr	r2, [r2, #0]
 8009b42:	6812      	ldr	r2, [r2, #0]
 8009b44:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 8009b46:	4b12      	ldr	r3, [pc, #72]	@ (8009b90 <Motor_DutyCycle_LF+0xac>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b4e:	13db      	asrs	r3, r3, #15
 8009b50:	b21b      	sxth	r3, r3
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f7ff f8c3 	bl	8008ce8 <digitalWrite>

	if(DutyCycle_LF == 0){
 8009b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10a      	bne.n	8009b80 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 8009b6a:	4b08      	ldr	r3, [pc, #32]	@ (8009b8c <Motor_DutyCycle_LF+0xa8>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 8009b74:	4b06      	ldr	r3, [pc, #24]	@ (8009b90 <Motor_DutyCycle_LF+0xac>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff f8b4 	bl	8008ce8 <digitalWrite>
	}
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	200006f8 	.word	0x200006f8
 8009b8c:	200006a4 	.word	0x200006a4
 8009b90:	20000704 	.word	0x20000704

08009b94 <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	425b      	negs	r3, r3
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 8009ba6:	4b26      	ldr	r3, [pc, #152]	@ (8009c40 <Motor_DutyCycle_LB+0xac>)
 8009ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	dd03      	ble.n	8009bbc <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 8009bb4:	4b22      	ldr	r3, [pc, #136]	@ (8009c40 <Motor_DutyCycle_LB+0xac>)
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	80fb      	strh	r3, [r7, #6]
 8009bba:	e00e      	b.n	8009bda <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8009bbc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8009c40 <Motor_DutyCycle_LB+0xac>)
 8009bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bc6:	425b      	negs	r3, r3
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	da06      	bge.n	8009bda <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8009bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8009c40 <Motor_DutyCycle_LB+0xac>)
 8009bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	425b      	negs	r3, r3
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8009bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	dd02      	ble.n	8009be8 <Motor_DutyCycle_LB+0x54>
 8009be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009be6:	e006      	b.n	8009bf6 <Motor_DutyCycle_LB+0x62>
 8009be8:	4b15      	ldr	r3, [pc, #84]	@ (8009c40 <Motor_DutyCycle_LB+0xac>)
 8009bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	4a13      	ldr	r2, [pc, #76]	@ (8009c44 <Motor_DutyCycle_LB+0xb0>)
 8009bf8:	6812      	ldr	r2, [r2, #0]
 8009bfa:	6812      	ldr	r2, [r2, #0]
 8009bfc:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8009bfe:	4b12      	ldr	r3, [pc, #72]	@ (8009c48 <Motor_DutyCycle_LB+0xb4>)
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c06:	13db      	asrs	r3, r3, #15
 8009c08:	b21b      	sxth	r3, r3
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7ff f867 	bl	8008ce8 <digitalWrite>

	if(DutyCycle_LB == 0){
 8009c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 8009c22:	4b08      	ldr	r3, [pc, #32]	@ (8009c44 <Motor_DutyCycle_LB+0xb0>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8009c2c:	4b06      	ldr	r3, [pc, #24]	@ (8009c48 <Motor_DutyCycle_LB+0xb4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2100      	movs	r1, #0
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff f858 	bl	8008ce8 <digitalWrite>
	}
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	200006fa 	.word	0x200006fa
 8009c44:	200006a8 	.word	0x200006a8
 8009c48:	20000708 	.word	0x20000708

08009c4c <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 8009c56:	88fb      	ldrh	r3, [r7, #6]
 8009c58:	425b      	negs	r3, r3
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 8009c5e:	4b26      	ldr	r3, [pc, #152]	@ (8009cf8 <Motor_DutyCycle_RF+0xac>)
 8009c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	dd03      	ble.n	8009c74 <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 8009c6c:	4b22      	ldr	r3, [pc, #136]	@ (8009cf8 <Motor_DutyCycle_RF+0xac>)
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	80fb      	strh	r3, [r7, #6]
 8009c72:	e00e      	b.n	8009c92 <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 8009c74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c78:	4b1f      	ldr	r3, [pc, #124]	@ (8009cf8 <Motor_DutyCycle_RF+0xac>)
 8009c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c7e:	425b      	negs	r3, r3
 8009c80:	429a      	cmp	r2, r3
 8009c82:	da06      	bge.n	8009c92 <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 8009c84:	4b1c      	ldr	r3, [pc, #112]	@ (8009cf8 <Motor_DutyCycle_RF+0xac>)
 8009c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	425b      	negs	r3, r3
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 8009c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd02      	ble.n	8009ca0 <Motor_DutyCycle_RF+0x54>
 8009c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c9e:	e006      	b.n	8009cae <Motor_DutyCycle_RF+0x62>
 8009ca0:	4b15      	ldr	r3, [pc, #84]	@ (8009cf8 <Motor_DutyCycle_RF+0xac>)
 8009ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cac:	4413      	add	r3, r2
 8009cae:	4a13      	ldr	r2, [pc, #76]	@ (8009cfc <Motor_DutyCycle_RF+0xb0>)
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	6812      	ldr	r2, [r2, #0]
 8009cb4:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 8009cb6:	4b12      	ldr	r3, [pc, #72]	@ (8009d00 <Motor_DutyCycle_RF+0xb4>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cbe:	13db      	asrs	r3, r3, #15
 8009cc0:	b21b      	sxth	r3, r3
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f7ff f80b 	bl	8008ce8 <digitalWrite>

	if(DutyCycle_RF == 0){
 8009cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8009cda:	4b08      	ldr	r3, [pc, #32]	@ (8009cfc <Motor_DutyCycle_RF+0xb0>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 8009ce4:	4b06      	ldr	r3, [pc, #24]	@ (8009d00 <Motor_DutyCycle_RF+0xb4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fffc 	bl	8008ce8 <digitalWrite>
	}
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	200006fc 	.word	0x200006fc
 8009cfc:	200006ac 	.word	0x200006ac
 8009d00:	2000070c 	.word	0x2000070c

08009d04 <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8009d0e:	4b26      	ldr	r3, [pc, #152]	@ (8009da8 <Motor_DutyCycle_RB+0xa4>)
 8009d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	dd03      	ble.n	8009d24 <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8009d1c:	4b22      	ldr	r3, [pc, #136]	@ (8009da8 <Motor_DutyCycle_RB+0xa4>)
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	80fb      	strh	r3, [r7, #6]
 8009d22:	e00e      	b.n	8009d42 <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 8009d24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d28:	4b1f      	ldr	r3, [pc, #124]	@ (8009da8 <Motor_DutyCycle_RB+0xa4>)
 8009d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d2e:	425b      	negs	r3, r3
 8009d30:	429a      	cmp	r2, r3
 8009d32:	da06      	bge.n	8009d42 <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 8009d34:	4b1c      	ldr	r3, [pc, #112]	@ (8009da8 <Motor_DutyCycle_RB+0xa4>)
 8009d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	425b      	negs	r3, r3
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 8009d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	dd02      	ble.n	8009d50 <Motor_DutyCycle_RB+0x4c>
 8009d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d4e:	e006      	b.n	8009d5e <Motor_DutyCycle_RB+0x5a>
 8009d50:	4b15      	ldr	r3, [pc, #84]	@ (8009da8 <Motor_DutyCycle_RB+0xa4>)
 8009d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	4a13      	ldr	r2, [pc, #76]	@ (8009dac <Motor_DutyCycle_RB+0xa8>)
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	6812      	ldr	r2, [r2, #0]
 8009d64:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 8009d66:	4b12      	ldr	r3, [pc, #72]	@ (8009db0 <Motor_DutyCycle_RB+0xac>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d6e:	13db      	asrs	r3, r3, #15
 8009d70:	b21b      	sxth	r3, r3
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	f7fe ffb3 	bl	8008ce8 <digitalWrite>

	if(DutyCycle_RB == 0){
 8009d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 8009d8a:	4b08      	ldr	r3, [pc, #32]	@ (8009dac <Motor_DutyCycle_RB+0xa8>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2200      	movs	r2, #0
 8009d92:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8009d94:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <Motor_DutyCycle_RB+0xac>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2100      	movs	r1, #0
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe ffa4 	bl	8008ce8 <digitalWrite>
	}
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	200006fe 	.word	0x200006fe
 8009dac:	200006b0 	.word	0x200006b0
 8009db0:	20000710 	.word	0x20000710

08009db4 <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 8009dbe:	4b26      	ldr	r3, [pc, #152]	@ (8009e58 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	dd03      	ble.n	8009dd4 <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8009dcc:	4b22      	ldr	r3, [pc, #136]	@ (8009e58 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	80fb      	strh	r3, [r7, #6]
 8009dd2:	e00e      	b.n	8009df2 <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 8009dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8009e58 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dde:	425b      	negs	r3, r3
 8009de0:	429a      	cmp	r2, r3
 8009de2:	da06      	bge.n	8009df2 <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 8009de4:	4b1c      	ldr	r3, [pc, #112]	@ (8009e58 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	425b      	negs	r3, r3
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 8009df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dd02      	ble.n	8009e00 <Motor_DutyCycle_EXTRA1+0x4c>
 8009dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009dfe:	e006      	b.n	8009e0e <Motor_DutyCycle_EXTRA1+0x5a>
 8009e00:	4b15      	ldr	r3, [pc, #84]	@ (8009e58 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	4a13      	ldr	r2, [pc, #76]	@ (8009e5c <Motor_DutyCycle_EXTRA1+0xa8>)
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 8009e16:	4b12      	ldr	r3, [pc, #72]	@ (8009e60 <Motor_DutyCycle_EXTRA1+0xac>)
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e1e:	13db      	asrs	r3, r3, #15
 8009e20:	b21b      	sxth	r3, r3
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	f7fe ff5b 	bl	8008ce8 <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 8009e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10a      	bne.n	8009e50 <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 8009e3a:	4b08      	ldr	r3, [pc, #32]	@ (8009e5c <Motor_DutyCycle_EXTRA1+0xa8>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2200      	movs	r2, #0
 8009e42:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 8009e44:	4b06      	ldr	r3, [pc, #24]	@ (8009e60 <Motor_DutyCycle_EXTRA1+0xac>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fe ff4c 	bl	8008ce8 <digitalWrite>
	}
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20000700 	.word	0x20000700
 8009e5c:	200006b4 	.word	0x200006b4
 8009e60:	20000714 	.word	0x20000714

08009e64 <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 8009e6e:	4b26      	ldr	r3, [pc, #152]	@ (8009f08 <Motor_DutyCycle_EXTRA2+0xa4>)
 8009e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	dd03      	ble.n	8009e84 <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 8009e7c:	4b22      	ldr	r3, [pc, #136]	@ (8009f08 <Motor_DutyCycle_EXTRA2+0xa4>)
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	80fb      	strh	r3, [r7, #6]
 8009e82:	e00e      	b.n	8009ea2 <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 8009e84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e88:	4b1f      	ldr	r3, [pc, #124]	@ (8009f08 <Motor_DutyCycle_EXTRA2+0xa4>)
 8009e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e8e:	425b      	negs	r3, r3
 8009e90:	429a      	cmp	r2, r3
 8009e92:	da06      	bge.n	8009ea2 <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 8009e94:	4b1c      	ldr	r3, [pc, #112]	@ (8009f08 <Motor_DutyCycle_EXTRA2+0xa4>)
 8009e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	425b      	negs	r3, r3
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 8009ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dd02      	ble.n	8009eb0 <Motor_DutyCycle_EXTRA2+0x4c>
 8009eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009eae:	e006      	b.n	8009ebe <Motor_DutyCycle_EXTRA2+0x5a>
 8009eb0:	4b15      	ldr	r3, [pc, #84]	@ (8009f08 <Motor_DutyCycle_EXTRA2+0xa4>)
 8009eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	4a13      	ldr	r2, [pc, #76]	@ (8009f0c <Motor_DutyCycle_EXTRA2+0xa8>)
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	6812      	ldr	r2, [r2, #0]
 8009ec4:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 8009ec6:	4b12      	ldr	r3, [pc, #72]	@ (8009f10 <Motor_DutyCycle_EXTRA2+0xac>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ece:	13db      	asrs	r3, r3, #15
 8009ed0:	b21b      	sxth	r3, r3
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	4619      	mov	r1, r3
 8009edc:	4610      	mov	r0, r2
 8009ede:	f7fe ff03 	bl	8008ce8 <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 8009ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8009eea:	4b08      	ldr	r3, [pc, #32]	@ (8009f0c <Motor_DutyCycle_EXTRA2+0xa8>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 8009ef4:	4b06      	ldr	r3, [pc, #24]	@ (8009f10 <Motor_DutyCycle_EXTRA2+0xac>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe fef4 	bl	8008ce8 <digitalWrite>
	}
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000702 	.word	0x20000702
 8009f0c:	200006b8 	.word	0x200006b8
 8009f10:	20000718 	.word	0x20000718

08009f14 <Motor_DutyCycle>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t PWM_Setup[2] = { 0 };

PWM_num Num_PWM;

void Motor_DutyCycle(TIM_HandleTypeDef *PIN_PWM, PWM_num num, char *DIGI,int16_t DutyCycle){
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	607a      	str	r2, [r7, #4]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	460b      	mov	r3, r1
 8009f22:	72fb      	strb	r3, [r7, #11]
 8009f24:	4613      	mov	r3, r2
 8009f26:	813b      	strh	r3, [r7, #8]
	if (DutyCycle > 4095) {
 8009f28:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f30:	db03      	blt.n	8009f3a <Motor_DutyCycle+0x26>
		DutyCycle = 4095;
 8009f32:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009f36:	813b      	strh	r3, [r7, #8]
 8009f38:	e007      	b.n	8009f4a <Motor_DutyCycle+0x36>
	} else if (DutyCycle < -4095) {
 8009f3a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009f3e:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8009f42:	dc02      	bgt.n	8009f4a <Motor_DutyCycle+0x36>
		DutyCycle = -4095;
 8009f44:	f24f 0301 	movw	r3, #61441	@ 0xf001
 8009f48:	813b      	strh	r3, [r7, #8]
	}
	if(PWM_Setup[num] == 0){
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8009ff8 <Motor_DutyCycle+0xe4>)
 8009f4e:	5cd3      	ldrb	r3, [r2, r3]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d112      	bne.n	8009f7a <Motor_DutyCycle+0x66>
		if(num == 0)HAL_TIM_PWM_Start(PIN_PWM, TIM_CHANNEL_2);
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <Motor_DutyCycle+0x50>
 8009f5a:	2104      	movs	r1, #4
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7fb fe19 	bl	8005b94 <HAL_TIM_PWM_Start>
 8009f62:	e006      	b.n	8009f72 <Motor_DutyCycle+0x5e>
		else if(num == 1)HAL_TIM_PWM_Start(PIN_PWM, TIM_CHANNEL_1);
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d103      	bne.n	8009f72 <Motor_DutyCycle+0x5e>
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7fb fe11 	bl	8005b94 <HAL_TIM_PWM_Start>
		PWM_Setup[num] = 1;
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	4a20      	ldr	r2, [pc, #128]	@ (8009ff8 <Motor_DutyCycle+0xe4>)
 8009f76:	2101      	movs	r1, #1
 8009f78:	54d1      	strb	r1, [r2, r3]
	}

	if(num == 0)PIN_PWM->Instance->CCR2 = (DutyCycle > 0) ? (int16_t)DutyCycle : (4095 + (int16_t)DutyCycle);
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10e      	bne.n	8009f9e <Motor_DutyCycle+0x8a>
 8009f80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dd02      	ble.n	8009f8e <Motor_DutyCycle+0x7a>
 8009f88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009f8c:	e003      	b.n	8009f96 <Motor_DutyCycle+0x82>
 8009f8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009f92:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	6812      	ldr	r2, [r2, #0]
 8009f9a:	6393      	str	r3, [r2, #56]	@ 0x38
 8009f9c:	e010      	b.n	8009fc0 <Motor_DutyCycle+0xac>
	else if(num == 1)PIN_PWM->Instance->CCR1 = (DutyCycle > 0) ? (int16_t)DutyCycle : (4095 + (int16_t)DutyCycle);
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d10d      	bne.n	8009fc0 <Motor_DutyCycle+0xac>
 8009fa4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dd02      	ble.n	8009fb2 <Motor_DutyCycle+0x9e>
 8009fac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009fb0:	e003      	b.n	8009fba <Motor_DutyCycle+0xa6>
 8009fb2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009fb6:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	6812      	ldr	r2, [r2, #0]
 8009fbe:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(DIGI , (DutyCycle < 0) ? 1 : 0);
 8009fc0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009fc4:	13db      	asrs	r3, r3, #15
 8009fc6:	b21b      	sxth	r3, r3
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7fe fe88 	bl	8008ce8 <digitalWrite>

	if(DutyCycle == 0){
 8009fd8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d107      	bne.n	8009ff0 <Motor_DutyCycle+0xdc>
	   PIN_PWM->Instance->CCR2 = 0;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	639a      	str	r2, [r3, #56]	@ 0x38
	   digitalWrite(DIGI ,0);
 8009fe8:	2100      	movs	r1, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fe fe7c 	bl	8008ce8 <digitalWrite>
	}
}
 8009ff0:	bf00      	nop
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	20000824 	.word	0x20000824

08009ffc <Motor_Speed_LF>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	ed87 0a00 	vstr	s0, [r7]
 800a008:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 800a00a:	4b2d      	ldr	r3, [pc, #180]	@ (800a0c0 <Motor_Speed_LF+0xc4>)
 800a00c:	edd3 7a00 	vldr	s15, [r3]
 800a010:	ed97 7a00 	vldr	s14, [r7]
 800a014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01c:	dd03      	ble.n	800a026 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 800a01e:	4b28      	ldr	r3, [pc, #160]	@ (800a0c0 <Motor_Speed_LF+0xc4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	e012      	b.n	800a04c <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 800a026:	4b26      	ldr	r3, [pc, #152]	@ (800a0c0 <Motor_Speed_LF+0xc4>)
 800a028:	edd3 7a00 	vldr	s15, [r3]
 800a02c:	eef1 7a67 	vneg.f32	s15, s15
 800a030:	ed97 7a00 	vldr	s14, [r7]
 800a034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03c:	d506      	bpl.n	800a04c <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 800a03e:	4b20      	ldr	r3, [pc, #128]	@ (800a0c0 <Motor_Speed_LF+0xc4>)
 800a040:	edd3 7a00 	vldr	s15, [r3]
 800a044:	eef1 7a67 	vneg.f32	s15, s15
 800a048:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 800a04c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a050:	ee07 3a90 	vmov	s15, r3
 800a054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a058:	2000      	movs	r0, #0
 800a05a:	edd7 0a00 	vldr	s1, [r7]
 800a05e:	eeb0 0a67 	vmov.f32	s0, s15
 800a062:	f7ff fc11 	bl	8009888 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Motor_feedback._PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 800a066:	4b17      	ldr	r3, [pc, #92]	@ (800a0c4 <Motor_Speed_LF+0xc8>)
 800a068:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800a06c:	4b14      	ldr	r3, [pc, #80]	@ (800a0c0 <Motor_Speed_LF+0xc4>)
 800a06e:	ed93 7a00 	vldr	s14, [r3]
 800a072:	4b15      	ldr	r3, [pc, #84]	@ (800a0c8 <Motor_Speed_LF+0xcc>)
 800a074:	edd3 7a00 	vldr	s15, [r3]
 800a078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a07c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a080:	4b12      	ldr	r3, [pc, #72]	@ (800a0cc <Motor_Speed_LF+0xd0>)
 800a082:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a086:	ee07 3a90 	vmov	s15, r3
 800a08a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a096:	ee17 3a90 	vmov	r3, s15
 800a09a:	b21a      	sxth	r2, r3
 800a09c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d0 <Motor_Speed_LF+0xd4>)
 800a09e:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d0 <Motor_Speed_LF+0xd4>)
 800a0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fd1c 	bl	8009ae4 <Motor_DutyCycle_LF>

	return Motor_feedback._PID[0];
 800a0ac:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <Motor_Speed_LF+0xc8>)
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b0:	ee07 3a90 	vmov	s15, r3
}
 800a0b4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000794 	.word	0x20000794
 800a0c4:	200006bc 	.word	0x200006bc
 800a0c8:	2000077c 	.word	0x2000077c
 800a0cc:	200006f8 	.word	0x200006f8
 800a0d0:	20000828 	.word	0x20000828

0800a0d4 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	ed87 0a00 	vstr	s0, [r7]
 800a0e0:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 800a0e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a198 <Motor_Speed_LB+0xc4>)
 800a0e4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a0e8:	ed97 7a00 	vldr	s14, [r7]
 800a0ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f4:	dd03      	ble.n	800a0fe <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 800a0f6:	4b28      	ldr	r3, [pc, #160]	@ (800a198 <Motor_Speed_LB+0xc4>)
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	e012      	b.n	800a124 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 800a0fe:	4b26      	ldr	r3, [pc, #152]	@ (800a198 <Motor_Speed_LB+0xc4>)
 800a100:	edd3 7a01 	vldr	s15, [r3, #4]
 800a104:	eef1 7a67 	vneg.f32	s15, s15
 800a108:	ed97 7a00 	vldr	s14, [r7]
 800a10c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a114:	d506      	bpl.n	800a124 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 800a116:	4b20      	ldr	r3, [pc, #128]	@ (800a198 <Motor_Speed_LB+0xc4>)
 800a118:	edd3 7a01 	vldr	s15, [r3, #4]
 800a11c:	eef1 7a67 	vneg.f32	s15, s15
 800a120:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 800a124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a128:	ee07 3a90 	vmov	s15, r3
 800a12c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a130:	2001      	movs	r0, #1
 800a132:	edd7 0a00 	vldr	s1, [r7]
 800a136:	eeb0 0a67 	vmov.f32	s0, s15
 800a13a:	f7ff fba5 	bl	8009888 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Motor_feedback._PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 800a13e:	4b17      	ldr	r3, [pc, #92]	@ (800a19c <Motor_Speed_LB+0xc8>)
 800a140:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800a144:	4b14      	ldr	r3, [pc, #80]	@ (800a198 <Motor_Speed_LB+0xc4>)
 800a146:	ed93 7a01 	vldr	s14, [r3, #4]
 800a14a:	4b15      	ldr	r3, [pc, #84]	@ (800a1a0 <Motor_Speed_LB+0xcc>)
 800a14c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a150:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a158:	4b12      	ldr	r3, [pc, #72]	@ (800a1a4 <Motor_Speed_LB+0xd0>)
 800a15a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a16e:	ee17 3a90 	vmov	r3, s15
 800a172:	b21a      	sxth	r2, r3
 800a174:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a8 <Motor_Speed_LB+0xd4>)
 800a176:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 800a178:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a8 <Motor_Speed_LB+0xd4>)
 800a17a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff fd08 	bl	8009b94 <Motor_DutyCycle_LB>

	return Motor_feedback._PID[1];
 800a184:	4b05      	ldr	r3, [pc, #20]	@ (800a19c <Motor_Speed_LB+0xc8>)
 800a186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a188:	ee07 3a90 	vmov	s15, r3
}
 800a18c:	eeb0 0a67 	vmov.f32	s0, s15
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20000794 	.word	0x20000794
 800a19c:	200006bc 	.word	0x200006bc
 800a1a0:	2000077c 	.word	0x2000077c
 800a1a4:	200006fa 	.word	0x200006fa
 800a1a8:	20000828 	.word	0x20000828

0800a1ac <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	ed87 0a00 	vstr	s0, [r7]
 800a1b8:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 800a1ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a270 <Motor_Speed_RF+0xc4>)
 800a1bc:	edd3 7a02 	vldr	s15, [r3, #8]
 800a1c0:	ed97 7a00 	vldr	s14, [r7]
 800a1c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1cc:	dd03      	ble.n	800a1d6 <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 800a1ce:	4b28      	ldr	r3, [pc, #160]	@ (800a270 <Motor_Speed_RF+0xc4>)
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	e012      	b.n	800a1fc <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 800a1d6:	4b26      	ldr	r3, [pc, #152]	@ (800a270 <Motor_Speed_RF+0xc4>)
 800a1d8:	edd3 7a02 	vldr	s15, [r3, #8]
 800a1dc:	eef1 7a67 	vneg.f32	s15, s15
 800a1e0:	ed97 7a00 	vldr	s14, [r7]
 800a1e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ec:	d506      	bpl.n	800a1fc <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 800a1ee:	4b20      	ldr	r3, [pc, #128]	@ (800a270 <Motor_Speed_RF+0xc4>)
 800a1f0:	edd3 7a02 	vldr	s15, [r3, #8]
 800a1f4:	eef1 7a67 	vneg.f32	s15, s15
 800a1f8:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 800a1fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a208:	2002      	movs	r0, #2
 800a20a:	edd7 0a00 	vldr	s1, [r7]
 800a20e:	eeb0 0a67 	vmov.f32	s0, s15
 800a212:	f7ff fb39 	bl	8009888 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Motor_feedback._PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 800a216:	4b17      	ldr	r3, [pc, #92]	@ (800a274 <Motor_Speed_RF+0xc8>)
 800a218:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800a21c:	4b14      	ldr	r3, [pc, #80]	@ (800a270 <Motor_Speed_RF+0xc4>)
 800a21e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a222:	4b15      	ldr	r3, [pc, #84]	@ (800a278 <Motor_Speed_RF+0xcc>)
 800a224:	edd3 7a02 	vldr	s15, [r3, #8]
 800a228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a22c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a230:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <Motor_Speed_RF+0xd0>)
 800a232:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a246:	ee17 3a90 	vmov	r3, s15
 800a24a:	b21a      	sxth	r2, r3
 800a24c:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <Motor_Speed_RF+0xd4>)
 800a24e:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 800a250:	4b0b      	ldr	r3, [pc, #44]	@ (800a280 <Motor_Speed_RF+0xd4>)
 800a252:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff fcf8 	bl	8009c4c <Motor_DutyCycle_RF>

	return Motor_feedback._PID[2];
 800a25c:	4b05      	ldr	r3, [pc, #20]	@ (800a274 <Motor_Speed_RF+0xc8>)
 800a25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a260:	ee07 3a90 	vmov	s15, r3
}
 800a264:	eeb0 0a67 	vmov.f32	s0, s15
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	20000794 	.word	0x20000794
 800a274:	200006bc 	.word	0x200006bc
 800a278:	2000077c 	.word	0x2000077c
 800a27c:	200006fc 	.word	0x200006fc
 800a280:	20000828 	.word	0x20000828

0800a284 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	ed87 0a00 	vstr	s0, [r7]
 800a290:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 800a292:	4b2d      	ldr	r3, [pc, #180]	@ (800a348 <Motor_Speed_RB+0xc4>)
 800a294:	edd3 7a03 	vldr	s15, [r3, #12]
 800a298:	ed97 7a00 	vldr	s14, [r7]
 800a29c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a4:	dd03      	ble.n	800a2ae <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 800a2a6:	4b28      	ldr	r3, [pc, #160]	@ (800a348 <Motor_Speed_RB+0xc4>)
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	e012      	b.n	800a2d4 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 800a2ae:	4b26      	ldr	r3, [pc, #152]	@ (800a348 <Motor_Speed_RB+0xc4>)
 800a2b0:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2b4:	eef1 7a67 	vneg.f32	s15, s15
 800a2b8:	ed97 7a00 	vldr	s14, [r7]
 800a2bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c4:	d506      	bpl.n	800a2d4 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 800a2c6:	4b20      	ldr	r3, [pc, #128]	@ (800a348 <Motor_Speed_RB+0xc4>)
 800a2c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2cc:	eef1 7a67 	vneg.f32	s15, s15
 800a2d0:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 800a2d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2d8:	ee07 3a90 	vmov	s15, r3
 800a2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2e0:	2003      	movs	r0, #3
 800a2e2:	edd7 0a00 	vldr	s1, [r7]
 800a2e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ea:	f7ff facd 	bl	8009888 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Motor_feedback._PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 800a2ee:	4b17      	ldr	r3, [pc, #92]	@ (800a34c <Motor_Speed_RB+0xc8>)
 800a2f0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800a2f4:	4b14      	ldr	r3, [pc, #80]	@ (800a348 <Motor_Speed_RB+0xc4>)
 800a2f6:	ed93 7a03 	vldr	s14, [r3, #12]
 800a2fa:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <Motor_Speed_RB+0xcc>)
 800a2fc:	edd3 7a03 	vldr	s15, [r3, #12]
 800a300:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a308:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <Motor_Speed_RB+0xd0>)
 800a30a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a31e:	ee17 3a90 	vmov	r3, s15
 800a322:	b21a      	sxth	r2, r3
 800a324:	4b0c      	ldr	r3, [pc, #48]	@ (800a358 <Motor_Speed_RB+0xd4>)
 800a326:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 800a328:	4b0b      	ldr	r3, [pc, #44]	@ (800a358 <Motor_Speed_RB+0xd4>)
 800a32a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fce8 	bl	8009d04 <Motor_DutyCycle_RB>

	return Motor_feedback._PID[3];
 800a334:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <Motor_Speed_RB+0xc8>)
 800a336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a338:	ee07 3a90 	vmov	s15, r3
}
 800a33c:	eeb0 0a67 	vmov.f32	s0, s15
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000794 	.word	0x20000794
 800a34c:	200006bc 	.word	0x200006bc
 800a350:	2000077c 	.word	0x2000077c
 800a354:	200006fe 	.word	0x200006fe
 800a358:	20000828 	.word	0x20000828

0800a35c <Shoot_Ball>:
	uint8_t status_Juggling;
}Robot;

Robot Status_Robot;

void Shoot_Ball(TIM_HandleTypeDef *PIN_PWM){
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	if(Status_Robot.status_GUN == 1){
 800a364:	4b12      	ldr	r3, [pc, #72]	@ (800a3b0 <Shoot_Ball+0x54>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d104      	bne.n	800a376 <Shoot_Ball+0x1a>
		digitalWrite("PA11" ,1);
 800a36c:	2101      	movs	r1, #1
 800a36e:	4811      	ldr	r0, [pc, #68]	@ (800a3b4 <Shoot_Ball+0x58>)
 800a370:	f7fe fcba 	bl	8008ce8 <digitalWrite>
		digitalWrite("PA11" ,0);
		Motor_DutyCycle(PIN_PWM, Servo1, "PB00", 0);
		Status_Robot.status_GUN = 0;
	}

}
 800a374:	e018      	b.n	800a3a8 <Shoot_Ball+0x4c>
	}else if((Status_Robot.status_GUN == 1) && ((uwTick - Time_GUN) >= 500)){
 800a376:	4b0e      	ldr	r3, [pc, #56]	@ (800a3b0 <Shoot_Ball+0x54>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d114      	bne.n	800a3a8 <Shoot_Ball+0x4c>
 800a37e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3b8 <Shoot_Ball+0x5c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a0e      	ldr	r2, [pc, #56]	@ (800a3bc <Shoot_Ball+0x60>)
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a38c:	d30c      	bcc.n	800a3a8 <Shoot_Ball+0x4c>
		digitalWrite("PA11" ,0);
 800a38e:	2100      	movs	r1, #0
 800a390:	4808      	ldr	r0, [pc, #32]	@ (800a3b4 <Shoot_Ball+0x58>)
 800a392:	f7fe fca9 	bl	8008ce8 <digitalWrite>
		Motor_DutyCycle(PIN_PWM, Servo1, "PB00", 0);
 800a396:	2300      	movs	r3, #0
 800a398:	4a09      	ldr	r2, [pc, #36]	@ (800a3c0 <Shoot_Ball+0x64>)
 800a39a:	2100      	movs	r1, #0
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff fdb9 	bl	8009f14 <Motor_DutyCycle>
		Status_Robot.status_GUN = 0;
 800a3a2:	4b03      	ldr	r3, [pc, #12]	@ (800a3b0 <Shoot_Ball+0x54>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	701a      	strb	r2, [r3, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20000854 	.word	0x20000854
 800a3b4:	0800ee40 	.word	0x0800ee40
 800a3b8:	20000688 	.word	0x20000688
 800a3bc:	20000838 	.word	0x20000838
 800a3c0:	0800ee48 	.word	0x0800ee48

0800a3c4 <Juggling>:

void Juggling(){
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
	switch (_Case_Juggling) {
 800a3c8:	4b29      	ldr	r3, [pc, #164]	@ (800a470 <Juggling+0xac>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d031      	beq.n	800a434 <Juggling+0x70>
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	dc4b      	bgt.n	800a46c <Juggling+0xa8>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <Juggling+0x1a>
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d014      	beq.n	800a406 <Juggling+0x42>
			_Case_Juggling = 0;
		}
		break;
	}

}
 800a3dc:	e046      	b.n	800a46c <Juggling+0xa8>
		if ((Status_Robot.status_Juggling == 1) && ((uwTick - Time_Juggling) >= 500)) {
 800a3de:	4b25      	ldr	r3, [pc, #148]	@ (800a474 <Juggling+0xb0>)
 800a3e0:	789b      	ldrb	r3, [r3, #2]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d13d      	bne.n	800a462 <Juggling+0x9e>
 800a3e6:	4b24      	ldr	r3, [pc, #144]	@ (800a478 <Juggling+0xb4>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a24      	ldr	r2, [pc, #144]	@ (800a47c <Juggling+0xb8>)
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	1a9b      	subs	r3, r3, r2
 800a3f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a3f4:	d335      	bcc.n	800a462 <Juggling+0x9e>
			digitalWrite("PA05", 1);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	4821      	ldr	r0, [pc, #132]	@ (800a480 <Juggling+0xbc>)
 800a3fa:	f7fe fc75 	bl	8008ce8 <digitalWrite>
			_Case_Juggling = 1;
 800a3fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a470 <Juggling+0xac>)
 800a400:	2201      	movs	r2, #1
 800a402:	701a      	strb	r2, [r3, #0]
		break;
 800a404:	e02d      	b.n	800a462 <Juggling+0x9e>
		if ((Status_Robot.status_Juggling == 1) && ((uwTick - Time_Juggling) >= 1000)) {
 800a406:	4b1b      	ldr	r3, [pc, #108]	@ (800a474 <Juggling+0xb0>)
 800a408:	789b      	ldrb	r3, [r3, #2]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d12b      	bne.n	800a466 <Juggling+0xa2>
 800a40e:	4b1a      	ldr	r3, [pc, #104]	@ (800a478 <Juggling+0xb4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1a      	ldr	r2, [pc, #104]	@ (800a47c <Juggling+0xb8>)
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	1a9b      	subs	r3, r3, r2
 800a418:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a41c:	d323      	bcc.n	800a466 <Juggling+0xa2>
			digitalWrite("PA05", 0);
 800a41e:	2100      	movs	r1, #0
 800a420:	4817      	ldr	r0, [pc, #92]	@ (800a480 <Juggling+0xbc>)
 800a422:	f7fe fc61 	bl	8008ce8 <digitalWrite>
			Motor_DutyCycle_EXTRA2(-1000);
 800a426:	4817      	ldr	r0, [pc, #92]	@ (800a484 <Juggling+0xc0>)
 800a428:	f7ff fd1c 	bl	8009e64 <Motor_DutyCycle_EXTRA2>
			_Case_Juggling = 2;
 800a42c:	4b10      	ldr	r3, [pc, #64]	@ (800a470 <Juggling+0xac>)
 800a42e:	2202      	movs	r2, #2
 800a430:	701a      	strb	r2, [r3, #0]
		break;
 800a432:	e018      	b.n	800a466 <Juggling+0xa2>
		if ((Status_Robot.status_Juggling == 1) && ((uwTick - Time_Juggling) >= 1500)) {
 800a434:	4b0f      	ldr	r3, [pc, #60]	@ (800a474 <Juggling+0xb0>)
 800a436:	789b      	ldrb	r3, [r3, #2]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d116      	bne.n	800a46a <Juggling+0xa6>
 800a43c:	4b0e      	ldr	r3, [pc, #56]	@ (800a478 <Juggling+0xb4>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a0e      	ldr	r2, [pc, #56]	@ (800a47c <Juggling+0xb8>)
 800a442:	6812      	ldr	r2, [r2, #0]
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d90d      	bls.n	800a46a <Juggling+0xa6>
			Status_Robot.status_Juggling = 0;
 800a44e:	4b09      	ldr	r3, [pc, #36]	@ (800a474 <Juggling+0xb0>)
 800a450:	2200      	movs	r2, #0
 800a452:	709a      	strb	r2, [r3, #2]
			Motor_DutyCycle_EXTRA2(0);
 800a454:	2000      	movs	r0, #0
 800a456:	f7ff fd05 	bl	8009e64 <Motor_DutyCycle_EXTRA2>
			_Case_Juggling = 0;
 800a45a:	4b05      	ldr	r3, [pc, #20]	@ (800a470 <Juggling+0xac>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
		break;
 800a460:	e003      	b.n	800a46a <Juggling+0xa6>
		break;
 800a462:	bf00      	nop
 800a464:	e002      	b.n	800a46c <Juggling+0xa8>
		break;
 800a466:	bf00      	nop
 800a468:	e000      	b.n	800a46c <Juggling+0xa8>
		break;
 800a46a:	bf00      	nop
}
 800a46c:	bf00      	nop
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20000848 	.word	0x20000848
 800a474:	20000854 	.word	0x20000854
 800a478:	20000688 	.word	0x20000688
 800a47c:	20000844 	.word	0x20000844
 800a480:	0800ee50 	.word	0x0800ee50
 800a484:	fffffc18 	.word	0xfffffc18

0800a488 <Reload>:

void Reload(TIM_HandleTypeDef *PIN_PWM){
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
	switch (_Case_Reload) {
 800a490:	4b1f      	ldr	r3, [pc, #124]	@ (800a510 <Reload+0x88>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <Reload+0x16>
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d014      	beq.n	800a4c6 <Reload+0x3e>
				Motor_DutyCycle(PIN_PWM, Servo1, "PB00", 0);
				_Case_Reload = 0;
			}
			break;
		}
}
 800a49c:	e033      	b.n	800a506 <Reload+0x7e>
			if ((Status_Robot.status_Reload == 1) && ((uwTick - Time_Juggling) >= 500)) {
 800a49e:	4b1d      	ldr	r3, [pc, #116]	@ (800a514 <Reload+0x8c>)
 800a4a0:	785b      	ldrb	r3, [r3, #1]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d12c      	bne.n	800a500 <Reload+0x78>
 800a4a6:	4b1c      	ldr	r3, [pc, #112]	@ (800a518 <Reload+0x90>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a51c <Reload+0x94>)
 800a4ac:	6812      	ldr	r2, [r2, #0]
 800a4ae:	1a9b      	subs	r3, r3, r2
 800a4b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a4b4:	d324      	bcc.n	800a500 <Reload+0x78>
				digitalWrite("PA10", 1);
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	4819      	ldr	r0, [pc, #100]	@ (800a520 <Reload+0x98>)
 800a4ba:	f7fe fc15 	bl	8008ce8 <digitalWrite>
				_Case_Reload = 1;
 800a4be:	4b14      	ldr	r3, [pc, #80]	@ (800a510 <Reload+0x88>)
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	701a      	strb	r2, [r3, #0]
			break;
 800a4c4:	e01c      	b.n	800a500 <Reload+0x78>
			if ((Status_Robot.status_Reload == 1) && ((uwTick - Time_Juggling) >= 1000)) {
 800a4c6:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <Reload+0x8c>)
 800a4c8:	785b      	ldrb	r3, [r3, #1]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d11a      	bne.n	800a504 <Reload+0x7c>
 800a4ce:	4b12      	ldr	r3, [pc, #72]	@ (800a518 <Reload+0x90>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a12      	ldr	r2, [pc, #72]	@ (800a51c <Reload+0x94>)
 800a4d4:	6812      	ldr	r2, [r2, #0]
 800a4d6:	1a9b      	subs	r3, r3, r2
 800a4d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4dc:	d312      	bcc.n	800a504 <Reload+0x7c>
				Status_Robot.status_Reload = 0;
 800a4de:	4b0d      	ldr	r3, [pc, #52]	@ (800a514 <Reload+0x8c>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	705a      	strb	r2, [r3, #1]
				digitalWrite("PA10", 0);
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	480e      	ldr	r0, [pc, #56]	@ (800a520 <Reload+0x98>)
 800a4e8:	f7fe fbfe 	bl	8008ce8 <digitalWrite>
				Motor_DutyCycle(PIN_PWM, Servo1, "PB00", 0);
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4a0d      	ldr	r2, [pc, #52]	@ (800a524 <Reload+0x9c>)
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff fd0e 	bl	8009f14 <Motor_DutyCycle>
				_Case_Reload = 0;
 800a4f8:	4b05      	ldr	r3, [pc, #20]	@ (800a510 <Reload+0x88>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
			break;
 800a4fe:	e001      	b.n	800a504 <Reload+0x7c>
			break;
 800a500:	bf00      	nop
 800a502:	e000      	b.n	800a506 <Reload+0x7e>
			break;
 800a504:	bf00      	nop
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20000850 	.word	0x20000850
 800a514:	20000854 	.word	0x20000854
 800a518:	20000688 	.word	0x20000688
 800a51c:	20000844 	.word	0x20000844
 800a520:	0800ee58 	.word	0x0800ee58
 800a524:	0800ee48 	.word	0x0800ee48

0800a528 <Game_Play_ROBOT_1>:

void Game_Play_ROBOT_1(TIM_HandleTypeDef *PIN_PWM ,TIM_HandleTypeDef *_Encoder){
 800a528:	b580      	push	{r7, lr}
 800a52a:	ed2d 8b02 	vpush	{d8}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
	//Set up Juggling
	if((Str_PS2.moveBtnBit.move4 == 1) && (Past_move4 == 0)){
 800a536:	4b5e      	ldr	r3, [pc, #376]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a538:	789b      	ldrb	r3, [r3, #2]
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <Game_Play_ROBOT_1+0x34>
 800a544:	4b5b      	ldr	r3, [pc, #364]	@ (800a6b4 <Game_Play_ROBOT_1+0x18c>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d107      	bne.n	800a55c <Game_Play_ROBOT_1+0x34>
		Motor_DutyCycle_EXTRA2(500);
 800a54c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a550:	f7ff fc88 	bl	8009e64 <Motor_DutyCycle_EXTRA2>
		digitalWrite("PA04", 1);
 800a554:	2101      	movs	r1, #1
 800a556:	4858      	ldr	r0, [pc, #352]	@ (800a6b8 <Game_Play_ROBOT_1+0x190>)
 800a558:	f7fe fbc6 	bl	8008ce8 <digitalWrite>
	}
	Past_move4 = Str_PS2.moveBtnBit.move4;
 800a55c:	4b54      	ldr	r3, [pc, #336]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a55e:	789b      	ldrb	r3, [r3, #2]
 800a560:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	4b52      	ldr	r3, [pc, #328]	@ (800a6b4 <Game_Play_ROBOT_1+0x18c>)
 800a56a:	701a      	strb	r2, [r3, #0]
	//Set up Juggling

	//_Juggling
	if ((Str_PS2.attackBtnBit.attack3 == 1) && (Past_attack3 == 0)){
 800a56c:	4b50      	ldr	r3, [pc, #320]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a56e:	78db      	ldrb	r3, [r3, #3]
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00f      	beq.n	800a59a <Game_Play_ROBOT_1+0x72>
 800a57a:	4b50      	ldr	r3, [pc, #320]	@ (800a6bc <Game_Play_ROBOT_1+0x194>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <Game_Play_ROBOT_1+0x72>
		Time_Juggling = uwTick;
 800a582:	4b4f      	ldr	r3, [pc, #316]	@ (800a6c0 <Game_Play_ROBOT_1+0x198>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	4b4e      	ldr	r3, [pc, #312]	@ (800a6c4 <Game_Play_ROBOT_1+0x19c>)
 800a58a:	601a      	str	r2, [r3, #0]
		digitalWrite("PA04", 0);
 800a58c:	2100      	movs	r1, #0
 800a58e:	484a      	ldr	r0, [pc, #296]	@ (800a6b8 <Game_Play_ROBOT_1+0x190>)
 800a590:	f7fe fbaa 	bl	8008ce8 <digitalWrite>
		Status_Robot.status_Juggling = 1;
 800a594:	4b4c      	ldr	r3, [pc, #304]	@ (800a6c8 <Game_Play_ROBOT_1+0x1a0>)
 800a596:	2201      	movs	r2, #1
 800a598:	709a      	strb	r2, [r3, #2]
	}
	Juggling();
 800a59a:	f7ff ff13 	bl	800a3c4 <Juggling>
	Past_attack3 = Str_PS2.attackBtnBit.attack3;
 800a59e:	4b44      	ldr	r3, [pc, #272]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a5a0:	78db      	ldrb	r3, [r3, #3]
 800a5a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4b44      	ldr	r3, [pc, #272]	@ (800a6bc <Game_Play_ROBOT_1+0x194>)
 800a5ac:	701a      	strb	r2, [r3, #0]
	//_Juggling

	//_Reload
	if ((Str_PS2.attackBtnBit.attack4 == 1) && (Past_attack4 == 0)) {
 800a5ae:	4b40      	ldr	r3, [pc, #256]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a5b0:	78db      	ldrb	r3, [r3, #3]
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d015      	beq.n	800a5e8 <Game_Play_ROBOT_1+0xc0>
 800a5bc:	4b43      	ldr	r3, [pc, #268]	@ (800a6cc <Game_Play_ROBOT_1+0x1a4>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d111      	bne.n	800a5e8 <Game_Play_ROBOT_1+0xc0>
		Time_Reload = uwTick;
 800a5c4:	4b3e      	ldr	r3, [pc, #248]	@ (800a6c0 <Game_Play_ROBOT_1+0x198>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	4b41      	ldr	r3, [pc, #260]	@ (800a6d0 <Game_Play_ROBOT_1+0x1a8>)
 800a5cc:	601a      	str	r2, [r3, #0]
		__Degree = 0.0f;
 800a5ce:	4b41      	ldr	r3, [pc, #260]	@ (800a6d4 <Game_Play_ROBOT_1+0x1ac>)
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
		Motor_DutyCycle(PIN_PWM, Servo1, "PB00", -1000);
 800a5d6:	4b40      	ldr	r3, [pc, #256]	@ (800a6d8 <Game_Play_ROBOT_1+0x1b0>)
 800a5d8:	4a40      	ldr	r2, [pc, #256]	@ (800a6dc <Game_Play_ROBOT_1+0x1b4>)
 800a5da:	2100      	movs	r1, #0
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff fc99 	bl	8009f14 <Motor_DutyCycle>
		Status_Robot.status_Reload = 1;
 800a5e2:	4b39      	ldr	r3, [pc, #228]	@ (800a6c8 <Game_Play_ROBOT_1+0x1a0>)
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	705a      	strb	r2, [r3, #1]
	}
	Reload(PIN_PWM);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff ff4d 	bl	800a488 <Reload>
	Motor_DutyCycle_EXTRA1(Ramp_Count(__Degree, Count_to_degree(getCount(_Encoder, _EXTRA1))));
 800a5ee:	4b39      	ldr	r3, [pc, #228]	@ (800a6d4 <Game_Play_ROBOT_1+0x1ac>)
 800a5f0:	ed93 8a00 	vldr	s16, [r3]
 800a5f4:	2104      	movs	r1, #4
 800a5f6:	6838      	ldr	r0, [r7, #0]
 800a5f8:	f7ff f81e 	bl	8009638 <getCount>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 fa18 	bl	800aa34 <Count_to_degree>
 800a604:	eef0 7a40 	vmov.f32	s15, s0
 800a608:	eef0 0a67 	vmov.f32	s1, s15
 800a60c:	eeb0 0a48 	vmov.f32	s0, s16
 800a610:	f000 fa4a 	bl	800aaa8 <Ramp_Count>
 800a614:	4603      	mov	r3, r0
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fbcc 	bl	8009db4 <Motor_DutyCycle_EXTRA1>
	Past_attack4 = Str_PS2.attackBtnBit.attack4;
 800a61c:	4b24      	ldr	r3, [pc, #144]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a61e:	78db      	ldrb	r3, [r3, #3]
 800a620:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a624:	b2db      	uxtb	r3, r3
 800a626:	461a      	mov	r2, r3
 800a628:	4b28      	ldr	r3, [pc, #160]	@ (800a6cc <Game_Play_ROBOT_1+0x1a4>)
 800a62a:	701a      	strb	r2, [r3, #0]
	//_Reload

    //_charge_Ball
	if((Str_PS2.attackBtnBit.attack2 == 1) && (Past_attack2 == 0)){
 800a62c:	4b20      	ldr	r3, [pc, #128]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a62e:	78db      	ldrb	r3, [r3, #3]
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00d      	beq.n	800a656 <Game_Play_ROBOT_1+0x12e>
 800a63a:	4b29      	ldr	r3, [pc, #164]	@ (800a6e0 <Game_Play_ROBOT_1+0x1b8>)
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d109      	bne.n	800a656 <Game_Play_ROBOT_1+0x12e>
		Motor_DutyCycle(PIN_PWM, Servo1, "PB00", 4000);
 800a642:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800a646:	4a25      	ldr	r2, [pc, #148]	@ (800a6dc <Game_Play_ROBOT_1+0x1b4>)
 800a648:	2100      	movs	r1, #0
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fc62 	bl	8009f14 <Motor_DutyCycle>
		__Degree = -135.0;
 800a650:	4b20      	ldr	r3, [pc, #128]	@ (800a6d4 <Game_Play_ROBOT_1+0x1ac>)
 800a652:	4a24      	ldr	r2, [pc, #144]	@ (800a6e4 <Game_Play_ROBOT_1+0x1bc>)
 800a654:	601a      	str	r2, [r3, #0]
	}
	Past_attack2 = Str_PS2.attackBtnBit.attack2;
 800a656:	4b16      	ldr	r3, [pc, #88]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a658:	78db      	ldrb	r3, [r3, #3]
 800a65a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	461a      	mov	r2, r3
 800a662:	4b1f      	ldr	r3, [pc, #124]	@ (800a6e0 <Game_Play_ROBOT_1+0x1b8>)
 800a664:	701a      	strb	r2, [r3, #0]
	//_charge_Ball

	//_Shoot_Ball
	if ((Str_PS2.attackBtnBit.attack1 == 1) && (Past_attack3 == 0)) {
 800a666:	4b12      	ldr	r3, [pc, #72]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a668:	78db      	ldrb	r3, [r3, #3]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00b      	beq.n	800a68c <Game_Play_ROBOT_1+0x164>
 800a674:	4b11      	ldr	r3, [pc, #68]	@ (800a6bc <Game_Play_ROBOT_1+0x194>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d107      	bne.n	800a68c <Game_Play_ROBOT_1+0x164>
		Time_GUN = uwTick;
 800a67c:	4b10      	ldr	r3, [pc, #64]	@ (800a6c0 <Game_Play_ROBOT_1+0x198>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	461a      	mov	r2, r3
 800a682:	4b19      	ldr	r3, [pc, #100]	@ (800a6e8 <Game_Play_ROBOT_1+0x1c0>)
 800a684:	601a      	str	r2, [r3, #0]
		Status_Robot.status_GUN = 1;
 800a686:	4b10      	ldr	r3, [pc, #64]	@ (800a6c8 <Game_Play_ROBOT_1+0x1a0>)
 800a688:	2201      	movs	r2, #1
 800a68a:	701a      	strb	r2, [r3, #0]
	}
	Shoot_Ball(PIN_PWM);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7ff fe65 	bl	800a35c <Shoot_Ball>
	Past_attack1 = Str_PS2.attackBtnBit.attack1;
 800a692:	4b07      	ldr	r3, [pc, #28]	@ (800a6b0 <Game_Play_ROBOT_1+0x188>)
 800a694:	78db      	ldrb	r3, [r3, #3]
 800a696:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	4b13      	ldr	r3, [pc, #76]	@ (800a6ec <Game_Play_ROBOT_1+0x1c4>)
 800a6a0:	701a      	strb	r2, [r3, #0]
	//_Shoot_Ball
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	ecbd 8b02 	vpop	{d8}
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20000670 	.word	0x20000670
 800a6b4:	20000834 	.word	0x20000834
 800a6b8:	0800ee60 	.word	0x0800ee60
 800a6bc:	20000849 	.word	0x20000849
 800a6c0:	20000688 	.word	0x20000688
 800a6c4:	20000844 	.word	0x20000844
 800a6c8:	20000854 	.word	0x20000854
 800a6cc:	20000851 	.word	0x20000851
 800a6d0:	2000084c 	.word	0x2000084c
 800a6d4:	2000083c 	.word	0x2000083c
 800a6d8:	fffffc18 	.word	0xfffffc18
 800a6dc:	0800ee48 	.word	0x0800ee48
 800a6e0:	20000841 	.word	0x20000841
 800a6e4:	c3070000 	.word	0xc3070000
 800a6e8:	20000838 	.word	0x20000838
 800a6ec:	20000840 	.word	0x20000840

0800a6f0 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a6fa:	edc7 0a02 	vstr	s1, [r7, #8]
 800a6fe:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 800a702:	4a07      	ldr	r2, [pc, #28]	@ (800a720 <Setup_Inverse_Kinematic+0x30>)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800a708:	4a06      	ldr	r2, [pc, #24]	@ (800a724 <Setup_Inverse_Kinematic+0x34>)
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 800a70e:	4a06      	ldr	r2, [pc, #24]	@ (800a728 <Setup_Inverse_Kinematic+0x38>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6013      	str	r3, [r2, #0]
}
 800a714:	bf00      	nop
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	20000858 	.word	0x20000858
 800a724:	2000085c 	.word	0x2000085c
 800a728:	20000860 	.word	0x20000860

0800a72c <Inverse_Kinematic_Lock_Direction>:
}




void Inverse_Kinematic_Lock_Direction(float Vx ,float Vy ,float wz ,float head_ing){
 800a72c:	b5b0      	push	{r4, r5, r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	ed87 0a03 	vstr	s0, [r7, #12]
 800a736:	edc7 0a02 	vstr	s1, [r7, #8]
 800a73a:	ed87 1a01 	vstr	s2, [r7, #4]
 800a73e:	edc7 1a00 	vstr	s3, [r7]
	_r = (float)(sqrt((Vx * Vx) + (Vy * Vy)));
 800a742:	edd7 7a03 	vldr	s15, [r7, #12]
 800a746:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a74a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a74e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a752:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a756:	ee17 0a90 	vmov	r0, s15
 800a75a:	f7f5 fe99 	bl	8000490 <__aeabi_f2d>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	ec43 2b10 	vmov	d0, r2, r3
 800a766:	f002 ff57 	bl	800d618 <sqrt>
 800a76a:	ec53 2b10 	vmov	r2, r3, d0
 800a76e:	4610      	mov	r0, r2
 800a770:	4619      	mov	r1, r3
 800a772:	f7f6 f9bd 	bl	8000af0 <__aeabi_d2f>
 800a776:	4603      	mov	r3, r0
 800a778:	4a71      	ldr	r2, [pc, #452]	@ (800a940 <Inverse_Kinematic_Lock_Direction+0x214>)
 800a77a:	6013      	str	r3, [r2, #0]
    _Rad_s = (float)(atan2(Vy, Vx)) + head_ing;
 800a77c:	68b8      	ldr	r0, [r7, #8]
 800a77e:	f7f5 fe87 	bl	8000490 <__aeabi_f2d>
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7f5 fe82 	bl	8000490 <__aeabi_f2d>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	ec43 2b11 	vmov	d1, r2, r3
 800a794:	ec45 4b10 	vmov	d0, r4, r5
 800a798:	f002 ff3c 	bl	800d614 <atan2>
 800a79c:	ec53 2b10 	vmov	r2, r3, d0
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	f7f6 f9a4 	bl	8000af0 <__aeabi_d2f>
 800a7a8:	ee07 0a10 	vmov	s14, r0
 800a7ac:	edd7 7a00 	vldr	s15, [r7]
 800a7b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7b4:	4b63      	ldr	r3, [pc, #396]	@ (800a944 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a7b6:	edc3 7a00 	vstr	s15, [r3]

    __Vx = (_r * cos(_Rad_s));
 800a7ba:	4b61      	ldr	r3, [pc, #388]	@ (800a940 <Inverse_Kinematic_Lock_Direction+0x214>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f5 fe66 	bl	8000490 <__aeabi_f2d>
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	4b5e      	ldr	r3, [pc, #376]	@ (800a944 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f5 fe5f 	bl	8000490 <__aeabi_f2d>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	ec43 2b10 	vmov	d0, r2, r3
 800a7da:	f002 ff49 	bl	800d670 <cos>
 800a7de:	ec53 2b10 	vmov	r2, r3, d0
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	f7f5 feab 	bl	8000540 <__aeabi_dmul>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f7f6 f97d 	bl	8000af0 <__aeabi_d2f>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4a53      	ldr	r2, [pc, #332]	@ (800a948 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a7fa:	6013      	str	r3, [r2, #0]
    __Vy = (_r * sin(_Rad_s));
 800a7fc:	4b50      	ldr	r3, [pc, #320]	@ (800a940 <Inverse_Kinematic_Lock_Direction+0x214>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4618      	mov	r0, r3
 800a802:	f7f5 fe45 	bl	8000490 <__aeabi_f2d>
 800a806:	4604      	mov	r4, r0
 800a808:	460d      	mov	r5, r1
 800a80a:	4b4e      	ldr	r3, [pc, #312]	@ (800a944 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7f5 fe3e 	bl	8000490 <__aeabi_f2d>
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	ec43 2b10 	vmov	d0, r2, r3
 800a81c:	f002 ff7c 	bl	800d718 <sin>
 800a820:	ec53 2b10 	vmov	r2, r3, d0
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f7f5 fe8a 	bl	8000540 <__aeabi_dmul>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4610      	mov	r0, r2
 800a832:	4619      	mov	r1, r3
 800a834:	f7f6 f95c 	bl	8000af0 <__aeabi_d2f>
 800a838:	4603      	mov	r3, r0
 800a83a:	4a44      	ldr	r2, [pc, #272]	@ (800a94c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a83c:	6013      	str	r3, [r2, #0]

	w_LF = (__Vx - __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a83e:	4b42      	ldr	r3, [pc, #264]	@ (800a948 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a840:	ed93 7a00 	vldr	s14, [r3]
 800a844:	4b41      	ldr	r3, [pc, #260]	@ (800a94c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a846:	edd3 7a00 	vldr	s15, [r3]
 800a84a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a84e:	4b40      	ldr	r3, [pc, #256]	@ (800a950 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a850:	edd3 6a00 	vldr	s13, [r3]
 800a854:	4b3f      	ldr	r3, [pc, #252]	@ (800a954 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a856:	edd3 7a00 	vldr	s15, [r3]
 800a85a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a85e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a866:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a86a:	4b3b      	ldr	r3, [pc, #236]	@ (800a958 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a86c:	ed93 7a00 	vldr	s14, [r3]
 800a870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a874:	4b39      	ldr	r3, [pc, #228]	@ (800a95c <Inverse_Kinematic_Lock_Direction+0x230>)
 800a876:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(__Vx + __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a87a:	4b33      	ldr	r3, [pc, #204]	@ (800a948 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a87c:	ed93 7a00 	vldr	s14, [r3]
 800a880:	4b32      	ldr	r3, [pc, #200]	@ (800a94c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a882:	edd3 7a00 	vldr	s15, [r3]
 800a886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a88a:	4b31      	ldr	r3, [pc, #196]	@ (800a950 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a88c:	edd3 6a00 	vldr	s13, [r3]
 800a890:	4b30      	ldr	r3, [pc, #192]	@ (800a954 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a892:	edd3 7a00 	vldr	s15, [r3]
 800a896:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a89a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a89e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8a6:	eef1 6a67 	vneg.f32	s13, s15
 800a8aa:	4b2b      	ldr	r3, [pc, #172]	@ (800a958 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a8ac:	ed93 7a00 	vldr	s14, [r3]
 800a8b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b4:	4b2a      	ldr	r3, [pc, #168]	@ (800a960 <Inverse_Kinematic_Lock_Direction+0x234>)
 800a8b6:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (__Vx + __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a8ba:	4b23      	ldr	r3, [pc, #140]	@ (800a948 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a8bc:	ed93 7a00 	vldr	s14, [r3]
 800a8c0:	4b22      	ldr	r3, [pc, #136]	@ (800a94c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a8c2:	edd3 7a00 	vldr	s15, [r3]
 800a8c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8ca:	4b21      	ldr	r3, [pc, #132]	@ (800a950 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a8cc:	edd3 6a00 	vldr	s13, [r3]
 800a8d0:	4b20      	ldr	r3, [pc, #128]	@ (800a954 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a8d2:	edd3 7a00 	vldr	s15, [r3]
 800a8d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a8da:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a8e6:	4b1c      	ldr	r3, [pc, #112]	@ (800a958 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a8e8:	ed93 7a00 	vldr	s14, [r3]
 800a8ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a964 <Inverse_Kinematic_Lock_Direction+0x238>)
 800a8f2:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(__Vx - __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a8f6:	4b14      	ldr	r3, [pc, #80]	@ (800a948 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a8f8:	ed93 7a00 	vldr	s14, [r3]
 800a8fc:	4b13      	ldr	r3, [pc, #76]	@ (800a94c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a8fe:	edd3 7a00 	vldr	s15, [r3]
 800a902:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a906:	4b12      	ldr	r3, [pc, #72]	@ (800a950 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a908:	edd3 6a00 	vldr	s13, [r3]
 800a90c:	4b11      	ldr	r3, [pc, #68]	@ (800a954 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a90e:	edd3 7a00 	vldr	s15, [r3]
 800a912:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a916:	edd7 7a01 	vldr	s15, [r7, #4]
 800a91a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a91e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a922:	eef1 6a67 	vneg.f32	s13, s15
 800a926:	4b0c      	ldr	r3, [pc, #48]	@ (800a958 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a928:	ed93 7a00 	vldr	s14, [r3]
 800a92c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a930:	4b0d      	ldr	r3, [pc, #52]	@ (800a968 <Inverse_Kinematic_Lock_Direction+0x23c>)
 800a932:	edc3 7a00 	vstr	s15, [r3]
}
 800a936:	bf00      	nop
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bdb0      	pop	{r4, r5, r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000874 	.word	0x20000874
 800a944:	20000878 	.word	0x20000878
 800a948:	2000087c 	.word	0x2000087c
 800a94c:	20000880 	.word	0x20000880
 800a950:	20000858 	.word	0x20000858
 800a954:	2000085c 	.word	0x2000085c
 800a958:	20000860 	.word	0x20000860
 800a95c:	20000864 	.word	0x20000864
 800a960:	2000086c 	.word	0x2000086c
 800a964:	20000868 	.word	0x20000868
 800a968:	20000870 	.word	0x20000870

0800a96c <get_w_LF>:

float get_w_LF(){
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
	return w_LF;
 800a970:	4b04      	ldr	r3, [pc, #16]	@ (800a984 <get_w_LF+0x18>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	ee07 3a90 	vmov	s15, r3
}
 800a978:	eeb0 0a67 	vmov.f32	s0, s15
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	20000864 	.word	0x20000864

0800a988 <get_w_LB>:

float get_w_LB(){
 800a988:	b480      	push	{r7}
 800a98a:	af00      	add	r7, sp, #0
	return w_LB;
 800a98c:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <get_w_LB+0x18>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	ee07 3a90 	vmov	s15, r3
}
 800a994:	eeb0 0a67 	vmov.f32	s0, s15
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	20000868 	.word	0x20000868

0800a9a4 <get_w_RF>:

float get_w_RF(){
 800a9a4:	b480      	push	{r7}
 800a9a6:	af00      	add	r7, sp, #0
	return w_RF;
 800a9a8:	4b04      	ldr	r3, [pc, #16]	@ (800a9bc <get_w_RF+0x18>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	ee07 3a90 	vmov	s15, r3
}
 800a9b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	2000086c 	.word	0x2000086c

0800a9c0 <get_w_RB>:

float get_w_RB(){
 800a9c0:	b480      	push	{r7}
 800a9c2:	af00      	add	r7, sp, #0
	return w_RB;
 800a9c4:	4b04      	ldr	r3, [pc, #16]	@ (800a9d8 <get_w_RB+0x18>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	ee07 3a90 	vmov	s15, r3
}
 800a9cc:	eeb0 0a67 	vmov.f32	s0, s15
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	20000870 	.word	0x20000870

0800a9dc <Setup_Ramp_Count>:
float _Ki_degree;
float _Kd_degree;
float _max_Count;
float _DutyCycle_MAX;

void Setup_Ramp_Count(float Kp_Count ,float Ki_Count ,float Kd_Count,float max_Count ,float DutyCycle_MAX){
 800a9dc:	b480      	push	{r7}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	ed87 0a05 	vstr	s0, [r7, #20]
 800a9e6:	edc7 0a04 	vstr	s1, [r7, #16]
 800a9ea:	ed87 1a03 	vstr	s2, [r7, #12]
 800a9ee:	edc7 1a02 	vstr	s3, [r7, #8]
 800a9f2:	ed87 2a01 	vstr	s4, [r7, #4]
	_Kp_degree = Kp_Count;
 800a9f6:	4a0a      	ldr	r2, [pc, #40]	@ (800aa20 <Setup_Ramp_Count+0x44>)
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	6013      	str	r3, [r2, #0]
	_Ki_degree = Ki_Count;
 800a9fc:	4a09      	ldr	r2, [pc, #36]	@ (800aa24 <Setup_Ramp_Count+0x48>)
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	6013      	str	r3, [r2, #0]
	_Kd_degree = Kd_Count;
 800aa02:	4a09      	ldr	r2, [pc, #36]	@ (800aa28 <Setup_Ramp_Count+0x4c>)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6013      	str	r3, [r2, #0]
	_max_Count = max_Count;
 800aa08:	4a08      	ldr	r2, [pc, #32]	@ (800aa2c <Setup_Ramp_Count+0x50>)
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	6013      	str	r3, [r2, #0]
	_DutyCycle_MAX = DutyCycle_MAX;
 800aa0e:	4a08      	ldr	r2, [pc, #32]	@ (800aa30 <Setup_Ramp_Count+0x54>)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6013      	str	r3, [r2, #0]
}
 800aa14:	bf00      	nop
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	2000088c 	.word	0x2000088c
 800aa24:	20000890 	.word	0x20000890
 800aa28:	20000894 	.word	0x20000894
 800aa2c:	20000898 	.word	0x20000898
 800aa30:	2000089c 	.word	0x2000089c

0800aa34 <Count_to_degree>:

float Count_to_degree(int32_t Count){
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	return (Count * (360.0f/_max_Count));
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa46:	4b08      	ldr	r3, [pc, #32]	@ (800aa68 <Count_to_degree+0x34>)
 800aa48:	edd3 6a00 	vldr	s13, [r3]
 800aa4c:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800aa6c <Count_to_degree+0x38>
 800aa50:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800aa54:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800aa58:	eeb0 0a67 	vmov.f32	s0, s15
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20000898 	.word	0x20000898
 800aa6c:	43b40000 	.word	0x43b40000

0800aa70 <Degree_to_Count>:

float Degree_to_Count(float Degree){
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	ed87 0a01 	vstr	s0, [r7, #4]
	return (Degree * (_max_Count/360.0f));
 800aa7a:	4b09      	ldr	r3, [pc, #36]	@ (800aaa0 <Degree_to_Count+0x30>)
 800aa7c:	edd3 7a00 	vldr	s15, [r3]
 800aa80:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800aaa4 <Degree_to_Count+0x34>
 800aa84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800aa88:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa8c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800aa90:	eeb0 0a67 	vmov.f32	s0, s15
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20000898 	.word	0x20000898
 800aaa4:	43b40000 	.word	0x43b40000

0800aaa8 <Ramp_Count>:
float Proportiona_degree = 0.0f;
float Integnator_degree = 0.0f;
float Derivative_degree = 0.0f;
float Past_Error_degree = 0.0f;

int16_t Ramp_Count(float Set_degree ,float degree){
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	ed87 0a01 	vstr	s0, [r7, #4]
 800aab2:	edc7 0a00 	vstr	s1, [r7]
	Error_degree = Set_degree - degree;
 800aab6:	ed97 7a01 	vldr	s14, [r7, #4]
 800aaba:	edd7 7a00 	vldr	s15, [r7]
 800aabe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aac2:	4b30      	ldr	r3, [pc, #192]	@ (800ab84 <Ramp_Count+0xdc>)
 800aac4:	edc3 7a00 	vstr	s15, [r3]
	Proportiona_degree = Error_degree;
 800aac8:	4b2e      	ldr	r3, [pc, #184]	@ (800ab84 <Ramp_Count+0xdc>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a2e      	ldr	r2, [pc, #184]	@ (800ab88 <Ramp_Count+0xe0>)
 800aace:	6013      	str	r3, [r2, #0]
	Integnator_degree += Error_degree;
 800aad0:	4b2e      	ldr	r3, [pc, #184]	@ (800ab8c <Ramp_Count+0xe4>)
 800aad2:	ed93 7a00 	vldr	s14, [r3]
 800aad6:	4b2b      	ldr	r3, [pc, #172]	@ (800ab84 <Ramp_Count+0xdc>)
 800aad8:	edd3 7a00 	vldr	s15, [r3]
 800aadc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aae0:	4b2a      	ldr	r3, [pc, #168]	@ (800ab8c <Ramp_Count+0xe4>)
 800aae2:	edc3 7a00 	vstr	s15, [r3]
	Derivative_degree = Error_degree - Past_Error_degree;
 800aae6:	4b27      	ldr	r3, [pc, #156]	@ (800ab84 <Ramp_Count+0xdc>)
 800aae8:	ed93 7a00 	vldr	s14, [r3]
 800aaec:	4b28      	ldr	r3, [pc, #160]	@ (800ab90 <Ramp_Count+0xe8>)
 800aaee:	edd3 7a00 	vldr	s15, [r3]
 800aaf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaf6:	4b27      	ldr	r3, [pc, #156]	@ (800ab94 <Ramp_Count+0xec>)
 800aaf8:	edc3 7a00 	vstr	s15, [r3]

	Past_Error_degree = Error_degree;
 800aafc:	4b21      	ldr	r3, [pc, #132]	@ (800ab84 <Ramp_Count+0xdc>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a23      	ldr	r2, [pc, #140]	@ (800ab90 <Ramp_Count+0xe8>)
 800ab02:	6013      	str	r3, [r2, #0]

	_V_degree = (Proportiona_degree * _Kp_degree) + (Integnator_degree * _Ki_degree) + (Derivative_degree * _Kd_degree);
 800ab04:	4b20      	ldr	r3, [pc, #128]	@ (800ab88 <Ramp_Count+0xe0>)
 800ab06:	ed93 7a00 	vldr	s14, [r3]
 800ab0a:	4b23      	ldr	r3, [pc, #140]	@ (800ab98 <Ramp_Count+0xf0>)
 800ab0c:	edd3 7a00 	vldr	s15, [r3]
 800ab10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab14:	4b1d      	ldr	r3, [pc, #116]	@ (800ab8c <Ramp_Count+0xe4>)
 800ab16:	edd3 6a00 	vldr	s13, [r3]
 800ab1a:	4b20      	ldr	r3, [pc, #128]	@ (800ab9c <Ramp_Count+0xf4>)
 800ab1c:	edd3 7a00 	vldr	s15, [r3]
 800ab20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab24:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab28:	4b1a      	ldr	r3, [pc, #104]	@ (800ab94 <Ramp_Count+0xec>)
 800ab2a:	edd3 6a00 	vldr	s13, [r3]
 800ab2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aba0 <Ramp_Count+0xf8>)
 800ab30:	edd3 7a00 	vldr	s15, [r3]
 800ab34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab3c:	4b19      	ldr	r3, [pc, #100]	@ (800aba4 <Ramp_Count+0xfc>)
 800ab3e:	edc3 7a00 	vstr	s15, [r3]

	_DutyCycle = Degree_to_Count(_V_degree) * (_DutyCycle_MAX/_max_Count);
 800ab42:	4b18      	ldr	r3, [pc, #96]	@ (800aba4 <Ramp_Count+0xfc>)
 800ab44:	edd3 7a00 	vldr	s15, [r3]
 800ab48:	eeb0 0a67 	vmov.f32	s0, s15
 800ab4c:	f7ff ff90 	bl	800aa70 <Degree_to_Count>
 800ab50:	eeb0 6a40 	vmov.f32	s12, s0
 800ab54:	4b14      	ldr	r3, [pc, #80]	@ (800aba8 <Ramp_Count+0x100>)
 800ab56:	edd3 6a00 	vldr	s13, [r3]
 800ab5a:	4b14      	ldr	r3, [pc, #80]	@ (800abac <Ramp_Count+0x104>)
 800ab5c:	ed93 7a00 	vldr	s14, [r3]
 800ab60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab64:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ab68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab6c:	ee17 3a90 	vmov	r3, s15
 800ab70:	b21a      	sxth	r2, r3
 800ab72:	4b0f      	ldr	r3, [pc, #60]	@ (800abb0 <Ramp_Count+0x108>)
 800ab74:	801a      	strh	r2, [r3, #0]
	return _DutyCycle;
 800ab76:	4b0e      	ldr	r3, [pc, #56]	@ (800abb0 <Ramp_Count+0x108>)
 800ab78:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	200008a0 	.word	0x200008a0
 800ab88:	200008a4 	.word	0x200008a4
 800ab8c:	200008a8 	.word	0x200008a8
 800ab90:	200008b0 	.word	0x200008b0
 800ab94:	200008ac 	.word	0x200008ac
 800ab98:	2000088c 	.word	0x2000088c
 800ab9c:	20000890 	.word	0x20000890
 800aba0:	20000894 	.word	0x20000894
 800aba4:	20000884 	.word	0x20000884
 800aba8:	2000089c 	.word	0x2000089c
 800abac:	20000898 	.word	0x20000898
 800abb0:	20000888 	.word	0x20000888

0800abb4 <UART_Runner>:

uint8_t Status_UART;

UART_HandleTypeDef *UART;

uint8_t UART_Runner(UART_HandleTypeDef *UART){
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
	if (((uwTick - last_uart_data_time) < UART_TIMEOUT_MS)
 800abbc:	4b32      	ldr	r3, [pc, #200]	@ (800ac88 <UART_Runner+0xd4>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	4b32      	ldr	r3, [pc, #200]	@ (800ac8c <UART_Runner+0xd8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	1ad2      	subs	r2, r2, r3
 800abc6:	4b32      	ldr	r3, [pc, #200]	@ (800ac90 <UART_Runner+0xdc>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d211      	bcs.n	800abf2 <UART_Runner+0x3e>
			&& (Str_PS2.Header[0] == 'R') && (Str_PS2.Header[1] == 'B')) {
 800abce:	4b31      	ldr	r3, [pc, #196]	@ (800ac94 <UART_Runner+0xe0>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	2b52      	cmp	r3, #82	@ 0x52
 800abd4:	d10d      	bne.n	800abf2 <UART_Runner+0x3e>
 800abd6:	4b2f      	ldr	r3, [pc, #188]	@ (800ac94 <UART_Runner+0xe0>)
 800abd8:	785b      	ldrb	r3, [r3, #1]
 800abda:	2b42      	cmp	r3, #66	@ 0x42
 800abdc:	d109      	bne.n	800abf2 <UART_Runner+0x3e>
		Status_UART = 1;
 800abde:	4b2e      	ldr	r3, [pc, #184]	@ (800ac98 <UART_Runner+0xe4>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	701a      	strb	r2, [r3, #0]

		Str_PS2.Header[0] = 0;
 800abe4:	4b2b      	ldr	r3, [pc, #172]	@ (800ac94 <UART_Runner+0xe0>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
		Str_PS2.Header[1] = 0;
 800abea:	4b2a      	ldr	r3, [pc, #168]	@ (800ac94 <UART_Runner+0xe0>)
 800abec:	2200      	movs	r2, #0
 800abee:	705a      	strb	r2, [r3, #1]
 800abf0:	e043      	b.n	800ac7a <UART_Runner+0xc6>
	} else {
		if (!uart_resetting && ((uwTick - last_uart_data_time) > UART_TIMEOUT_MS)) {
 800abf2:	4b2a      	ldr	r3, [pc, #168]	@ (800ac9c <UART_Runner+0xe8>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d13f      	bne.n	800ac7a <UART_Runner+0xc6>
 800abfa:	4b23      	ldr	r3, [pc, #140]	@ (800ac88 <UART_Runner+0xd4>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4b23      	ldr	r3, [pc, #140]	@ (800ac8c <UART_Runner+0xd8>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	1ad2      	subs	r2, r2, r3
 800ac04:	4b22      	ldr	r3, [pc, #136]	@ (800ac90 <UART_Runner+0xdc>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d936      	bls.n	800ac7a <UART_Runner+0xc6>
			uart_resetting = 1;
 800ac0c:	4b23      	ldr	r3, [pc, #140]	@ (800ac9c <UART_Runner+0xe8>)
 800ac0e:	2201      	movs	r2, #1
 800ac10:	701a      	strb	r2, [r3, #0]

			HAL_UART_DeInit(UART);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7fb fdca 	bl	80067ac <HAL_UART_DeInit>
			HAL_Delay(10);
 800ac18:	200a      	movs	r0, #10
 800ac1a:	f7f7 ff57 	bl	8002acc <HAL_Delay>

			UART->Instance = USART2;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a1f      	ldr	r2, [pc, #124]	@ (800aca0 <UART_Runner+0xec>)
 800ac22:	601a      	str	r2, [r3, #0]
			UART->Init.BaudRate = 115200;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ac2a:	605a      	str	r2, [r3, #4]
			UART->Init.WordLength = UART_WORDLENGTH_8B;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	609a      	str	r2, [r3, #8]
			UART->Init.StopBits = UART_STOPBITS_1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	60da      	str	r2, [r3, #12]
			UART->Init.Parity = UART_PARITY_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	611a      	str	r2, [r3, #16]
			UART->Init.Mode = UART_MODE_TX_RX;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	220c      	movs	r2, #12
 800ac42:	615a      	str	r2, [r3, #20]
			UART->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	619a      	str	r2, [r3, #24]
			UART->Init.OverSampling = UART_OVERSAMPLING_16;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	61da      	str	r2, [r3, #28]
			if (HAL_UART_Init(UART) != HAL_OK) {
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7fb fd5b 	bl	800670c <HAL_UART_Init>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <UART_Runner+0xac>
				Error_Handler();
 800ac5c:	f7f7 f93a 	bl	8001ed4 <Error_Handler>
			}

			HAL_UART_Receive_IT(UART, (uint8_t*) &Str_PS2, sizeof(Str_PS2));
 800ac60:	2208      	movs	r2, #8
 800ac62:	490c      	ldr	r1, [pc, #48]	@ (800ac94 <UART_Runner+0xe0>)
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7fb fdd3 	bl	8006810 <HAL_UART_Receive_IT>

			memset(&Str_PS2, 0, sizeof(Str_PS2));
 800ac6a:	2208      	movs	r2, #8
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4809      	ldr	r0, [pc, #36]	@ (800ac94 <UART_Runner+0xe0>)
 800ac70:	f002 fc9e 	bl	800d5b0 <memset>

			Status_UART = 0;
 800ac74:	4b08      	ldr	r3, [pc, #32]	@ (800ac98 <UART_Runner+0xe4>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	701a      	strb	r2, [r3, #0]
		}
	}
	return Status_UART;
 800ac7a:	4b07      	ldr	r3, [pc, #28]	@ (800ac98 <UART_Runner+0xe4>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20000688 	.word	0x20000688
 800ac8c:	200008b4 	.word	0x200008b4
 800ac90:	20000018 	.word	0x20000018
 800ac94:	20000670 	.word	0x20000670
 800ac98:	200008b9 	.word	0x200008b9
 800ac9c:	200008b8 	.word	0x200008b8
 800aca0:	40004400 	.word	0x40004400

0800aca4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acb0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800acb4:	f002 fc38 	bl	800d528 <USBD_static_malloc>
 800acb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d109      	bne.n	800acd4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	32b0      	adds	r2, #176	@ 0xb0
 800acca:	2100      	movs	r1, #0
 800accc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800acd0:	2302      	movs	r3, #2
 800acd2:	e0d4      	b.n	800ae7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800acd4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800acd8:	2100      	movs	r1, #0
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f002 fc68 	bl	800d5b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	32b0      	adds	r2, #176	@ 0xb0
 800acea:	68f9      	ldr	r1, [r7, #12]
 800acec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	32b0      	adds	r2, #176	@ 0xb0
 800acfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	7c1b      	ldrb	r3, [r3, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d138      	bne.n	800ad7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad0c:	4b5e      	ldr	r3, [pc, #376]	@ (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad0e:	7819      	ldrb	r1, [r3, #0]
 800ad10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad14:	2202      	movs	r2, #2
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f002 fae3 	bl	800d2e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad1c:	4b5a      	ldr	r3, [pc, #360]	@ (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	f003 020f 	and.w	r2, r3, #15
 800ad24:	6879      	ldr	r1, [r7, #4]
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	440b      	add	r3, r1
 800ad30:	3324      	adds	r3, #36	@ 0x24
 800ad32:	2201      	movs	r2, #1
 800ad34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad36:	4b55      	ldr	r3, [pc, #340]	@ (800ae8c <USBD_CDC_Init+0x1e8>)
 800ad38:	7819      	ldrb	r1, [r3, #0]
 800ad3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad3e:	2202      	movs	r2, #2
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f002 face 	bl	800d2e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad46:	4b51      	ldr	r3, [pc, #324]	@ (800ae8c <USBD_CDC_Init+0x1e8>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 020f 	and.w	r2, r3, #15
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	440b      	add	r3, r1
 800ad5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad5e:	2201      	movs	r2, #1
 800ad60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad62:	4b4b      	ldr	r3, [pc, #300]	@ (800ae90 <USBD_CDC_Init+0x1ec>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	f003 020f 	and.w	r2, r3, #15
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	440b      	add	r3, r1
 800ad76:	3326      	adds	r3, #38	@ 0x26
 800ad78:	2210      	movs	r2, #16
 800ad7a:	801a      	strh	r2, [r3, #0]
 800ad7c:	e035      	b.n	800adea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad7e:	4b42      	ldr	r3, [pc, #264]	@ (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad80:	7819      	ldrb	r1, [r3, #0]
 800ad82:	2340      	movs	r3, #64	@ 0x40
 800ad84:	2202      	movs	r2, #2
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f002 faab 	bl	800d2e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad8c:	4b3e      	ldr	r3, [pc, #248]	@ (800ae88 <USBD_CDC_Init+0x1e4>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	f003 020f 	and.w	r2, r3, #15
 800ad94:	6879      	ldr	r1, [r7, #4]
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	440b      	add	r3, r1
 800ada0:	3324      	adds	r3, #36	@ 0x24
 800ada2:	2201      	movs	r2, #1
 800ada4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ada6:	4b39      	ldr	r3, [pc, #228]	@ (800ae8c <USBD_CDC_Init+0x1e8>)
 800ada8:	7819      	ldrb	r1, [r3, #0]
 800adaa:	2340      	movs	r3, #64	@ 0x40
 800adac:	2202      	movs	r2, #2
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f002 fa97 	bl	800d2e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adb4:	4b35      	ldr	r3, [pc, #212]	@ (800ae8c <USBD_CDC_Init+0x1e8>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	f003 020f 	and.w	r2, r3, #15
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adcc:	2201      	movs	r2, #1
 800adce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800add0:	4b2f      	ldr	r3, [pc, #188]	@ (800ae90 <USBD_CDC_Init+0x1ec>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	f003 020f 	and.w	r2, r3, #15
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	4613      	mov	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	440b      	add	r3, r1
 800ade4:	3326      	adds	r3, #38	@ 0x26
 800ade6:	2210      	movs	r2, #16
 800ade8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800adea:	4b29      	ldr	r3, [pc, #164]	@ (800ae90 <USBD_CDC_Init+0x1ec>)
 800adec:	7819      	ldrb	r1, [r3, #0]
 800adee:	2308      	movs	r3, #8
 800adf0:	2203      	movs	r2, #3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f002 fa75 	bl	800d2e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800adf8:	4b25      	ldr	r3, [pc, #148]	@ (800ae90 <USBD_CDC_Init+0x1ec>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 020f 	and.w	r2, r3, #15
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	3324      	adds	r3, #36	@ 0x24
 800ae0e:	2201      	movs	r2, #1
 800ae10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	33b0      	adds	r3, #176	@ 0xb0
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e018      	b.n	800ae7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	7c1b      	ldrb	r3, [r3, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae54:	4b0d      	ldr	r3, [pc, #52]	@ (800ae8c <USBD_CDC_Init+0x1e8>)
 800ae56:	7819      	ldrb	r1, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f002 fb2c 	bl	800d4c0 <USBD_LL_PrepareReceive>
 800ae68:	e008      	b.n	800ae7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae6a:	4b08      	ldr	r3, [pc, #32]	@ (800ae8c <USBD_CDC_Init+0x1e8>)
 800ae6c:	7819      	ldrb	r1, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae74:	2340      	movs	r3, #64	@ 0x40
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f002 fb22 	bl	800d4c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	200000a3 	.word	0x200000a3
 800ae8c:	200000a4 	.word	0x200000a4
 800ae90:	200000a5 	.word	0x200000a5

0800ae94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aea0:	4b3a      	ldr	r3, [pc, #232]	@ (800af8c <USBD_CDC_DeInit+0xf8>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f002 fa41 	bl	800d32e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aeac:	4b37      	ldr	r3, [pc, #220]	@ (800af8c <USBD_CDC_DeInit+0xf8>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	440b      	add	r3, r1
 800aec0:	3324      	adds	r3, #36	@ 0x24
 800aec2:	2200      	movs	r2, #0
 800aec4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aec6:	4b32      	ldr	r3, [pc, #200]	@ (800af90 <USBD_CDC_DeInit+0xfc>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f002 fa2e 	bl	800d32e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aed2:	4b2f      	ldr	r3, [pc, #188]	@ (800af90 <USBD_CDC_DeInit+0xfc>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	f003 020f 	and.w	r2, r3, #15
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aeea:	2200      	movs	r2, #0
 800aeec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aeee:	4b29      	ldr	r3, [pc, #164]	@ (800af94 <USBD_CDC_DeInit+0x100>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f002 fa1a 	bl	800d32e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aefa:	4b26      	ldr	r3, [pc, #152]	@ (800af94 <USBD_CDC_DeInit+0x100>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	f003 020f 	and.w	r2, r3, #15
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	3324      	adds	r3, #36	@ 0x24
 800af10:	2200      	movs	r2, #0
 800af12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af14:	4b1f      	ldr	r3, [pc, #124]	@ (800af94 <USBD_CDC_DeInit+0x100>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 020f 	and.w	r2, r3, #15
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	4613      	mov	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	440b      	add	r3, r1
 800af28:	3326      	adds	r3, #38	@ 0x26
 800af2a:	2200      	movs	r2, #0
 800af2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	32b0      	adds	r2, #176	@ 0xb0
 800af38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01f      	beq.n	800af80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	33b0      	adds	r3, #176	@ 0xb0
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	32b0      	adds	r2, #176	@ 0xb0
 800af5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af62:	4618      	mov	r0, r3
 800af64:	f002 faee 	bl	800d544 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	32b0      	adds	r2, #176	@ 0xb0
 800af72:	2100      	movs	r1, #0
 800af74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200000a3 	.word	0x200000a3
 800af90:	200000a4 	.word	0x200000a4
 800af94:	200000a5 	.word	0x200000a5

0800af98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	32b0      	adds	r2, #176	@ 0xb0
 800afac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e0bf      	b.n	800b148 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d050      	beq.n	800b076 <USBD_CDC_Setup+0xde>
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	f040 80af 	bne.w	800b138 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	88db      	ldrh	r3, [r3, #6]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d03a      	beq.n	800b058 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	b25b      	sxtb	r3, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	da1b      	bge.n	800b024 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	33b0      	adds	r3, #176	@ 0xb0
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b002:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	88d2      	ldrh	r2, [r2, #6]
 800b008:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	88db      	ldrh	r3, [r3, #6]
 800b00e:	2b07      	cmp	r3, #7
 800b010:	bf28      	it	cs
 800b012:	2307      	movcs	r3, #7
 800b014:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	89fa      	ldrh	r2, [r7, #14]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 fd53 	bl	800cac8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b022:	e090      	b.n	800b146 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	785a      	ldrb	r2, [r3, #1]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	88db      	ldrh	r3, [r3, #6]
 800b032:	2b3f      	cmp	r3, #63	@ 0x3f
 800b034:	d803      	bhi.n	800b03e <USBD_CDC_Setup+0xa6>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	88db      	ldrh	r3, [r3, #6]
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	e000      	b.n	800b040 <USBD_CDC_Setup+0xa8>
 800b03e:	2240      	movs	r2, #64	@ 0x40
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b046:	6939      	ldr	r1, [r7, #16]
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b04e:	461a      	mov	r2, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f001 fd65 	bl	800cb20 <USBD_CtlPrepareRx>
      break;
 800b056:	e076      	b.n	800b146 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	33b0      	adds	r3, #176	@ 0xb0
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	7850      	ldrb	r0, [r2, #1]
 800b06e:	2200      	movs	r2, #0
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	4798      	blx	r3
      break;
 800b074:	e067      	b.n	800b146 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	2b0b      	cmp	r3, #11
 800b07c:	d851      	bhi.n	800b122 <USBD_CDC_Setup+0x18a>
 800b07e:	a201      	add	r2, pc, #4	@ (adr r2, 800b084 <USBD_CDC_Setup+0xec>)
 800b080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b084:	0800b0b5 	.word	0x0800b0b5
 800b088:	0800b131 	.word	0x0800b131
 800b08c:	0800b123 	.word	0x0800b123
 800b090:	0800b123 	.word	0x0800b123
 800b094:	0800b123 	.word	0x0800b123
 800b098:	0800b123 	.word	0x0800b123
 800b09c:	0800b123 	.word	0x0800b123
 800b0a0:	0800b123 	.word	0x0800b123
 800b0a4:	0800b123 	.word	0x0800b123
 800b0a8:	0800b123 	.word	0x0800b123
 800b0ac:	0800b0df 	.word	0x0800b0df
 800b0b0:	0800b109 	.word	0x0800b109
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d107      	bne.n	800b0d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0c0:	f107 030a 	add.w	r3, r7, #10
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 fcfd 	bl	800cac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0ce:	e032      	b.n	800b136 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f001 fc7b 	bl	800c9ce <USBD_CtlError>
            ret = USBD_FAIL;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	75fb      	strb	r3, [r7, #23]
          break;
 800b0dc:	e02b      	b.n	800b136 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d107      	bne.n	800b0fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0ea:	f107 030d 	add.w	r3, r7, #13
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 fce8 	bl	800cac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0f8:	e01d      	b.n	800b136 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 fc66 	bl	800c9ce <USBD_CtlError>
            ret = USBD_FAIL;
 800b102:	2303      	movs	r3, #3
 800b104:	75fb      	strb	r3, [r7, #23]
          break;
 800b106:	e016      	b.n	800b136 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b03      	cmp	r3, #3
 800b112:	d00f      	beq.n	800b134 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 fc59 	bl	800c9ce <USBD_CtlError>
            ret = USBD_FAIL;
 800b11c:	2303      	movs	r3, #3
 800b11e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b120:	e008      	b.n	800b134 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 fc52 	bl	800c9ce <USBD_CtlError>
          ret = USBD_FAIL;
 800b12a:	2303      	movs	r3, #3
 800b12c:	75fb      	strb	r3, [r7, #23]
          break;
 800b12e:	e002      	b.n	800b136 <USBD_CDC_Setup+0x19e>
          break;
 800b130:	bf00      	nop
 800b132:	e008      	b.n	800b146 <USBD_CDC_Setup+0x1ae>
          break;
 800b134:	bf00      	nop
      }
      break;
 800b136:	e006      	b.n	800b146 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 fc47 	bl	800c9ce <USBD_CtlError>
      ret = USBD_FAIL;
 800b140:	2303      	movs	r3, #3
 800b142:	75fb      	strb	r3, [r7, #23]
      break;
 800b144:	bf00      	nop
  }

  return (uint8_t)ret;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b162:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32b0      	adds	r2, #176	@ 0xb0
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b176:	2303      	movs	r3, #3
 800b178:	e065      	b.n	800b246 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	32b0      	adds	r2, #176	@ 0xb0
 800b184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b188:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b18a:	78fb      	ldrb	r3, [r7, #3]
 800b18c:	f003 020f 	and.w	r2, r3, #15
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	4613      	mov	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	440b      	add	r3, r1
 800b19c:	3318      	adds	r3, #24
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d02f      	beq.n	800b204 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	f003 020f 	and.w	r2, r3, #15
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	3318      	adds	r3, #24
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	f003 010f 	and.w	r1, r3, #15
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	00db      	lsls	r3, r3, #3
 800b1c6:	440b      	add	r3, r1
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4403      	add	r3, r0
 800b1cc:	331c      	adds	r3, #28
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d112      	bne.n	800b204 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	f003 020f 	and.w	r2, r3, #15
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3318      	adds	r3, #24
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1f6:	78f9      	ldrb	r1, [r7, #3]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f002 f93e 	bl	800d47e <USBD_LL_Transmit>
 800b202:	e01f      	b.n	800b244 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	33b0      	adds	r3, #176	@ 0xb0
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d010      	beq.n	800b244 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	33b0      	adds	r3, #176	@ 0xb0
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b240:	78fa      	ldrb	r2, [r7, #3]
 800b242:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	460b      	mov	r3, r1
 800b258:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	32b0      	adds	r2, #176	@ 0xb0
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	32b0      	adds	r2, #176	@ 0xb0
 800b274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e01a      	b.n	800b2b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b280:	78fb      	ldrb	r3, [r7, #3]
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 f93c 	bl	800d502 <USBD_LL_GetRxDataSize>
 800b28a:	4602      	mov	r2, r0
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	33b0      	adds	r3, #176	@ 0xb0
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	32b0      	adds	r2, #176	@ 0xb0
 800b2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d101      	bne.n	800b2e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e024      	b.n	800b32a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	33b0      	adds	r3, #176	@ 0xb0
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d019      	beq.n	800b328 <USBD_CDC_EP0_RxReady+0x6a>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b2fa:	2bff      	cmp	r3, #255	@ 0xff
 800b2fc:	d014      	beq.n	800b328 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	33b0      	adds	r3, #176	@ 0xb0
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b316:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b31e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	22ff      	movs	r2, #255	@ 0xff
 800b324:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b33c:	2182      	movs	r1, #130	@ 0x82
 800b33e:	4818      	ldr	r0, [pc, #96]	@ (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b340:	f000 fd0f 	bl	800bd62 <USBD_GetEpDesc>
 800b344:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b346:	2101      	movs	r1, #1
 800b348:	4815      	ldr	r0, [pc, #84]	@ (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b34a:	f000 fd0a 	bl	800bd62 <USBD_GetEpDesc>
 800b34e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b350:	2181      	movs	r1, #129	@ 0x81
 800b352:	4813      	ldr	r0, [pc, #76]	@ (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b354:	f000 fd05 	bl	800bd62 <USBD_GetEpDesc>
 800b358:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2210      	movs	r2, #16
 800b364:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d006      	beq.n	800b37a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2200      	movs	r2, #0
 800b370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b374:	711a      	strb	r2, [r3, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d006      	beq.n	800b38e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b388:	711a      	strb	r2, [r3, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2243      	movs	r2, #67	@ 0x43
 800b392:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b394:	4b02      	ldr	r3, [pc, #8]	@ (800b3a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20000060 	.word	0x20000060

0800b3a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3ac:	2182      	movs	r1, #130	@ 0x82
 800b3ae:	4818      	ldr	r0, [pc, #96]	@ (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3b0:	f000 fcd7 	bl	800bd62 <USBD_GetEpDesc>
 800b3b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4815      	ldr	r0, [pc, #84]	@ (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3ba:	f000 fcd2 	bl	800bd62 <USBD_GetEpDesc>
 800b3be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3c0:	2181      	movs	r1, #129	@ 0x81
 800b3c2:	4813      	ldr	r0, [pc, #76]	@ (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3c4:	f000 fccd 	bl	800bd62 <USBD_GetEpDesc>
 800b3c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	711a      	strb	r2, [r3, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f042 0202 	orr.w	r2, r2, #2
 800b3e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d006      	beq.n	800b3fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	711a      	strb	r2, [r3, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f042 0202 	orr.w	r2, r2, #2
 800b3fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2243      	movs	r2, #67	@ 0x43
 800b402:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b404:	4b02      	ldr	r3, [pc, #8]	@ (800b410 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	20000060 	.word	0x20000060

0800b414 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b41c:	2182      	movs	r1, #130	@ 0x82
 800b41e:	4818      	ldr	r0, [pc, #96]	@ (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b420:	f000 fc9f 	bl	800bd62 <USBD_GetEpDesc>
 800b424:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b426:	2101      	movs	r1, #1
 800b428:	4815      	ldr	r0, [pc, #84]	@ (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b42a:	f000 fc9a 	bl	800bd62 <USBD_GetEpDesc>
 800b42e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b430:	2181      	movs	r1, #129	@ 0x81
 800b432:	4813      	ldr	r0, [pc, #76]	@ (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b434:	f000 fc95 	bl	800bd62 <USBD_GetEpDesc>
 800b438:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2210      	movs	r2, #16
 800b444:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	2200      	movs	r2, #0
 800b450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b454:	711a      	strb	r2, [r3, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b468:	711a      	strb	r2, [r3, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2243      	movs	r2, #67	@ 0x43
 800b472:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b474:	4b02      	ldr	r3, [pc, #8]	@ (800b480 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000060 	.word	0x20000060

0800b484 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	220a      	movs	r2, #10
 800b490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b492:	4b03      	ldr	r3, [pc, #12]	@ (800b4a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b494:	4618      	mov	r0, r3
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	2000001c 	.word	0x2000001c

0800b4a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e009      	b.n	800b4cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	33b0      	adds	r3, #176	@ 0xb0
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	32b0      	adds	r2, #176	@ 0xb0
 800b4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e008      	b.n	800b510 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	371c      	adds	r7, #28
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	32b0      	adds	r2, #176	@ 0xb0
 800b530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d101      	bne.n	800b540 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e004      	b.n	800b54a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	32b0      	adds	r2, #176	@ 0xb0
 800b56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	32b0      	adds	r2, #176	@ 0xb0
 800b57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b582:	2303      	movs	r3, #3
 800b584:	e018      	b.n	800b5b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	7c1b      	ldrb	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <USBD_CDC_ReceivePacket+0x68>)
 800b590:	7819      	ldrb	r1, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 ff8f 	bl	800d4c0 <USBD_LL_PrepareReceive>
 800b5a2:	e008      	b.n	800b5b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b5a4:	4b06      	ldr	r3, [pc, #24]	@ (800b5c0 <USBD_CDC_ReceivePacket+0x68>)
 800b5a6:	7819      	ldrb	r1, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5ae:	2340      	movs	r3, #64	@ 0x40
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 ff85 	bl	800d4c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	200000a4 	.word	0x200000a4

0800b5c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e01f      	b.n	800b61c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	79fa      	ldrb	r2, [r7, #7]
 800b60e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f001 fdff 	bl	800d214 <USBD_LL_Init>
 800b616:	4603      	mov	r3, r0
 800b618:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	e025      	b.n	800b688 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	32ae      	adds	r2, #174	@ 0xae
 800b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00f      	beq.n	800b678 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	32ae      	adds	r2, #174	@ 0xae
 800b662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b668:	f107 020e 	add.w	r2, r7, #14
 800b66c:	4610      	mov	r0, r2
 800b66e:	4798      	blx	r3
 800b670:	4602      	mov	r2, r0
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f001 fe07 	bl	800d2ac <USBD_LL_Start>
 800b69e:	4603      	mov	r3, r0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d009      	beq.n	800b6ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	78fa      	ldrb	r2, [r7, #3]
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	4798      	blx	r3
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	78fa      	ldrb	r2, [r7, #3]
 800b710:	4611      	mov	r1, r2
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	4798      	blx	r3
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b71c:	2303      	movs	r3, #3
 800b71e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b720:	7bfb      	ldrb	r3, [r7, #15]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b084      	sub	sp, #16
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f001 f90c 	bl	800c95a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b750:	461a      	mov	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b75e:	f003 031f 	and.w	r3, r3, #31
 800b762:	2b02      	cmp	r3, #2
 800b764:	d01a      	beq.n	800b79c <USBD_LL_SetupStage+0x72>
 800b766:	2b02      	cmp	r3, #2
 800b768:	d822      	bhi.n	800b7b0 <USBD_LL_SetupStage+0x86>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <USBD_LL_SetupStage+0x4a>
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d00a      	beq.n	800b788 <USBD_LL_SetupStage+0x5e>
 800b772:	e01d      	b.n	800b7b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b77a:	4619      	mov	r1, r3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 fb63 	bl	800be48 <USBD_StdDevReq>
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]
      break;
 800b786:	e020      	b.n	800b7ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fbcb 	bl	800bf2c <USBD_StdItfReq>
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]
      break;
 800b79a:	e016      	b.n	800b7ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fc2d 	bl	800c004 <USBD_StdEPReq>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ae:	e00c      	b.n	800b7ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f001 fdd4 	bl	800d36c <USBD_LL_StallEP>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c8:	bf00      	nop
  }

  return ret;
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d16e      	bne.n	800b8ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b7f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	f040 8098 	bne.w	800b930 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d913      	bls.n	800b834 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	689a      	ldr	r2, [r3, #8]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	1ad2      	subs	r2, r2, r3
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	68da      	ldr	r2, [r3, #12]
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	4293      	cmp	r3, r2
 800b824:	bf28      	it	cs
 800b826:	4613      	movcs	r3, r2
 800b828:	461a      	mov	r2, r3
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f001 f994 	bl	800cb5a <USBD_CtlContinueRx>
 800b832:	e07d      	b.n	800b930 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b83a:	f003 031f 	and.w	r3, r3, #31
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d014      	beq.n	800b86c <USBD_LL_DataOutStage+0x98>
 800b842:	2b02      	cmp	r3, #2
 800b844:	d81d      	bhi.n	800b882 <USBD_LL_DataOutStage+0xae>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <USBD_LL_DataOutStage+0x7c>
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d003      	beq.n	800b856 <USBD_LL_DataOutStage+0x82>
 800b84e:	e018      	b.n	800b882 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	75bb      	strb	r3, [r7, #22]
            break;
 800b854:	e018      	b.n	800b888 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	4619      	mov	r1, r3
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fa64 	bl	800bd2e <USBD_CoreFindIF>
 800b866:	4603      	mov	r3, r0
 800b868:	75bb      	strb	r3, [r7, #22]
            break;
 800b86a:	e00d      	b.n	800b888 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b872:	b2db      	uxtb	r3, r3
 800b874:	4619      	mov	r1, r3
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f000 fa66 	bl	800bd48 <USBD_CoreFindEP>
 800b87c:	4603      	mov	r3, r0
 800b87e:	75bb      	strb	r3, [r7, #22]
            break;
 800b880:	e002      	b.n	800b888 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	75bb      	strb	r3, [r7, #22]
            break;
 800b886:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b888:	7dbb      	ldrb	r3, [r7, #22]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d119      	bne.n	800b8c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b03      	cmp	r3, #3
 800b898:	d113      	bne.n	800b8c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b89a:	7dba      	ldrb	r2, [r7, #22]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	32ae      	adds	r2, #174	@ 0xae
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b8aa:	7dba      	ldrb	r2, [r7, #22]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b8b2:	7dba      	ldrb	r2, [r7, #22]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	32ae      	adds	r2, #174	@ 0xae
 800b8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f001 f95a 	bl	800cb7c <USBD_CtlSendStatus>
 800b8c8:	e032      	b.n	800b930 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b8ca:	7afb      	ldrb	r3, [r7, #11]
 800b8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 fa37 	bl	800bd48 <USBD_CoreFindEP>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8de:	7dbb      	ldrb	r3, [r7, #22]
 800b8e0:	2bff      	cmp	r3, #255	@ 0xff
 800b8e2:	d025      	beq.n	800b930 <USBD_LL_DataOutStage+0x15c>
 800b8e4:	7dbb      	ldrb	r3, [r7, #22]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d122      	bne.n	800b930 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d117      	bne.n	800b926 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8f6:	7dba      	ldrb	r2, [r7, #22]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	32ae      	adds	r2, #174	@ 0xae
 800b8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00f      	beq.n	800b926 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b906:	7dba      	ldrb	r2, [r7, #22]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b90e:	7dba      	ldrb	r2, [r7, #22]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	32ae      	adds	r2, #174	@ 0xae
 800b914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	7afa      	ldrb	r2, [r7, #11]
 800b91c:	4611      	mov	r1, r2
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	4798      	blx	r3
 800b922:	4603      	mov	r3, r0
 800b924:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	e000      	b.n	800b932 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b086      	sub	sp, #24
 800b93e:	af00      	add	r7, sp, #0
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	460b      	mov	r3, r1
 800b944:	607a      	str	r2, [r7, #4]
 800b946:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b948:	7afb      	ldrb	r3, [r7, #11]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d16f      	bne.n	800ba2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3314      	adds	r3, #20
 800b952:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d15a      	bne.n	800ba14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	689a      	ldr	r2, [r3, #8]
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	429a      	cmp	r2, r3
 800b968:	d914      	bls.n	800b994 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	689a      	ldr	r2, [r3, #8]
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	1ad2      	subs	r2, r2, r3
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	461a      	mov	r2, r3
 800b97e:	6879      	ldr	r1, [r7, #4]
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f001 f8bc 	bl	800cafe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b986:	2300      	movs	r3, #0
 800b988:	2200      	movs	r2, #0
 800b98a:	2100      	movs	r1, #0
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f001 fd97 	bl	800d4c0 <USBD_LL_PrepareReceive>
 800b992:	e03f      	b.n	800ba14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	68da      	ldr	r2, [r3, #12]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d11c      	bne.n	800b9da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d316      	bcc.n	800b9da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d20f      	bcs.n	800b9da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f001 f89d 	bl	800cafe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f001 fd74 	bl	800d4c0 <USBD_LL_PrepareReceive>
 800b9d8:	e01c      	b.n	800ba14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d10f      	bne.n	800ba06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d009      	beq.n	800ba06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba06:	2180      	movs	r1, #128	@ 0x80
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f001 fcaf 	bl	800d36c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f001 f8c7 	bl	800cba2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d03a      	beq.n	800ba94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fe42 	bl	800b6a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ba2c:	e032      	b.n	800ba94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba2e:	7afb      	ldrb	r3, [r7, #11]
 800ba30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	4619      	mov	r1, r3
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 f985 	bl	800bd48 <USBD_CoreFindEP>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	2bff      	cmp	r3, #255	@ 0xff
 800ba46:	d025      	beq.n	800ba94 <USBD_LL_DataInStage+0x15a>
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d122      	bne.n	800ba94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d11c      	bne.n	800ba94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba5a:	7dfa      	ldrb	r2, [r7, #23]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	32ae      	adds	r2, #174	@ 0xae
 800ba60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d014      	beq.n	800ba94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba6a:	7dfa      	ldrb	r2, [r7, #23]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba72:	7dfa      	ldrb	r2, [r7, #23]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	32ae      	adds	r2, #174	@ 0xae
 800ba78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	7afa      	ldrb	r2, [r7, #11]
 800ba80:	4611      	mov	r1, r2
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	4798      	blx	r3
 800ba86:	4603      	mov	r3, r0
 800ba88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba8a:	7dbb      	ldrb	r3, [r7, #22]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba90:	7dbb      	ldrb	r3, [r7, #22]
 800ba92:	e000      	b.n	800ba96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3718      	adds	r7, #24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d014      	beq.n	800bb04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00e      	beq.n	800bb04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	6852      	ldr	r2, [r2, #4]
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	4611      	mov	r1, r2
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	4798      	blx	r3
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb00:	2303      	movs	r3, #3
 800bb02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb04:	2340      	movs	r3, #64	@ 0x40
 800bb06:	2200      	movs	r2, #0
 800bb08:	2100      	movs	r1, #0
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 fbe9 	bl	800d2e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2240      	movs	r2, #64	@ 0x40
 800bb1c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb20:	2340      	movs	r3, #64	@ 0x40
 800bb22:	2200      	movs	r2, #0
 800bb24:	2180      	movs	r1, #128	@ 0x80
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f001 fbdb 	bl	800d2e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2240      	movs	r2, #64	@ 0x40
 800bb36:	621a      	str	r2, [r3, #32]

  return ret;
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	78fa      	ldrb	r2, [r7, #3]
 800bb52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d006      	beq.n	800bb84 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2204      	movs	r2, #4
 800bb88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b04      	cmp	r3, #4
 800bbac:	d106      	bne.n	800bbbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d110      	bne.n	800bc00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00b      	beq.n	800bc00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbfa:	69db      	ldr	r3, [r3, #28]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	32ae      	adds	r2, #174	@ 0xae
 800bc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e01c      	b.n	800bc66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d115      	bne.n	800bc64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	32ae      	adds	r2, #174	@ 0xae
 800bc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc46:	6a1b      	ldr	r3, [r3, #32]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	32ae      	adds	r2, #174	@ 0xae
 800bc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	78fa      	ldrb	r2, [r7, #3]
 800bc5e:	4611      	mov	r1, r2
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	460b      	mov	r3, r1
 800bc78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	32ae      	adds	r2, #174	@ 0xae
 800bc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e01c      	b.n	800bcca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d115      	bne.n	800bcc8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	32ae      	adds	r2, #174	@ 0xae
 800bca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	32ae      	adds	r2, #174	@ 0xae
 800bcba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc0:	78fa      	ldrb	r2, [r7, #3]
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b083      	sub	sp, #12
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00e      	beq.n	800bd24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	6852      	ldr	r2, [r2, #4]
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	4611      	mov	r1, r2
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	4798      	blx	r3
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd20:	2303      	movs	r3, #3
 800bd22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	370c      	adds	r7, #12
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b086      	sub	sp, #24
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	885b      	ldrh	r3, [r3, #2]
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	7812      	ldrb	r2, [r2, #0]
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d91f      	bls.n	800bdc8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd8e:	e013      	b.n	800bdb8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd90:	f107 030a 	add.w	r3, r7, #10
 800bd94:	4619      	mov	r1, r3
 800bd96:	6978      	ldr	r0, [r7, #20]
 800bd98:	f000 f81b 	bl	800bdd2 <USBD_GetNextDesc>
 800bd9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	785b      	ldrb	r3, [r3, #1]
 800bda2:	2b05      	cmp	r3, #5
 800bda4:	d108      	bne.n	800bdb8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	789b      	ldrb	r3, [r3, #2]
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d008      	beq.n	800bdc6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	885b      	ldrh	r3, [r3, #2]
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	897b      	ldrh	r3, [r7, #10]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d8e5      	bhi.n	800bd90 <USBD_GetEpDesc+0x2e>
 800bdc4:	e000      	b.n	800bdc8 <USBD_GetEpDesc+0x66>
          break;
 800bdc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bdc8:	693b      	ldr	r3, [r7, #16]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3718      	adds	r7, #24
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b085      	sub	sp, #20
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	4413      	add	r3, r2
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3714      	adds	r7, #20
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b087      	sub	sp, #28
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	3301      	adds	r3, #1
 800be20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be28:	8a3b      	ldrh	r3, [r7, #16]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	b21a      	sxth	r2, r3
 800be2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be32:	4313      	orrs	r3, r2
 800be34:	b21b      	sxth	r3, r3
 800be36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be38:	89fb      	ldrh	r3, [r7, #14]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
	...

0800be48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be5e:	2b40      	cmp	r3, #64	@ 0x40
 800be60:	d005      	beq.n	800be6e <USBD_StdDevReq+0x26>
 800be62:	2b40      	cmp	r3, #64	@ 0x40
 800be64:	d857      	bhi.n	800bf16 <USBD_StdDevReq+0xce>
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00f      	beq.n	800be8a <USBD_StdDevReq+0x42>
 800be6a:	2b20      	cmp	r3, #32
 800be6c:	d153      	bne.n	800bf16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	32ae      	adds	r2, #174	@ 0xae
 800be78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	4798      	blx	r3
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]
      break;
 800be88:	e04a      	b.n	800bf20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	785b      	ldrb	r3, [r3, #1]
 800be8e:	2b09      	cmp	r3, #9
 800be90:	d83b      	bhi.n	800bf0a <USBD_StdDevReq+0xc2>
 800be92:	a201      	add	r2, pc, #4	@ (adr r2, 800be98 <USBD_StdDevReq+0x50>)
 800be94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be98:	0800beed 	.word	0x0800beed
 800be9c:	0800bf01 	.word	0x0800bf01
 800bea0:	0800bf0b 	.word	0x0800bf0b
 800bea4:	0800bef7 	.word	0x0800bef7
 800bea8:	0800bf0b 	.word	0x0800bf0b
 800beac:	0800becb 	.word	0x0800becb
 800beb0:	0800bec1 	.word	0x0800bec1
 800beb4:	0800bf0b 	.word	0x0800bf0b
 800beb8:	0800bee3 	.word	0x0800bee3
 800bebc:	0800bed5 	.word	0x0800bed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa3c 	bl	800c340 <USBD_GetDescriptor>
          break;
 800bec8:	e024      	b.n	800bf14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fba1 	bl	800c614 <USBD_SetAddress>
          break;
 800bed2:	e01f      	b.n	800bf14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fbe0 	bl	800c69c <USBD_SetConfig>
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
          break;
 800bee0:	e018      	b.n	800bf14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fc83 	bl	800c7f0 <USBD_GetConfig>
          break;
 800beea:	e013      	b.n	800bf14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fcb4 	bl	800c85c <USBD_GetStatus>
          break;
 800bef4:	e00e      	b.n	800bf14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fce3 	bl	800c8c4 <USBD_SetFeature>
          break;
 800befe:	e009      	b.n	800bf14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fd07 	bl	800c916 <USBD_ClrFeature>
          break;
 800bf08:	e004      	b.n	800bf14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fd5e 	bl	800c9ce <USBD_CtlError>
          break;
 800bf12:	bf00      	nop
      }
      break;
 800bf14:	e004      	b.n	800bf20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fd58 	bl	800c9ce <USBD_CtlError>
      break;
 800bf1e:	bf00      	nop
  }

  return ret;
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop

0800bf2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf42:	2b40      	cmp	r3, #64	@ 0x40
 800bf44:	d005      	beq.n	800bf52 <USBD_StdItfReq+0x26>
 800bf46:	2b40      	cmp	r3, #64	@ 0x40
 800bf48:	d852      	bhi.n	800bff0 <USBD_StdItfReq+0xc4>
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <USBD_StdItfReq+0x26>
 800bf4e:	2b20      	cmp	r3, #32
 800bf50:	d14e      	bne.n	800bff0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d840      	bhi.n	800bfe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	889b      	ldrh	r3, [r3, #4]
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d836      	bhi.n	800bfd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	889b      	ldrh	r3, [r3, #4]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff fedb 	bl	800bd2e <USBD_CoreFindIF>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
 800bf7e:	2bff      	cmp	r3, #255	@ 0xff
 800bf80:	d01d      	beq.n	800bfbe <USBD_StdItfReq+0x92>
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d11a      	bne.n	800bfbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf88:	7bba      	ldrb	r2, [r7, #14]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	32ae      	adds	r2, #174	@ 0xae
 800bf8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00f      	beq.n	800bfb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf98:	7bba      	ldrb	r2, [r7, #14]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfa0:	7bba      	ldrb	r2, [r7, #14]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	32ae      	adds	r2, #174	@ 0xae
 800bfa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	4798      	blx	r3
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfb6:	e004      	b.n	800bfc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfbc:	e001      	b.n	800bfc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	88db      	ldrh	r3, [r3, #6]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d110      	bne.n	800bfec <USBD_StdItfReq+0xc0>
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10d      	bne.n	800bfec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 fdd3 	bl	800cb7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfd6:	e009      	b.n	800bfec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fcf7 	bl	800c9ce <USBD_CtlError>
          break;
 800bfe0:	e004      	b.n	800bfec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fcf2 	bl	800c9ce <USBD_CtlError>
          break;
 800bfea:	e000      	b.n	800bfee <USBD_StdItfReq+0xc2>
          break;
 800bfec:	bf00      	nop
      }
      break;
 800bfee:	e004      	b.n	800bffa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fceb 	bl	800c9ce <USBD_CtlError>
      break;
 800bff8:	bf00      	nop
  }

  return ret;
 800bffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	889b      	ldrh	r3, [r3, #4]
 800c016:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c020:	2b40      	cmp	r3, #64	@ 0x40
 800c022:	d007      	beq.n	800c034 <USBD_StdEPReq+0x30>
 800c024:	2b40      	cmp	r3, #64	@ 0x40
 800c026:	f200 817f 	bhi.w	800c328 <USBD_StdEPReq+0x324>
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d02a      	beq.n	800c084 <USBD_StdEPReq+0x80>
 800c02e:	2b20      	cmp	r3, #32
 800c030:	f040 817a 	bne.w	800c328 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff fe85 	bl	800bd48 <USBD_CoreFindEP>
 800c03e:	4603      	mov	r3, r0
 800c040:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c042:	7b7b      	ldrb	r3, [r7, #13]
 800c044:	2bff      	cmp	r3, #255	@ 0xff
 800c046:	f000 8174 	beq.w	800c332 <USBD_StdEPReq+0x32e>
 800c04a:	7b7b      	ldrb	r3, [r7, #13]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f040 8170 	bne.w	800c332 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c052:	7b7a      	ldrb	r2, [r7, #13]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c05a:	7b7a      	ldrb	r2, [r7, #13]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	32ae      	adds	r2, #174	@ 0xae
 800c060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 8163 	beq.w	800c332 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c06c:	7b7a      	ldrb	r2, [r7, #13]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	32ae      	adds	r2, #174	@ 0xae
 800c072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	4798      	blx	r3
 800c07e:	4603      	mov	r3, r0
 800c080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c082:	e156      	b.n	800c332 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d008      	beq.n	800c09e <USBD_StdEPReq+0x9a>
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	f300 8145 	bgt.w	800c31c <USBD_StdEPReq+0x318>
 800c092:	2b00      	cmp	r3, #0
 800c094:	f000 809b 	beq.w	800c1ce <USBD_StdEPReq+0x1ca>
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d03c      	beq.n	800c116 <USBD_StdEPReq+0x112>
 800c09c:	e13e      	b.n	800c31c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d002      	beq.n	800c0b0 <USBD_StdEPReq+0xac>
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d016      	beq.n	800c0dc <USBD_StdEPReq+0xd8>
 800c0ae:	e02c      	b.n	800c10a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00d      	beq.n	800c0d2 <USBD_StdEPReq+0xce>
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	2b80      	cmp	r3, #128	@ 0x80
 800c0ba:	d00a      	beq.n	800c0d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 f953 	bl	800d36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0c6:	2180      	movs	r1, #128	@ 0x80
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f001 f94f 	bl	800d36c <USBD_LL_StallEP>
 800c0ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0d0:	e020      	b.n	800c114 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fc7a 	bl	800c9ce <USBD_CtlError>
              break;
 800c0da:	e01b      	b.n	800c114 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	885b      	ldrh	r3, [r3, #2]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10e      	bne.n	800c102 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00b      	beq.n	800c102 <USBD_StdEPReq+0xfe>
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	2b80      	cmp	r3, #128	@ 0x80
 800c0ee:	d008      	beq.n	800c102 <USBD_StdEPReq+0xfe>
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	88db      	ldrh	r3, [r3, #6]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d104      	bne.n	800c102 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f001 f935 	bl	800d36c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fd3a 	bl	800cb7c <USBD_CtlSendStatus>

              break;
 800c108:	e004      	b.n	800c114 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fc5e 	bl	800c9ce <USBD_CtlError>
              break;
 800c112:	bf00      	nop
          }
          break;
 800c114:	e107      	b.n	800c326 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d002      	beq.n	800c128 <USBD_StdEPReq+0x124>
 800c122:	2b03      	cmp	r3, #3
 800c124:	d016      	beq.n	800c154 <USBD_StdEPReq+0x150>
 800c126:	e04b      	b.n	800c1c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00d      	beq.n	800c14a <USBD_StdEPReq+0x146>
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b80      	cmp	r3, #128	@ 0x80
 800c132:	d00a      	beq.n	800c14a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 f917 	bl	800d36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c13e:	2180      	movs	r1, #128	@ 0x80
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 f913 	bl	800d36c <USBD_LL_StallEP>
 800c146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c148:	e040      	b.n	800c1cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fc3e 	bl	800c9ce <USBD_CtlError>
              break;
 800c152:	e03b      	b.n	800c1cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	885b      	ldrh	r3, [r3, #2]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d136      	bne.n	800c1ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c162:	2b00      	cmp	r3, #0
 800c164:	d004      	beq.n	800c170 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c166:	7bbb      	ldrb	r3, [r7, #14]
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f001 f91d 	bl	800d3aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fd03 	bl	800cb7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c176:	7bbb      	ldrb	r3, [r7, #14]
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff fde4 	bl	800bd48 <USBD_CoreFindEP>
 800c180:	4603      	mov	r3, r0
 800c182:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c184:	7b7b      	ldrb	r3, [r7, #13]
 800c186:	2bff      	cmp	r3, #255	@ 0xff
 800c188:	d01f      	beq.n	800c1ca <USBD_StdEPReq+0x1c6>
 800c18a:	7b7b      	ldrb	r3, [r7, #13]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11c      	bne.n	800c1ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c190:	7b7a      	ldrb	r2, [r7, #13]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c198:	7b7a      	ldrb	r2, [r7, #13]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	32ae      	adds	r2, #174	@ 0xae
 800c19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d010      	beq.n	800c1ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1a8:	7b7a      	ldrb	r2, [r7, #13]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	32ae      	adds	r2, #174	@ 0xae
 800c1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	4798      	blx	r3
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c1be:	e004      	b.n	800c1ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fc03 	bl	800c9ce <USBD_CtlError>
              break;
 800c1c8:	e000      	b.n	800c1cc <USBD_StdEPReq+0x1c8>
              break;
 800c1ca:	bf00      	nop
          }
          break;
 800c1cc:	e0ab      	b.n	800c326 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d002      	beq.n	800c1e0 <USBD_StdEPReq+0x1dc>
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d032      	beq.n	800c244 <USBD_StdEPReq+0x240>
 800c1de:	e097      	b.n	800c310 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d007      	beq.n	800c1f6 <USBD_StdEPReq+0x1f2>
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	2b80      	cmp	r3, #128	@ 0x80
 800c1ea:	d004      	beq.n	800c1f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fbed 	bl	800c9ce <USBD_CtlError>
                break;
 800c1f4:	e091      	b.n	800c31a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	da0b      	bge.n	800c216 <USBD_StdEPReq+0x212>
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
 800c200:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	3310      	adds	r3, #16
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	4413      	add	r3, r2
 800c212:	3304      	adds	r3, #4
 800c214:	e00b      	b.n	800c22e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	4413      	add	r3, r2
 800c22c:	3304      	adds	r3, #4
 800c22e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2202      	movs	r2, #2
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fc43 	bl	800cac8 <USBD_CtlSendData>
              break;
 800c242:	e06a      	b.n	800c31a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	da11      	bge.n	800c270 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	f003 020f 	and.w	r2, r3, #15
 800c252:	6879      	ldr	r1, [r7, #4]
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	440b      	add	r3, r1
 800c25e:	3324      	adds	r3, #36	@ 0x24
 800c260:	881b      	ldrh	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d117      	bne.n	800c296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fbb0 	bl	800c9ce <USBD_CtlError>
                  break;
 800c26e:	e054      	b.n	800c31a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	f003 020f 	and.w	r2, r3, #15
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	440b      	add	r3, r1
 800c282:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d104      	bne.n	800c296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fb9d 	bl	800c9ce <USBD_CtlError>
                  break;
 800c294:	e041      	b.n	800c31a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	da0b      	bge.n	800c2b6 <USBD_StdEPReq+0x2b2>
 800c29e:	7bbb      	ldrb	r3, [r7, #14]
 800c2a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4413      	add	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	3310      	adds	r3, #16
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	3304      	adds	r3, #4
 800c2b4:	e00b      	b.n	800c2ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2b6:	7bbb      	ldrb	r3, [r7, #14]
 800c2b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2d0:	7bbb      	ldrb	r3, [r7, #14]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <USBD_StdEPReq+0x2d8>
 800c2d6:	7bbb      	ldrb	r3, [r7, #14]
 800c2d8:	2b80      	cmp	r3, #128	@ 0x80
 800c2da:	d103      	bne.n	800c2e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	e00e      	b.n	800c302 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f001 f87d 	bl	800d3e8 <USBD_LL_IsStallEP>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d003      	beq.n	800c2fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	e002      	b.n	800c302 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2200      	movs	r2, #0
 800c300:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2202      	movs	r2, #2
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fbdd 	bl	800cac8 <USBD_CtlSendData>
              break;
 800c30e:	e004      	b.n	800c31a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fb5b 	bl	800c9ce <USBD_CtlError>
              break;
 800c318:	bf00      	nop
          }
          break;
 800c31a:	e004      	b.n	800c326 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fb55 	bl	800c9ce <USBD_CtlError>
          break;
 800c324:	bf00      	nop
      }
      break;
 800c326:	e005      	b.n	800c334 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fb4f 	bl	800c9ce <USBD_CtlError>
      break;
 800c330:	e000      	b.n	800c334 <USBD_StdEPReq+0x330>
      break;
 800c332:	bf00      	nop
  }

  return ret;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c34a:	2300      	movs	r3, #0
 800c34c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	885b      	ldrh	r3, [r3, #2]
 800c35a:	0a1b      	lsrs	r3, r3, #8
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3b01      	subs	r3, #1
 800c360:	2b06      	cmp	r3, #6
 800c362:	f200 8128 	bhi.w	800c5b6 <USBD_GetDescriptor+0x276>
 800c366:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <USBD_GetDescriptor+0x2c>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c389 	.word	0x0800c389
 800c370:	0800c3a1 	.word	0x0800c3a1
 800c374:	0800c3e1 	.word	0x0800c3e1
 800c378:	0800c5b7 	.word	0x0800c5b7
 800c37c:	0800c5b7 	.word	0x0800c5b7
 800c380:	0800c557 	.word	0x0800c557
 800c384:	0800c583 	.word	0x0800c583
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	7c12      	ldrb	r2, [r2, #16]
 800c394:	f107 0108 	add.w	r1, r7, #8
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	60f8      	str	r0, [r7, #12]
      break;
 800c39e:	e112      	b.n	800c5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	7c1b      	ldrb	r3, [r3, #16]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10d      	bne.n	800c3c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b0:	f107 0208 	add.w	r2, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	2202      	movs	r2, #2
 800c3c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3c2:	e100      	b.n	800c5c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3cc:	f107 0208 	add.w	r2, r7, #8
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4798      	blx	r3
 800c3d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	2202      	movs	r2, #2
 800c3dc:	701a      	strb	r2, [r3, #0]
      break;
 800c3de:	e0f2      	b.n	800c5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	885b      	ldrh	r3, [r3, #2]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b05      	cmp	r3, #5
 800c3e8:	f200 80ac 	bhi.w	800c544 <USBD_GetDescriptor+0x204>
 800c3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f4 <USBD_GetDescriptor+0xb4>)
 800c3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f2:	bf00      	nop
 800c3f4:	0800c40d 	.word	0x0800c40d
 800c3f8:	0800c441 	.word	0x0800c441
 800c3fc:	0800c475 	.word	0x0800c475
 800c400:	0800c4a9 	.word	0x0800c4a9
 800c404:	0800c4dd 	.word	0x0800c4dd
 800c408:	0800c511 	.word	0x0800c511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00b      	beq.n	800c430 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	7c12      	ldrb	r2, [r2, #16]
 800c424:	f107 0108 	add.w	r1, r7, #8
 800c428:	4610      	mov	r0, r2
 800c42a:	4798      	blx	r3
 800c42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c42e:	e091      	b.n	800c554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 facb 	bl	800c9ce <USBD_CtlError>
            err++;
 800c438:	7afb      	ldrb	r3, [r7, #11]
 800c43a:	3301      	adds	r3, #1
 800c43c:	72fb      	strb	r3, [r7, #11]
          break;
 800c43e:	e089      	b.n	800c554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	4610      	mov	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c462:	e077      	b.n	800c554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fab1 	bl	800c9ce <USBD_CtlError>
            err++;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	3301      	adds	r3, #1
 800c470:	72fb      	strb	r3, [r7, #11]
          break;
 800c472:	e06f      	b.n	800c554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c496:	e05d      	b.n	800c554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fa97 	bl	800c9ce <USBD_CtlError>
            err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a6:	e055      	b.n	800c554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ca:	e043      	b.n	800c554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa7d 	bl	800c9ce <USBD_CtlError>
            err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4da:	e03b      	b.n	800c554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fe:	e029      	b.n	800c554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fa63 	bl	800c9ce <USBD_CtlError>
            err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
          break;
 800c50e:	e021      	b.n	800c554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	7c12      	ldrb	r2, [r2, #16]
 800c528:	f107 0108 	add.w	r1, r7, #8
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c532:	e00f      	b.n	800c554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fa49 	bl	800c9ce <USBD_CtlError>
            err++;
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	3301      	adds	r3, #1
 800c540:	72fb      	strb	r3, [r7, #11]
          break;
 800c542:	e007      	b.n	800c554 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fa41 	bl	800c9ce <USBD_CtlError>
          err++;
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	3301      	adds	r3, #1
 800c550:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c552:	bf00      	nop
      }
      break;
 800c554:	e037      	b.n	800c5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7c1b      	ldrb	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d109      	bne.n	800c572 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c566:	f107 0208 	add.w	r2, r7, #8
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c570:	e029      	b.n	800c5c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fa2a 	bl	800c9ce <USBD_CtlError>
        err++;
 800c57a:	7afb      	ldrb	r3, [r7, #11]
 800c57c:	3301      	adds	r3, #1
 800c57e:	72fb      	strb	r3, [r7, #11]
      break;
 800c580:	e021      	b.n	800c5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	7c1b      	ldrb	r3, [r3, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10d      	bne.n	800c5a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c592:	f107 0208 	add.w	r2, r7, #8
 800c596:	4610      	mov	r0, r2
 800c598:	4798      	blx	r3
 800c59a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5a4:	e00f      	b.n	800c5c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fa10 	bl	800c9ce <USBD_CtlError>
        err++;
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b4:	e007      	b.n	800c5c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fa08 	bl	800c9ce <USBD_CtlError>
      err++;
 800c5be:	7afb      	ldrb	r3, [r7, #11]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c5c4:	bf00      	nop
  }

  if (err != 0U)
 800c5c6:	7afb      	ldrb	r3, [r7, #11]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d11e      	bne.n	800c60a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	88db      	ldrh	r3, [r3, #6]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d016      	beq.n	800c602 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5d4:	893b      	ldrh	r3, [r7, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00e      	beq.n	800c5f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	88da      	ldrh	r2, [r3, #6]
 800c5de:	893b      	ldrh	r3, [r7, #8]
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	bf28      	it	cs
 800c5e4:	4613      	movcs	r3, r2
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ea:	893b      	ldrh	r3, [r7, #8]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fa69 	bl	800cac8 <USBD_CtlSendData>
 800c5f6:	e009      	b.n	800c60c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f9e7 	bl	800c9ce <USBD_CtlError>
 800c600:	e004      	b.n	800c60c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 faba 	bl	800cb7c <USBD_CtlSendStatus>
 800c608:	e000      	b.n	800c60c <USBD_GetDescriptor+0x2cc>
    return;
 800c60a:	bf00      	nop
  }
}
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop

0800c614 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	889b      	ldrh	r3, [r3, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d131      	bne.n	800c68a <USBD_SetAddress+0x76>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	88db      	ldrh	r3, [r3, #6]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d12d      	bne.n	800c68a <USBD_SetAddress+0x76>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	885b      	ldrh	r3, [r3, #2]
 800c632:	2b7f      	cmp	r3, #127	@ 0x7f
 800c634:	d829      	bhi.n	800c68a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	885b      	ldrh	r3, [r3, #2]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d104      	bne.n	800c658 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f9bc 	bl	800c9ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c656:	e01d      	b.n	800c694 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7bfa      	ldrb	r2, [r7, #15]
 800c65c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c660:	7bfb      	ldrb	r3, [r7, #15]
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 feeb 	bl	800d440 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fa86 	bl	800cb7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d004      	beq.n	800c680 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2202      	movs	r2, #2
 800c67a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67e:	e009      	b.n	800c694 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c688:	e004      	b.n	800c694 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f99e 	bl	800c9ce <USBD_CtlError>
  }
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	885b      	ldrh	r3, [r3, #2]
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	4b4e      	ldr	r3, [pc, #312]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6b4:	4b4d      	ldr	r3, [pc, #308]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d905      	bls.n	800c6c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f985 	bl	800c9ce <USBD_CtlError>
    return USBD_FAIL;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e08c      	b.n	800c7e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d002      	beq.n	800c6da <USBD_SetConfig+0x3e>
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d029      	beq.n	800c72c <USBD_SetConfig+0x90>
 800c6d8:	e075      	b.n	800c7c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6da:	4b44      	ldr	r3, [pc, #272]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d020      	beq.n	800c724 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6e2:	4b42      	ldr	r3, [pc, #264]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6ec:	4b3f      	ldr	r3, [pc, #252]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7fe ffe3 	bl	800b6be <USBD_SetClassConfig>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f962 	bl	800c9ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2202      	movs	r2, #2
 800c70e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c712:	e065      	b.n	800c7e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fa31 	bl	800cb7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2203      	movs	r2, #3
 800c71e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c722:	e05d      	b.n	800c7e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fa29 	bl	800cb7c <USBD_CtlSendStatus>
      break;
 800c72a:	e059      	b.n	800c7e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c72c:	4b2f      	ldr	r3, [pc, #188]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d112      	bne.n	800c75a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c73c:	4b2b      	ldr	r3, [pc, #172]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	461a      	mov	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c746:	4b29      	ldr	r3, [pc, #164]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7fe ffd2 	bl	800b6f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fa12 	bl	800cb7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c758:	e042      	b.n	800c7e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c75a:	4b24      	ldr	r3, [pc, #144]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	429a      	cmp	r2, r3
 800c766:	d02a      	beq.n	800c7be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7fe ffc0 	bl	800b6f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c776:	4b1d      	ldr	r3, [pc, #116]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c780:	4b1a      	ldr	r3, [pc, #104]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7fe ff99 	bl	800b6be <USBD_SetClassConfig>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c790:	7bfb      	ldrb	r3, [r7, #15]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00f      	beq.n	800c7b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f918 	bl	800c9ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7fe ffa5 	bl	800b6f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c7b4:	e014      	b.n	800c7e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f9e0 	bl	800cb7c <USBD_CtlSendStatus>
      break;
 800c7bc:	e010      	b.n	800c7e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f9dc 	bl	800cb7c <USBD_CtlSendStatus>
      break;
 800c7c4:	e00c      	b.n	800c7e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f900 	bl	800c9ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7ce:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <USBD_SetConfig+0x150>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7fe ff8e 	bl	800b6f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7de:	bf00      	nop
  }

  return ret;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	200008ba 	.word	0x200008ba

0800c7f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	88db      	ldrh	r3, [r3, #6]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d004      	beq.n	800c80c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f8e2 	bl	800c9ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c80a:	e023      	b.n	800c854 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b02      	cmp	r3, #2
 800c816:	dc02      	bgt.n	800c81e <USBD_GetConfig+0x2e>
 800c818:	2b00      	cmp	r3, #0
 800c81a:	dc03      	bgt.n	800c824 <USBD_GetConfig+0x34>
 800c81c:	e015      	b.n	800c84a <USBD_GetConfig+0x5a>
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d00b      	beq.n	800c83a <USBD_GetConfig+0x4a>
 800c822:	e012      	b.n	800c84a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3308      	adds	r3, #8
 800c82e:	2201      	movs	r2, #1
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f948 	bl	800cac8 <USBD_CtlSendData>
        break;
 800c838:	e00c      	b.n	800c854 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	3304      	adds	r3, #4
 800c83e:	2201      	movs	r2, #1
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f940 	bl	800cac8 <USBD_CtlSendData>
        break;
 800c848:	e004      	b.n	800c854 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f8be 	bl	800c9ce <USBD_CtlError>
        break;
 800c852:	bf00      	nop
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	3b01      	subs	r3, #1
 800c870:	2b02      	cmp	r3, #2
 800c872:	d81e      	bhi.n	800c8b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	88db      	ldrh	r3, [r3, #6]
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d004      	beq.n	800c886 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f8a5 	bl	800c9ce <USBD_CtlError>
        break;
 800c884:	e01a      	b.n	800c8bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c892:	2b00      	cmp	r3, #0
 800c894:	d005      	beq.n	800c8a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	f043 0202 	orr.w	r2, r3, #2
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f90c 	bl	800cac8 <USBD_CtlSendData>
      break;
 800c8b0:	e004      	b.n	800c8bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f88a 	bl	800c9ce <USBD_CtlError>
      break;
 800c8ba:	bf00      	nop
  }
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	885b      	ldrh	r3, [r3, #2]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d107      	bne.n	800c8e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f94c 	bl	800cb7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8e4:	e013      	b.n	800c90e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	885b      	ldrh	r3, [r3, #2]
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d10b      	bne.n	800c906 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	889b      	ldrh	r3, [r3, #4]
 800c8f2:	0a1b      	lsrs	r3, r3, #8
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f93c 	bl	800cb7c <USBD_CtlSendStatus>
}
 800c904:	e003      	b.n	800c90e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f860 	bl	800c9ce <USBD_CtlError>
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c926:	b2db      	uxtb	r3, r3
 800c928:	3b01      	subs	r3, #1
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d80b      	bhi.n	800c946 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	885b      	ldrh	r3, [r3, #2]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d10c      	bne.n	800c950 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f91c 	bl	800cb7c <USBD_CtlSendStatus>
      }
      break;
 800c944:	e004      	b.n	800c950 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f840 	bl	800c9ce <USBD_CtlError>
      break;
 800c94e:	e000      	b.n	800c952 <USBD_ClrFeature+0x3c>
      break;
 800c950:	bf00      	nop
  }
}
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	781a      	ldrb	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	781a      	ldrb	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3301      	adds	r3, #1
 800c982:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7ff fa40 	bl	800be0a <SWAPBYTE>
 800c98a:	4603      	mov	r3, r0
 800c98c:	461a      	mov	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3301      	adds	r3, #1
 800c996:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3301      	adds	r3, #1
 800c99c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f7ff fa33 	bl	800be0a <SWAPBYTE>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff fa26 	bl	800be0a <SWAPBYTE>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	80da      	strh	r2, [r3, #6]
}
 800c9c6:	bf00      	nop
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9d8:	2180      	movs	r1, #128	@ 0x80
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fcc6 	bl	800d36c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fcc2 	bl	800d36c <USBD_LL_StallEP>
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d042      	beq.n	800ca8c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ca0a:	6938      	ldr	r0, [r7, #16]
 800ca0c:	f000 f842 	bl	800ca94 <USBD_GetLen>
 800ca10:	4603      	mov	r3, r0
 800ca12:	3301      	adds	r3, #1
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca1a:	d808      	bhi.n	800ca2e <USBD_GetString+0x3e>
 800ca1c:	6938      	ldr	r0, [r7, #16]
 800ca1e:	f000 f839 	bl	800ca94 <USBD_GetLen>
 800ca22:	4603      	mov	r3, r0
 800ca24:	3301      	adds	r3, #1
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	005b      	lsls	r3, r3, #1
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	e001      	b.n	800ca32 <USBD_GetString+0x42>
 800ca2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	7812      	ldrb	r2, [r2, #0]
 800ca40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	3301      	adds	r3, #1
 800ca46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	2203      	movs	r2, #3
 800ca50:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	3301      	adds	r3, #1
 800ca56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca58:	e013      	b.n	800ca82 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	4413      	add	r3, r2
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	7812      	ldrb	r2, [r2, #0]
 800ca64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	613b      	str	r3, [r7, #16]
    idx++;
 800ca6c:	7dfb      	ldrb	r3, [r7, #23]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	4413      	add	r3, r2
 800ca78:	2200      	movs	r2, #0
 800ca7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1e7      	bne.n	800ca5a <USBD_GetString+0x6a>
 800ca8a:	e000      	b.n	800ca8e <USBD_GetString+0x9e>
    return;
 800ca8c:	bf00      	nop
  }
}
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800caa4:	e005      	b.n	800cab2 <USBD_GetLen+0x1e>
  {
    len++;
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	3301      	adds	r3, #1
 800caaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	3301      	adds	r3, #1
 800cab0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1f5      	bne.n	800caa6 <USBD_GetLen+0x12>
  }

  return len;
 800caba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2202      	movs	r2, #2
 800cad8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	2100      	movs	r1, #0
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 fcc5 	bl	800d47e <USBD_LL_Transmit>

  return USBD_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b084      	sub	sp, #16
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	60f8      	str	r0, [r7, #12]
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	2100      	movs	r1, #0
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f000 fcb4 	bl	800d47e <USBD_LL_Transmit>

  return USBD_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2203      	movs	r2, #3
 800cb30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	2100      	movs	r1, #0
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 fcb8 	bl	800d4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	60f8      	str	r0, [r7, #12]
 800cb62:	60b9      	str	r1, [r7, #8]
 800cb64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f000 fca7 	bl	800d4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2204      	movs	r2, #4
 800cb88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2100      	movs	r1, #0
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fc73 	bl	800d47e <USBD_LL_Transmit>

  return USBD_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2205      	movs	r2, #5
 800cbae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fc81 	bl	800d4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4912      	ldr	r1, [pc, #72]	@ (800cc18 <MX_USB_DEVICE_Init+0x50>)
 800cbd0:	4812      	ldr	r0, [pc, #72]	@ (800cc1c <MX_USB_DEVICE_Init+0x54>)
 800cbd2:	f7fe fcf7 	bl	800b5c4 <USBD_Init>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbdc:	f7f5 f97a 	bl	8001ed4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbe0:	490f      	ldr	r1, [pc, #60]	@ (800cc20 <MX_USB_DEVICE_Init+0x58>)
 800cbe2:	480e      	ldr	r0, [pc, #56]	@ (800cc1c <MX_USB_DEVICE_Init+0x54>)
 800cbe4:	f7fe fd1e 	bl	800b624 <USBD_RegisterClass>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbee:	f7f5 f971 	bl	8001ed4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbf2:	490c      	ldr	r1, [pc, #48]	@ (800cc24 <MX_USB_DEVICE_Init+0x5c>)
 800cbf4:	4809      	ldr	r0, [pc, #36]	@ (800cc1c <MX_USB_DEVICE_Init+0x54>)
 800cbf6:	f7fe fc55 	bl	800b4a4 <USBD_CDC_RegisterInterface>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d001      	beq.n	800cc04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc00:	f7f5 f968 	bl	8001ed4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc04:	4805      	ldr	r0, [pc, #20]	@ (800cc1c <MX_USB_DEVICE_Init+0x54>)
 800cc06:	f7fe fd43 	bl	800b690 <USBD_Start>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc10:	f7f5 f960 	bl	8001ed4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc14:	bf00      	nop
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	200000bc 	.word	0x200000bc
 800cc1c:	200008bc 	.word	0x200008bc
 800cc20:	20000028 	.word	0x20000028
 800cc24:	200000a8 	.word	0x200000a8

0800cc28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4905      	ldr	r1, [pc, #20]	@ (800cc44 <CDC_Init_FS+0x1c>)
 800cc30:	4805      	ldr	r0, [pc, #20]	@ (800cc48 <CDC_Init_FS+0x20>)
 800cc32:	f7fe fc51 	bl	800b4d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc36:	4905      	ldr	r1, [pc, #20]	@ (800cc4c <CDC_Init_FS+0x24>)
 800cc38:	4803      	ldr	r0, [pc, #12]	@ (800cc48 <CDC_Init_FS+0x20>)
 800cc3a:	f7fe fc6f 	bl	800b51c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	20001398 	.word	0x20001398
 800cc48:	200008bc 	.word	0x200008bc
 800cc4c:	20000b98 	.word	0x20000b98

0800cc50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc50:	b480      	push	{r7}
 800cc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	6039      	str	r1, [r7, #0]
 800cc6a:	71fb      	strb	r3, [r7, #7]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	2b23      	cmp	r3, #35	@ 0x23
 800cc74:	d84a      	bhi.n	800cd0c <CDC_Control_FS+0xac>
 800cc76:	a201      	add	r2, pc, #4	@ (adr r2, 800cc7c <CDC_Control_FS+0x1c>)
 800cc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7c:	0800cd0d 	.word	0x0800cd0d
 800cc80:	0800cd0d 	.word	0x0800cd0d
 800cc84:	0800cd0d 	.word	0x0800cd0d
 800cc88:	0800cd0d 	.word	0x0800cd0d
 800cc8c:	0800cd0d 	.word	0x0800cd0d
 800cc90:	0800cd0d 	.word	0x0800cd0d
 800cc94:	0800cd0d 	.word	0x0800cd0d
 800cc98:	0800cd0d 	.word	0x0800cd0d
 800cc9c:	0800cd0d 	.word	0x0800cd0d
 800cca0:	0800cd0d 	.word	0x0800cd0d
 800cca4:	0800cd0d 	.word	0x0800cd0d
 800cca8:	0800cd0d 	.word	0x0800cd0d
 800ccac:	0800cd0d 	.word	0x0800cd0d
 800ccb0:	0800cd0d 	.word	0x0800cd0d
 800ccb4:	0800cd0d 	.word	0x0800cd0d
 800ccb8:	0800cd0d 	.word	0x0800cd0d
 800ccbc:	0800cd0d 	.word	0x0800cd0d
 800ccc0:	0800cd0d 	.word	0x0800cd0d
 800ccc4:	0800cd0d 	.word	0x0800cd0d
 800ccc8:	0800cd0d 	.word	0x0800cd0d
 800cccc:	0800cd0d 	.word	0x0800cd0d
 800ccd0:	0800cd0d 	.word	0x0800cd0d
 800ccd4:	0800cd0d 	.word	0x0800cd0d
 800ccd8:	0800cd0d 	.word	0x0800cd0d
 800ccdc:	0800cd0d 	.word	0x0800cd0d
 800cce0:	0800cd0d 	.word	0x0800cd0d
 800cce4:	0800cd0d 	.word	0x0800cd0d
 800cce8:	0800cd0d 	.word	0x0800cd0d
 800ccec:	0800cd0d 	.word	0x0800cd0d
 800ccf0:	0800cd0d 	.word	0x0800cd0d
 800ccf4:	0800cd0d 	.word	0x0800cd0d
 800ccf8:	0800cd0d 	.word	0x0800cd0d
 800ccfc:	0800cd0d 	.word	0x0800cd0d
 800cd00:	0800cd0d 	.word	0x0800cd0d
 800cd04:	0800cd0d 	.word	0x0800cd0d
 800cd08:	0800cd0d 	.word	0x0800cd0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd0c:	bf00      	nop
  }

  return (USBD_OK);
 800cd0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	4805      	ldr	r0, [pc, #20]	@ (800cd40 <CDC_Receive_FS+0x24>)
 800cd2a:	f7fe fbf7 	bl	800b51c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd2e:	4804      	ldr	r0, [pc, #16]	@ (800cd40 <CDC_Receive_FS+0x24>)
 800cd30:	f7fe fc12 	bl	800b558 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	200008bc 	.word	0x200008bc

0800cd44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b087      	sub	sp, #28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	371c      	adds	r7, #28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
	...

0800cd68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	4603      	mov	r3, r0
 800cd70:	6039      	str	r1, [r7, #0]
 800cd72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2212      	movs	r2, #18
 800cd78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd7a:	4b03      	ldr	r3, [pc, #12]	@ (800cd88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr
 800cd88:	200000d8 	.word	0x200000d8

0800cd8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	6039      	str	r1, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2204      	movs	r2, #4
 800cd9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd9e:	4b03      	ldr	r3, [pc, #12]	@ (800cdac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	200000ec 	.word	0x200000ec

0800cdb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	6039      	str	r1, [r7, #0]
 800cdba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdbc:	79fb      	ldrb	r3, [r7, #7]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d105      	bne.n	800cdce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	4907      	ldr	r1, [pc, #28]	@ (800cde4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdc6:	4808      	ldr	r0, [pc, #32]	@ (800cde8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdc8:	f7ff fe12 	bl	800c9f0 <USBD_GetString>
 800cdcc:	e004      	b.n	800cdd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	4904      	ldr	r1, [pc, #16]	@ (800cde4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdd2:	4805      	ldr	r0, [pc, #20]	@ (800cde8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdd4:	f7ff fe0c 	bl	800c9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdd8:	4b02      	ldr	r3, [pc, #8]	@ (800cde4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20001b98 	.word	0x20001b98
 800cde8:	0800ee68 	.word	0x0800ee68

0800cdec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	6039      	str	r1, [r7, #0]
 800cdf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdf8:	683a      	ldr	r2, [r7, #0]
 800cdfa:	4904      	ldr	r1, [pc, #16]	@ (800ce0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cdfc:	4804      	ldr	r0, [pc, #16]	@ (800ce10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cdfe:	f7ff fdf7 	bl	800c9f0 <USBD_GetString>
  return USBD_StrDesc;
 800ce02:	4b02      	ldr	r3, [pc, #8]	@ (800ce0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20001b98 	.word	0x20001b98
 800ce10:	0800ee80 	.word	0x0800ee80

0800ce14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	6039      	str	r1, [r7, #0]
 800ce1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	221a      	movs	r2, #26
 800ce24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce26:	f000 f843 	bl	800ceb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce2a:	4b02      	ldr	r3, [pc, #8]	@ (800ce34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	200000f0 	.word	0x200000f0

0800ce38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	6039      	str	r1, [r7, #0]
 800ce42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce44:	79fb      	ldrb	r3, [r7, #7]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d105      	bne.n	800ce56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	4907      	ldr	r1, [pc, #28]	@ (800ce6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce4e:	4808      	ldr	r0, [pc, #32]	@ (800ce70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce50:	f7ff fdce 	bl	800c9f0 <USBD_GetString>
 800ce54:	e004      	b.n	800ce60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	4904      	ldr	r1, [pc, #16]	@ (800ce6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce5a:	4805      	ldr	r0, [pc, #20]	@ (800ce70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce5c:	f7ff fdc8 	bl	800c9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce60:	4b02      	ldr	r3, [pc, #8]	@ (800ce6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	20001b98 	.word	0x20001b98
 800ce70:	0800ee94 	.word	0x0800ee94

0800ce74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	6039      	str	r1, [r7, #0]
 800ce7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce80:	79fb      	ldrb	r3, [r7, #7]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d105      	bne.n	800ce92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	4907      	ldr	r1, [pc, #28]	@ (800cea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce8a:	4808      	ldr	r0, [pc, #32]	@ (800ceac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce8c:	f7ff fdb0 	bl	800c9f0 <USBD_GetString>
 800ce90:	e004      	b.n	800ce9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	4904      	ldr	r1, [pc, #16]	@ (800cea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce96:	4805      	ldr	r0, [pc, #20]	@ (800ceac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce98:	f7ff fdaa 	bl	800c9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce9c:	4b02      	ldr	r3, [pc, #8]	@ (800cea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20001b98 	.word	0x20001b98
 800ceac:	0800eea0 	.word	0x0800eea0

0800ceb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	@ (800cef4 <Get_SerialNum+0x44>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cebc:	4b0e      	ldr	r3, [pc, #56]	@ (800cef8 <Get_SerialNum+0x48>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cec2:	4b0e      	ldr	r3, [pc, #56]	@ (800cefc <Get_SerialNum+0x4c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4413      	add	r3, r2
 800cece:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d009      	beq.n	800ceea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ced6:	2208      	movs	r2, #8
 800ced8:	4909      	ldr	r1, [pc, #36]	@ (800cf00 <Get_SerialNum+0x50>)
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 f814 	bl	800cf08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cee0:	2204      	movs	r2, #4
 800cee2:	4908      	ldr	r1, [pc, #32]	@ (800cf04 <Get_SerialNum+0x54>)
 800cee4:	68b8      	ldr	r0, [r7, #8]
 800cee6:	f000 f80f 	bl	800cf08 <IntToUnicode>
  }
}
 800ceea:	bf00      	nop
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	1fff7a10 	.word	0x1fff7a10
 800cef8:	1fff7a14 	.word	0x1fff7a14
 800cefc:	1fff7a18 	.word	0x1fff7a18
 800cf00:	200000f2 	.word	0x200000f2
 800cf04:	20000102 	.word	0x20000102

0800cf08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	4613      	mov	r3, r2
 800cf14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	75fb      	strb	r3, [r7, #23]
 800cf1e:	e027      	b.n	800cf70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	0f1b      	lsrs	r3, r3, #28
 800cf24:	2b09      	cmp	r3, #9
 800cf26:	d80b      	bhi.n	800cf40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	0f1b      	lsrs	r3, r3, #28
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	7dfb      	ldrb	r3, [r7, #23]
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4619      	mov	r1, r3
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	440b      	add	r3, r1
 800cf38:	3230      	adds	r2, #48	@ 0x30
 800cf3a:	b2d2      	uxtb	r2, r2
 800cf3c:	701a      	strb	r2, [r3, #0]
 800cf3e:	e00a      	b.n	800cf56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	0f1b      	lsrs	r3, r3, #28
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	440b      	add	r3, r1
 800cf50:	3237      	adds	r2, #55	@ 0x37
 800cf52:	b2d2      	uxtb	r2, r2
 800cf54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	011b      	lsls	r3, r3, #4
 800cf5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf5c:	7dfb      	ldrb	r3, [r7, #23]
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	3301      	adds	r3, #1
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	4413      	add	r3, r2
 800cf66:	2200      	movs	r2, #0
 800cf68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf6a:	7dfb      	ldrb	r3, [r7, #23]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	75fb      	strb	r3, [r7, #23]
 800cf70:	7dfa      	ldrb	r2, [r7, #23]
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d3d3      	bcc.n	800cf20 <IntToUnicode+0x18>
  }
}
 800cf78:	bf00      	nop
 800cf7a:	bf00      	nop
 800cf7c:	371c      	adds	r7, #28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
	...

0800cf88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	@ 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf90:	f107 0314 	add.w	r3, r7, #20
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	605a      	str	r2, [r3, #4]
 800cf9a:	609a      	str	r2, [r3, #8]
 800cf9c:	60da      	str	r2, [r3, #12]
 800cf9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cfa8:	d13a      	bne.n	800d020 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfaa:	2300      	movs	r3, #0
 800cfac:	613b      	str	r3, [r7, #16]
 800cfae:	4b1e      	ldr	r3, [pc, #120]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800cfb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfb2:	4a1d      	ldr	r2, [pc, #116]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800cfb4:	f043 0301 	orr.w	r3, r3, #1
 800cfb8:	6313      	str	r3, [r2, #48]	@ 0x30
 800cfba:	4b1b      	ldr	r3, [pc, #108]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800cfbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	613b      	str	r3, [r7, #16]
 800cfc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cfc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cfca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfcc:	2302      	movs	r3, #2
 800cfce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfd8:	230a      	movs	r3, #10
 800cfda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfdc:	f107 0314 	add.w	r3, r7, #20
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	4812      	ldr	r0, [pc, #72]	@ (800d02c <HAL_PCD_MspInit+0xa4>)
 800cfe4:	f7f6 f9ce 	bl	8003384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfe8:	4b0f      	ldr	r3, [pc, #60]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800cfea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfec:	4a0e      	ldr	r2, [pc, #56]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800cfee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff2:	6353      	str	r3, [r2, #52]	@ 0x34
 800cff4:	2300      	movs	r3, #0
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	4b0b      	ldr	r3, [pc, #44]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800cffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cffc:	4a0a      	ldr	r2, [pc, #40]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800cffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d002:	6453      	str	r3, [r2, #68]	@ 0x44
 800d004:	4b08      	ldr	r3, [pc, #32]	@ (800d028 <HAL_PCD_MspInit+0xa0>)
 800d006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d00c:	60fb      	str	r3, [r7, #12]
 800d00e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d010:	2200      	movs	r2, #0
 800d012:	2100      	movs	r1, #0
 800d014:	2043      	movs	r0, #67	@ 0x43
 800d016:	f7f6 f8de 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d01a:	2043      	movs	r0, #67	@ 0x43
 800d01c:	f7f6 f8f7 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d020:	bf00      	nop
 800d022:	3728      	adds	r7, #40	@ 0x28
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	40023800 	.word	0x40023800
 800d02c:	40020000 	.word	0x40020000

0800d030 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d044:	4619      	mov	r1, r3
 800d046:	4610      	mov	r0, r2
 800d048:	f7fe fb6f 	bl	800b72a <USBD_LL_SetupStage>
}
 800d04c:	bf00      	nop
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d066:	78fa      	ldrb	r2, [r7, #3]
 800d068:	6879      	ldr	r1, [r7, #4]
 800d06a:	4613      	mov	r3, r2
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	4413      	add	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	440b      	add	r3, r1
 800d074:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	78fb      	ldrb	r3, [r7, #3]
 800d07c:	4619      	mov	r1, r3
 800d07e:	f7fe fba9 	bl	800b7d4 <USBD_LL_DataOutStage>
}
 800d082:	bf00      	nop
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b082      	sub	sp, #8
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	460b      	mov	r3, r1
 800d094:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d09c:	78fa      	ldrb	r2, [r7, #3]
 800d09e:	6879      	ldr	r1, [r7, #4]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	00db      	lsls	r3, r3, #3
 800d0a4:	4413      	add	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	440b      	add	r3, r1
 800d0aa:	3320      	adds	r3, #32
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	78fb      	ldrb	r3, [r7, #3]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	f7fe fc42 	bl	800b93a <USBD_LL_DataInStage>
}
 800d0b6:	bf00      	nop
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fe fd7c 	bl	800bbca <USBD_LL_SOF>
}
 800d0d2:	bf00      	nop
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b084      	sub	sp, #16
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	79db      	ldrb	r3, [r3, #7]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d102      	bne.n	800d0f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	73fb      	strb	r3, [r7, #15]
 800d0f2:	e008      	b.n	800d106 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	79db      	ldrb	r3, [r3, #7]
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d102      	bne.n	800d102 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	73fb      	strb	r3, [r7, #15]
 800d100:	e001      	b.n	800d106 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d102:	f7f4 fee7 	bl	8001ed4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d10c:	7bfa      	ldrb	r2, [r7, #15]
 800d10e:	4611      	mov	r1, r2
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe fd16 	bl	800bb42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fe fcbe 	bl	800ba9e <USBD_LL_Reset>
}
 800d122:	bf00      	nop
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fe fd11 	bl	800bb62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	6812      	ldr	r2, [r2, #0]
 800d14e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d152:	f043 0301 	orr.w	r3, r3, #1
 800d156:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	7adb      	ldrb	r3, [r3, #11]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d005      	beq.n	800d16c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d160:	4b04      	ldr	r3, [pc, #16]	@ (800d174 <HAL_PCD_SuspendCallback+0x48>)
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	4a03      	ldr	r2, [pc, #12]	@ (800d174 <HAL_PCD_SuspendCallback+0x48>)
 800d166:	f043 0306 	orr.w	r3, r3, #6
 800d16a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	e000ed00 	.word	0xe000ed00

0800d178 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fd07 	bl	800bb9a <USBD_LL_Resume>
}
 800d18c:	bf00      	nop
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1a6:	78fa      	ldrb	r2, [r7, #3]
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fe fd5f 	bl	800bc6e <USBD_LL_IsoOUTIncomplete>
}
 800d1b0:	bf00      	nop
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ca:	78fa      	ldrb	r2, [r7, #3]
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe fd1b 	bl	800bc0a <USBD_LL_IsoINIncomplete>
}
 800d1d4:	bf00      	nop
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fe fd71 	bl	800bcd2 <USBD_LL_DevConnected>
}
 800d1f0:	bf00      	nop
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d206:	4618      	mov	r0, r3
 800d208:	f7fe fd6e 	bl	800bce8 <USBD_LL_DevDisconnected>
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d13c      	bne.n	800d29e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d224:	4a20      	ldr	r2, [pc, #128]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a1e      	ldr	r2, [pc, #120]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d230:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d234:	4b1c      	ldr	r3, [pc, #112]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d236:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d23a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d23c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d23e:	2204      	movs	r2, #4
 800d240:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d242:	4b19      	ldr	r3, [pc, #100]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d244:	2202      	movs	r2, #2
 800d246:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d248:	4b17      	ldr	r3, [pc, #92]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d24e:	4b16      	ldr	r3, [pc, #88]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d250:	2202      	movs	r2, #2
 800d252:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d254:	4b14      	ldr	r3, [pc, #80]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d256:	2200      	movs	r2, #0
 800d258:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d25a:	4b13      	ldr	r3, [pc, #76]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d260:	4b11      	ldr	r3, [pc, #68]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d262:	2200      	movs	r2, #0
 800d264:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d266:	4b10      	ldr	r3, [pc, #64]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d268:	2200      	movs	r2, #0
 800d26a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d26c:	4b0e      	ldr	r3, [pc, #56]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d26e:	2200      	movs	r2, #0
 800d270:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d272:	480d      	ldr	r0, [pc, #52]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d274:	f7f6 fc7c 	bl	8003b70 <HAL_PCD_Init>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d27e:	f7f4 fe29 	bl	8001ed4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d282:	2180      	movs	r1, #128	@ 0x80
 800d284:	4808      	ldr	r0, [pc, #32]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d286:	f7f7 fea8 	bl	8004fda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d28a:	2240      	movs	r2, #64	@ 0x40
 800d28c:	2100      	movs	r1, #0
 800d28e:	4806      	ldr	r0, [pc, #24]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d290:	f7f7 fe5c 	bl	8004f4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d294:	2280      	movs	r2, #128	@ 0x80
 800d296:	2101      	movs	r1, #1
 800d298:	4803      	ldr	r0, [pc, #12]	@ (800d2a8 <USBD_LL_Init+0x94>)
 800d29a:	f7f7 fe57 	bl	8004f4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20001d98 	.word	0x20001d98

0800d2ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7f6 fd63 	bl	8003d8e <HAL_PCD_Start>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f942 	bl	800d558 <USBD_Get_USB_Status>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	4608      	mov	r0, r1
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	70fb      	strb	r3, [r7, #3]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70bb      	strb	r3, [r7, #2]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d30a:	78bb      	ldrb	r3, [r7, #2]
 800d30c:	883a      	ldrh	r2, [r7, #0]
 800d30e:	78f9      	ldrb	r1, [r7, #3]
 800d310:	f7f7 fa37 	bl	8004782 <HAL_PCD_EP_Open>
 800d314:	4603      	mov	r3, r0
 800d316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 f91c 	bl	800d558 <USBD_Get_USB_Status>
 800d320:	4603      	mov	r3, r0
 800d322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d324:	7bbb      	ldrb	r3, [r7, #14]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33e:	2300      	movs	r3, #0
 800d340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d348:	78fa      	ldrb	r2, [r7, #3]
 800d34a:	4611      	mov	r1, r2
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7f7 fa82 	bl	8004856 <HAL_PCD_EP_Close>
 800d352:	4603      	mov	r3, r0
 800d354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 f8fd 	bl	800d558 <USBD_Get_USB_Status>
 800d35e:	4603      	mov	r3, r0
 800d360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d362:	7bbb      	ldrb	r3, [r7, #14]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d386:	78fa      	ldrb	r2, [r7, #3]
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f7 fb3a 	bl	8004a04 <HAL_PCD_EP_SetStall>
 800d390:	4603      	mov	r3, r0
 800d392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d394:	7bfb      	ldrb	r3, [r7, #15]
 800d396:	4618      	mov	r0, r3
 800d398:	f000 f8de 	bl	800d558 <USBD_Get_USB_Status>
 800d39c:	4603      	mov	r3, r0
 800d39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b084      	sub	sp, #16
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3c4:	78fa      	ldrb	r2, [r7, #3]
 800d3c6:	4611      	mov	r1, r2
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7f7 fb7e 	bl	8004aca <HAL_PCD_EP_ClrStall>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 f8bf 	bl	800d558 <USBD_Get_USB_Status>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d400:	2b00      	cmp	r3, #0
 800d402:	da0b      	bge.n	800d41c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d40a:	68f9      	ldr	r1, [r7, #12]
 800d40c:	4613      	mov	r3, r2
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	4413      	add	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	440b      	add	r3, r1
 800d416:	3316      	adds	r3, #22
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	e00b      	b.n	800d434 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d41c:	78fb      	ldrb	r3, [r7, #3]
 800d41e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d422:	68f9      	ldr	r1, [r7, #12]
 800d424:	4613      	mov	r3, r2
 800d426:	00db      	lsls	r3, r3, #3
 800d428:	4413      	add	r3, r2
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	440b      	add	r3, r1
 800d42e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d432:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d434:	4618      	mov	r0, r3
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d45a:	78fa      	ldrb	r2, [r7, #3]
 800d45c:	4611      	mov	r1, r2
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f7 f96b 	bl	800473a <HAL_PCD_SetAddress>
 800d464:	4603      	mov	r3, r0
 800d466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d468:	7bfb      	ldrb	r3, [r7, #15]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f000 f874 	bl	800d558 <USBD_Get_USB_Status>
 800d470:	4603      	mov	r3, r0
 800d472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d474:	7bbb      	ldrb	r3, [r7, #14]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b086      	sub	sp, #24
 800d482:	af00      	add	r7, sp, #0
 800d484:	60f8      	str	r0, [r7, #12]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
 800d48a:	460b      	mov	r3, r1
 800d48c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d49c:	7af9      	ldrb	r1, [r7, #11]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	f7f7 fa75 	bl	8004990 <HAL_PCD_EP_Transmit>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 f853 	bl	800d558 <USBD_Get_USB_Status>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3718      	adds	r7, #24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	607a      	str	r2, [r7, #4]
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d4de:	7af9      	ldrb	r1, [r7, #11]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	f7f7 fa01 	bl	80048ea <HAL_PCD_EP_Receive>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 f832 	bl	800d558 <USBD_Get_USB_Status>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3718      	adds	r7, #24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b082      	sub	sp, #8
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	460b      	mov	r3, r1
 800d50c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d514:	78fa      	ldrb	r2, [r7, #3]
 800d516:	4611      	mov	r1, r2
 800d518:	4618      	mov	r0, r3
 800d51a:	f7f7 fa21 	bl	8004960 <HAL_PCD_EP_GetRxCount>
 800d51e:	4603      	mov	r3, r0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d530:	4b03      	ldr	r3, [pc, #12]	@ (800d540 <USBD_static_malloc+0x18>)
}
 800d532:	4618      	mov	r0, r3
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	2000227c 	.word	0x2000227c

0800d544 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]

}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d562:	2300      	movs	r3, #0
 800d564:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d817      	bhi.n	800d59c <USBD_Get_USB_Status+0x44>
 800d56c:	a201      	add	r2, pc, #4	@ (adr r2, 800d574 <USBD_Get_USB_Status+0x1c>)
 800d56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d572:	bf00      	nop
 800d574:	0800d585 	.word	0x0800d585
 800d578:	0800d58b 	.word	0x0800d58b
 800d57c:	0800d591 	.word	0x0800d591
 800d580:	0800d597 	.word	0x0800d597
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
    break;
 800d588:	e00b      	b.n	800d5a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d58a:	2303      	movs	r3, #3
 800d58c:	73fb      	strb	r3, [r7, #15]
    break;
 800d58e:	e008      	b.n	800d5a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d590:	2301      	movs	r3, #1
 800d592:	73fb      	strb	r3, [r7, #15]
    break;
 800d594:	e005      	b.n	800d5a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d596:	2303      	movs	r3, #3
 800d598:	73fb      	strb	r3, [r7, #15]
    break;
 800d59a:	e002      	b.n	800d5a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d59c:	2303      	movs	r3, #3
 800d59e:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a0:	bf00      	nop
  }
  return usb_status;
 800d5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3714      	adds	r7, #20
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <memset>:
 800d5b0:	4402      	add	r2, r0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d100      	bne.n	800d5ba <memset+0xa>
 800d5b8:	4770      	bx	lr
 800d5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800d5be:	e7f9      	b.n	800d5b4 <memset+0x4>

0800d5c0 <__errno>:
 800d5c0:	4b01      	ldr	r3, [pc, #4]	@ (800d5c8 <__errno+0x8>)
 800d5c2:	6818      	ldr	r0, [r3, #0]
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	2000010c 	.word	0x2000010c

0800d5cc <__libc_init_array>:
 800d5cc:	b570      	push	{r4, r5, r6, lr}
 800d5ce:	4d0d      	ldr	r5, [pc, #52]	@ (800d604 <__libc_init_array+0x38>)
 800d5d0:	4c0d      	ldr	r4, [pc, #52]	@ (800d608 <__libc_init_array+0x3c>)
 800d5d2:	1b64      	subs	r4, r4, r5
 800d5d4:	10a4      	asrs	r4, r4, #2
 800d5d6:	2600      	movs	r6, #0
 800d5d8:	42a6      	cmp	r6, r4
 800d5da:	d109      	bne.n	800d5f0 <__libc_init_array+0x24>
 800d5dc:	4d0b      	ldr	r5, [pc, #44]	@ (800d60c <__libc_init_array+0x40>)
 800d5de:	4c0c      	ldr	r4, [pc, #48]	@ (800d610 <__libc_init_array+0x44>)
 800d5e0:	f001 fc06 	bl	800edf0 <_init>
 800d5e4:	1b64      	subs	r4, r4, r5
 800d5e6:	10a4      	asrs	r4, r4, #2
 800d5e8:	2600      	movs	r6, #0
 800d5ea:	42a6      	cmp	r6, r4
 800d5ec:	d105      	bne.n	800d5fa <__libc_init_array+0x2e>
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}
 800d5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f4:	4798      	blx	r3
 800d5f6:	3601      	adds	r6, #1
 800d5f8:	e7ee      	b.n	800d5d8 <__libc_init_array+0xc>
 800d5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5fe:	4798      	blx	r3
 800d600:	3601      	adds	r6, #1
 800d602:	e7f2      	b.n	800d5ea <__libc_init_array+0x1e>
 800d604:	0800f118 	.word	0x0800f118
 800d608:	0800f118 	.word	0x0800f118
 800d60c:	0800f118 	.word	0x0800f118
 800d610:	0800f11c 	.word	0x0800f11c

0800d614 <atan2>:
 800d614:	f000 bb34 	b.w	800dc80 <__ieee754_atan2>

0800d618 <sqrt>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	ed2d 8b02 	vpush	{d8}
 800d61e:	ec55 4b10 	vmov	r4, r5, d0
 800d622:	f000 f8cd 	bl	800d7c0 <__ieee754_sqrt>
 800d626:	4622      	mov	r2, r4
 800d628:	462b      	mov	r3, r5
 800d62a:	4620      	mov	r0, r4
 800d62c:	4629      	mov	r1, r5
 800d62e:	eeb0 8a40 	vmov.f32	s16, s0
 800d632:	eef0 8a60 	vmov.f32	s17, s1
 800d636:	f7f3 fa1d 	bl	8000a74 <__aeabi_dcmpun>
 800d63a:	b990      	cbnz	r0, 800d662 <sqrt+0x4a>
 800d63c:	2200      	movs	r2, #0
 800d63e:	2300      	movs	r3, #0
 800d640:	4620      	mov	r0, r4
 800d642:	4629      	mov	r1, r5
 800d644:	f7f3 f9ee 	bl	8000a24 <__aeabi_dcmplt>
 800d648:	b158      	cbz	r0, 800d662 <sqrt+0x4a>
 800d64a:	f7ff ffb9 	bl	800d5c0 <__errno>
 800d64e:	2321      	movs	r3, #33	@ 0x21
 800d650:	6003      	str	r3, [r0, #0]
 800d652:	2200      	movs	r2, #0
 800d654:	2300      	movs	r3, #0
 800d656:	4610      	mov	r0, r2
 800d658:	4619      	mov	r1, r3
 800d65a:	f7f3 f89b 	bl	8000794 <__aeabi_ddiv>
 800d65e:	ec41 0b18 	vmov	d8, r0, r1
 800d662:	eeb0 0a48 	vmov.f32	s0, s16
 800d666:	eef0 0a68 	vmov.f32	s1, s17
 800d66a:	ecbd 8b02 	vpop	{d8}
 800d66e:	bd38      	pop	{r3, r4, r5, pc}

0800d670 <cos>:
 800d670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d672:	ec53 2b10 	vmov	r2, r3, d0
 800d676:	4826      	ldr	r0, [pc, #152]	@ (800d710 <cos+0xa0>)
 800d678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d67c:	4281      	cmp	r1, r0
 800d67e:	d806      	bhi.n	800d68e <cos+0x1e>
 800d680:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d708 <cos+0x98>
 800d684:	b005      	add	sp, #20
 800d686:	f85d eb04 	ldr.w	lr, [sp], #4
 800d68a:	f000 b975 	b.w	800d978 <__kernel_cos>
 800d68e:	4821      	ldr	r0, [pc, #132]	@ (800d714 <cos+0xa4>)
 800d690:	4281      	cmp	r1, r0
 800d692:	d908      	bls.n	800d6a6 <cos+0x36>
 800d694:	4610      	mov	r0, r2
 800d696:	4619      	mov	r1, r3
 800d698:	f7f2 fd9a 	bl	80001d0 <__aeabi_dsub>
 800d69c:	ec41 0b10 	vmov	d0, r0, r1
 800d6a0:	b005      	add	sp, #20
 800d6a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6a6:	4668      	mov	r0, sp
 800d6a8:	f000 fbb2 	bl	800de10 <__ieee754_rem_pio2>
 800d6ac:	f000 0003 	and.w	r0, r0, #3
 800d6b0:	2801      	cmp	r0, #1
 800d6b2:	d00b      	beq.n	800d6cc <cos+0x5c>
 800d6b4:	2802      	cmp	r0, #2
 800d6b6:	d015      	beq.n	800d6e4 <cos+0x74>
 800d6b8:	b9d8      	cbnz	r0, 800d6f2 <cos+0x82>
 800d6ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6be:	ed9d 0b00 	vldr	d0, [sp]
 800d6c2:	f000 f959 	bl	800d978 <__kernel_cos>
 800d6c6:	ec51 0b10 	vmov	r0, r1, d0
 800d6ca:	e7e7      	b.n	800d69c <cos+0x2c>
 800d6cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6d0:	ed9d 0b00 	vldr	d0, [sp]
 800d6d4:	f000 fa18 	bl	800db08 <__kernel_sin>
 800d6d8:	ec53 2b10 	vmov	r2, r3, d0
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d6e2:	e7db      	b.n	800d69c <cos+0x2c>
 800d6e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e8:	ed9d 0b00 	vldr	d0, [sp]
 800d6ec:	f000 f944 	bl	800d978 <__kernel_cos>
 800d6f0:	e7f2      	b.n	800d6d8 <cos+0x68>
 800d6f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6f6:	ed9d 0b00 	vldr	d0, [sp]
 800d6fa:	2001      	movs	r0, #1
 800d6fc:	f000 fa04 	bl	800db08 <__kernel_sin>
 800d700:	e7e1      	b.n	800d6c6 <cos+0x56>
 800d702:	bf00      	nop
 800d704:	f3af 8000 	nop.w
	...
 800d710:	3fe921fb 	.word	0x3fe921fb
 800d714:	7fefffff 	.word	0x7fefffff

0800d718 <sin>:
 800d718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d71a:	ec53 2b10 	vmov	r2, r3, d0
 800d71e:	4826      	ldr	r0, [pc, #152]	@ (800d7b8 <sin+0xa0>)
 800d720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d724:	4281      	cmp	r1, r0
 800d726:	d807      	bhi.n	800d738 <sin+0x20>
 800d728:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d7b0 <sin+0x98>
 800d72c:	2000      	movs	r0, #0
 800d72e:	b005      	add	sp, #20
 800d730:	f85d eb04 	ldr.w	lr, [sp], #4
 800d734:	f000 b9e8 	b.w	800db08 <__kernel_sin>
 800d738:	4820      	ldr	r0, [pc, #128]	@ (800d7bc <sin+0xa4>)
 800d73a:	4281      	cmp	r1, r0
 800d73c:	d908      	bls.n	800d750 <sin+0x38>
 800d73e:	4610      	mov	r0, r2
 800d740:	4619      	mov	r1, r3
 800d742:	f7f2 fd45 	bl	80001d0 <__aeabi_dsub>
 800d746:	ec41 0b10 	vmov	d0, r0, r1
 800d74a:	b005      	add	sp, #20
 800d74c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d750:	4668      	mov	r0, sp
 800d752:	f000 fb5d 	bl	800de10 <__ieee754_rem_pio2>
 800d756:	f000 0003 	and.w	r0, r0, #3
 800d75a:	2801      	cmp	r0, #1
 800d75c:	d00c      	beq.n	800d778 <sin+0x60>
 800d75e:	2802      	cmp	r0, #2
 800d760:	d011      	beq.n	800d786 <sin+0x6e>
 800d762:	b9e8      	cbnz	r0, 800d7a0 <sin+0x88>
 800d764:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d768:	ed9d 0b00 	vldr	d0, [sp]
 800d76c:	2001      	movs	r0, #1
 800d76e:	f000 f9cb 	bl	800db08 <__kernel_sin>
 800d772:	ec51 0b10 	vmov	r0, r1, d0
 800d776:	e7e6      	b.n	800d746 <sin+0x2e>
 800d778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d77c:	ed9d 0b00 	vldr	d0, [sp]
 800d780:	f000 f8fa 	bl	800d978 <__kernel_cos>
 800d784:	e7f5      	b.n	800d772 <sin+0x5a>
 800d786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d78a:	ed9d 0b00 	vldr	d0, [sp]
 800d78e:	2001      	movs	r0, #1
 800d790:	f000 f9ba 	bl	800db08 <__kernel_sin>
 800d794:	ec53 2b10 	vmov	r2, r3, d0
 800d798:	4610      	mov	r0, r2
 800d79a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d79e:	e7d2      	b.n	800d746 <sin+0x2e>
 800d7a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7a4:	ed9d 0b00 	vldr	d0, [sp]
 800d7a8:	f000 f8e6 	bl	800d978 <__kernel_cos>
 800d7ac:	e7f2      	b.n	800d794 <sin+0x7c>
 800d7ae:	bf00      	nop
	...
 800d7b8:	3fe921fb 	.word	0x3fe921fb
 800d7bc:	7fefffff 	.word	0x7fefffff

0800d7c0 <__ieee754_sqrt>:
 800d7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	4a68      	ldr	r2, [pc, #416]	@ (800d968 <__ieee754_sqrt+0x1a8>)
 800d7c6:	ec55 4b10 	vmov	r4, r5, d0
 800d7ca:	43aa      	bics	r2, r5
 800d7cc:	462b      	mov	r3, r5
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	d110      	bne.n	800d7f4 <__ieee754_sqrt+0x34>
 800d7d2:	4622      	mov	r2, r4
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	f7f2 feb2 	bl	8000540 <__aeabi_dmul>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	f7f2 fcf6 	bl	80001d4 <__adddf3>
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	460d      	mov	r5, r1
 800d7ec:	ec45 4b10 	vmov	d0, r4, r5
 800d7f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f4:	2d00      	cmp	r5, #0
 800d7f6:	dc0e      	bgt.n	800d816 <__ieee754_sqrt+0x56>
 800d7f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d7fc:	4322      	orrs	r2, r4
 800d7fe:	d0f5      	beq.n	800d7ec <__ieee754_sqrt+0x2c>
 800d800:	b19d      	cbz	r5, 800d82a <__ieee754_sqrt+0x6a>
 800d802:	4622      	mov	r2, r4
 800d804:	4620      	mov	r0, r4
 800d806:	4629      	mov	r1, r5
 800d808:	f7f2 fce2 	bl	80001d0 <__aeabi_dsub>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	f7f2 ffc0 	bl	8000794 <__aeabi_ddiv>
 800d814:	e7e8      	b.n	800d7e8 <__ieee754_sqrt+0x28>
 800d816:	152a      	asrs	r2, r5, #20
 800d818:	d115      	bne.n	800d846 <__ieee754_sqrt+0x86>
 800d81a:	2000      	movs	r0, #0
 800d81c:	e009      	b.n	800d832 <__ieee754_sqrt+0x72>
 800d81e:	0acb      	lsrs	r3, r1, #11
 800d820:	3a15      	subs	r2, #21
 800d822:	0549      	lsls	r1, r1, #21
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0fa      	beq.n	800d81e <__ieee754_sqrt+0x5e>
 800d828:	e7f7      	b.n	800d81a <__ieee754_sqrt+0x5a>
 800d82a:	462a      	mov	r2, r5
 800d82c:	e7fa      	b.n	800d824 <__ieee754_sqrt+0x64>
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	3001      	adds	r0, #1
 800d832:	02dc      	lsls	r4, r3, #11
 800d834:	d5fb      	bpl.n	800d82e <__ieee754_sqrt+0x6e>
 800d836:	1e44      	subs	r4, r0, #1
 800d838:	1b12      	subs	r2, r2, r4
 800d83a:	f1c0 0420 	rsb	r4, r0, #32
 800d83e:	fa21 f404 	lsr.w	r4, r1, r4
 800d842:	4323      	orrs	r3, r4
 800d844:	4081      	lsls	r1, r0
 800d846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d84a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d84e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d852:	07d2      	lsls	r2, r2, #31
 800d854:	bf5c      	itt	pl
 800d856:	005b      	lslpl	r3, r3, #1
 800d858:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d85c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d860:	bf58      	it	pl
 800d862:	0049      	lslpl	r1, r1, #1
 800d864:	2600      	movs	r6, #0
 800d866:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d86a:	106d      	asrs	r5, r5, #1
 800d86c:	0049      	lsls	r1, r1, #1
 800d86e:	2016      	movs	r0, #22
 800d870:	4632      	mov	r2, r6
 800d872:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d876:	1917      	adds	r7, r2, r4
 800d878:	429f      	cmp	r7, r3
 800d87a:	bfde      	ittt	le
 800d87c:	193a      	addle	r2, r7, r4
 800d87e:	1bdb      	suble	r3, r3, r7
 800d880:	1936      	addle	r6, r6, r4
 800d882:	0fcf      	lsrs	r7, r1, #31
 800d884:	3801      	subs	r0, #1
 800d886:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d88a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d88e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d892:	d1f0      	bne.n	800d876 <__ieee754_sqrt+0xb6>
 800d894:	4604      	mov	r4, r0
 800d896:	2720      	movs	r7, #32
 800d898:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d89c:	429a      	cmp	r2, r3
 800d89e:	eb00 0e0c 	add.w	lr, r0, ip
 800d8a2:	db02      	blt.n	800d8aa <__ieee754_sqrt+0xea>
 800d8a4:	d113      	bne.n	800d8ce <__ieee754_sqrt+0x10e>
 800d8a6:	458e      	cmp	lr, r1
 800d8a8:	d811      	bhi.n	800d8ce <__ieee754_sqrt+0x10e>
 800d8aa:	f1be 0f00 	cmp.w	lr, #0
 800d8ae:	eb0e 000c 	add.w	r0, lr, ip
 800d8b2:	da42      	bge.n	800d93a <__ieee754_sqrt+0x17a>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	db40      	blt.n	800d93a <__ieee754_sqrt+0x17a>
 800d8b8:	f102 0801 	add.w	r8, r2, #1
 800d8bc:	1a9b      	subs	r3, r3, r2
 800d8be:	458e      	cmp	lr, r1
 800d8c0:	bf88      	it	hi
 800d8c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d8c6:	eba1 010e 	sub.w	r1, r1, lr
 800d8ca:	4464      	add	r4, ip
 800d8cc:	4642      	mov	r2, r8
 800d8ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d8d2:	3f01      	subs	r7, #1
 800d8d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d8d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d8dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d8e0:	d1dc      	bne.n	800d89c <__ieee754_sqrt+0xdc>
 800d8e2:	4319      	orrs	r1, r3
 800d8e4:	d01b      	beq.n	800d91e <__ieee754_sqrt+0x15e>
 800d8e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d96c <__ieee754_sqrt+0x1ac>
 800d8ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d970 <__ieee754_sqrt+0x1b0>
 800d8ee:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8f2:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8f6:	f7f2 fc6b 	bl	80001d0 <__aeabi_dsub>
 800d8fa:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	4640      	mov	r0, r8
 800d904:	4649      	mov	r1, r9
 800d906:	f7f3 f897 	bl	8000a38 <__aeabi_dcmple>
 800d90a:	b140      	cbz	r0, 800d91e <__ieee754_sqrt+0x15e>
 800d90c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d910:	e9da 0100 	ldrd	r0, r1, [sl]
 800d914:	e9db 2300 	ldrd	r2, r3, [fp]
 800d918:	d111      	bne.n	800d93e <__ieee754_sqrt+0x17e>
 800d91a:	3601      	adds	r6, #1
 800d91c:	463c      	mov	r4, r7
 800d91e:	1072      	asrs	r2, r6, #1
 800d920:	0863      	lsrs	r3, r4, #1
 800d922:	07f1      	lsls	r1, r6, #31
 800d924:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d928:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d92c:	bf48      	it	mi
 800d92e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d932:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d936:	4618      	mov	r0, r3
 800d938:	e756      	b.n	800d7e8 <__ieee754_sqrt+0x28>
 800d93a:	4690      	mov	r8, r2
 800d93c:	e7be      	b.n	800d8bc <__ieee754_sqrt+0xfc>
 800d93e:	f7f2 fc49 	bl	80001d4 <__adddf3>
 800d942:	e9da 8900 	ldrd	r8, r9, [sl]
 800d946:	4602      	mov	r2, r0
 800d948:	460b      	mov	r3, r1
 800d94a:	4640      	mov	r0, r8
 800d94c:	4649      	mov	r1, r9
 800d94e:	f7f3 f869 	bl	8000a24 <__aeabi_dcmplt>
 800d952:	b120      	cbz	r0, 800d95e <__ieee754_sqrt+0x19e>
 800d954:	1ca0      	adds	r0, r4, #2
 800d956:	bf08      	it	eq
 800d958:	3601      	addeq	r6, #1
 800d95a:	3402      	adds	r4, #2
 800d95c:	e7df      	b.n	800d91e <__ieee754_sqrt+0x15e>
 800d95e:	1c63      	adds	r3, r4, #1
 800d960:	f023 0401 	bic.w	r4, r3, #1
 800d964:	e7db      	b.n	800d91e <__ieee754_sqrt+0x15e>
 800d966:	bf00      	nop
 800d968:	7ff00000 	.word	0x7ff00000
 800d96c:	20000168 	.word	0x20000168
 800d970:	20000160 	.word	0x20000160
 800d974:	00000000 	.word	0x00000000

0800d978 <__kernel_cos>:
 800d978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	ec57 6b10 	vmov	r6, r7, d0
 800d980:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d984:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d988:	ed8d 1b00 	vstr	d1, [sp]
 800d98c:	d206      	bcs.n	800d99c <__kernel_cos+0x24>
 800d98e:	4630      	mov	r0, r6
 800d990:	4639      	mov	r1, r7
 800d992:	f7f3 f885 	bl	8000aa0 <__aeabi_d2iz>
 800d996:	2800      	cmp	r0, #0
 800d998:	f000 8088 	beq.w	800daac <__kernel_cos+0x134>
 800d99c:	4632      	mov	r2, r6
 800d99e:	463b      	mov	r3, r7
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	f7f2 fdcc 	bl	8000540 <__aeabi_dmul>
 800d9a8:	4b51      	ldr	r3, [pc, #324]	@ (800daf0 <__kernel_cos+0x178>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	460d      	mov	r5, r1
 800d9b0:	f7f2 fdc6 	bl	8000540 <__aeabi_dmul>
 800d9b4:	a340      	add	r3, pc, #256	@ (adr r3, 800dab8 <__kernel_cos+0x140>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	4682      	mov	sl, r0
 800d9bc:	468b      	mov	fp, r1
 800d9be:	4620      	mov	r0, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	f7f2 fdbd 	bl	8000540 <__aeabi_dmul>
 800d9c6:	a33e      	add	r3, pc, #248	@ (adr r3, 800dac0 <__kernel_cos+0x148>)
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	f7f2 fc02 	bl	80001d4 <__adddf3>
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	462b      	mov	r3, r5
 800d9d4:	f7f2 fdb4 	bl	8000540 <__aeabi_dmul>
 800d9d8:	a33b      	add	r3, pc, #236	@ (adr r3, 800dac8 <__kernel_cos+0x150>)
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	f7f2 fbf7 	bl	80001d0 <__aeabi_dsub>
 800d9e2:	4622      	mov	r2, r4
 800d9e4:	462b      	mov	r3, r5
 800d9e6:	f7f2 fdab 	bl	8000540 <__aeabi_dmul>
 800d9ea:	a339      	add	r3, pc, #228	@ (adr r3, 800dad0 <__kernel_cos+0x158>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fbf0 	bl	80001d4 <__adddf3>
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	462b      	mov	r3, r5
 800d9f8:	f7f2 fda2 	bl	8000540 <__aeabi_dmul>
 800d9fc:	a336      	add	r3, pc, #216	@ (adr r3, 800dad8 <__kernel_cos+0x160>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f7f2 fbe5 	bl	80001d0 <__aeabi_dsub>
 800da06:	4622      	mov	r2, r4
 800da08:	462b      	mov	r3, r5
 800da0a:	f7f2 fd99 	bl	8000540 <__aeabi_dmul>
 800da0e:	a334      	add	r3, pc, #208	@ (adr r3, 800dae0 <__kernel_cos+0x168>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	f7f2 fbde 	bl	80001d4 <__adddf3>
 800da18:	4622      	mov	r2, r4
 800da1a:	462b      	mov	r3, r5
 800da1c:	f7f2 fd90 	bl	8000540 <__aeabi_dmul>
 800da20:	4622      	mov	r2, r4
 800da22:	462b      	mov	r3, r5
 800da24:	f7f2 fd8c 	bl	8000540 <__aeabi_dmul>
 800da28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da2c:	4604      	mov	r4, r0
 800da2e:	460d      	mov	r5, r1
 800da30:	4630      	mov	r0, r6
 800da32:	4639      	mov	r1, r7
 800da34:	f7f2 fd84 	bl	8000540 <__aeabi_dmul>
 800da38:	460b      	mov	r3, r1
 800da3a:	4602      	mov	r2, r0
 800da3c:	4629      	mov	r1, r5
 800da3e:	4620      	mov	r0, r4
 800da40:	f7f2 fbc6 	bl	80001d0 <__aeabi_dsub>
 800da44:	4b2b      	ldr	r3, [pc, #172]	@ (800daf4 <__kernel_cos+0x17c>)
 800da46:	4598      	cmp	r8, r3
 800da48:	4606      	mov	r6, r0
 800da4a:	460f      	mov	r7, r1
 800da4c:	d810      	bhi.n	800da70 <__kernel_cos+0xf8>
 800da4e:	4602      	mov	r2, r0
 800da50:	460b      	mov	r3, r1
 800da52:	4650      	mov	r0, sl
 800da54:	4659      	mov	r1, fp
 800da56:	f7f2 fbbb 	bl	80001d0 <__aeabi_dsub>
 800da5a:	460b      	mov	r3, r1
 800da5c:	4926      	ldr	r1, [pc, #152]	@ (800daf8 <__kernel_cos+0x180>)
 800da5e:	4602      	mov	r2, r0
 800da60:	2000      	movs	r0, #0
 800da62:	f7f2 fbb5 	bl	80001d0 <__aeabi_dsub>
 800da66:	ec41 0b10 	vmov	d0, r0, r1
 800da6a:	b003      	add	sp, #12
 800da6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da70:	4b22      	ldr	r3, [pc, #136]	@ (800dafc <__kernel_cos+0x184>)
 800da72:	4921      	ldr	r1, [pc, #132]	@ (800daf8 <__kernel_cos+0x180>)
 800da74:	4598      	cmp	r8, r3
 800da76:	bf8c      	ite	hi
 800da78:	4d21      	ldrhi	r5, [pc, #132]	@ (800db00 <__kernel_cos+0x188>)
 800da7a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800da7e:	2400      	movs	r4, #0
 800da80:	4622      	mov	r2, r4
 800da82:	462b      	mov	r3, r5
 800da84:	2000      	movs	r0, #0
 800da86:	f7f2 fba3 	bl	80001d0 <__aeabi_dsub>
 800da8a:	4622      	mov	r2, r4
 800da8c:	4680      	mov	r8, r0
 800da8e:	4689      	mov	r9, r1
 800da90:	462b      	mov	r3, r5
 800da92:	4650      	mov	r0, sl
 800da94:	4659      	mov	r1, fp
 800da96:	f7f2 fb9b 	bl	80001d0 <__aeabi_dsub>
 800da9a:	4632      	mov	r2, r6
 800da9c:	463b      	mov	r3, r7
 800da9e:	f7f2 fb97 	bl	80001d0 <__aeabi_dsub>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4640      	mov	r0, r8
 800daa8:	4649      	mov	r1, r9
 800daaa:	e7da      	b.n	800da62 <__kernel_cos+0xea>
 800daac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800dae8 <__kernel_cos+0x170>
 800dab0:	e7db      	b.n	800da6a <__kernel_cos+0xf2>
 800dab2:	bf00      	nop
 800dab4:	f3af 8000 	nop.w
 800dab8:	be8838d4 	.word	0xbe8838d4
 800dabc:	bda8fae9 	.word	0xbda8fae9
 800dac0:	bdb4b1c4 	.word	0xbdb4b1c4
 800dac4:	3e21ee9e 	.word	0x3e21ee9e
 800dac8:	809c52ad 	.word	0x809c52ad
 800dacc:	3e927e4f 	.word	0x3e927e4f
 800dad0:	19cb1590 	.word	0x19cb1590
 800dad4:	3efa01a0 	.word	0x3efa01a0
 800dad8:	16c15177 	.word	0x16c15177
 800dadc:	3f56c16c 	.word	0x3f56c16c
 800dae0:	5555554c 	.word	0x5555554c
 800dae4:	3fa55555 	.word	0x3fa55555
 800dae8:	00000000 	.word	0x00000000
 800daec:	3ff00000 	.word	0x3ff00000
 800daf0:	3fe00000 	.word	0x3fe00000
 800daf4:	3fd33332 	.word	0x3fd33332
 800daf8:	3ff00000 	.word	0x3ff00000
 800dafc:	3fe90000 	.word	0x3fe90000
 800db00:	3fd20000 	.word	0x3fd20000
 800db04:	00000000 	.word	0x00000000

0800db08 <__kernel_sin>:
 800db08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	ec55 4b10 	vmov	r4, r5, d0
 800db10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800db14:	b085      	sub	sp, #20
 800db16:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800db1a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800db1e:	4680      	mov	r8, r0
 800db20:	d205      	bcs.n	800db2e <__kernel_sin+0x26>
 800db22:	4620      	mov	r0, r4
 800db24:	4629      	mov	r1, r5
 800db26:	f7f2 ffbb 	bl	8000aa0 <__aeabi_d2iz>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d052      	beq.n	800dbd4 <__kernel_sin+0xcc>
 800db2e:	4622      	mov	r2, r4
 800db30:	462b      	mov	r3, r5
 800db32:	4620      	mov	r0, r4
 800db34:	4629      	mov	r1, r5
 800db36:	f7f2 fd03 	bl	8000540 <__aeabi_dmul>
 800db3a:	4682      	mov	sl, r0
 800db3c:	468b      	mov	fp, r1
 800db3e:	4602      	mov	r2, r0
 800db40:	460b      	mov	r3, r1
 800db42:	4620      	mov	r0, r4
 800db44:	4629      	mov	r1, r5
 800db46:	f7f2 fcfb 	bl	8000540 <__aeabi_dmul>
 800db4a:	a342      	add	r3, pc, #264	@ (adr r3, 800dc54 <__kernel_sin+0x14c>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	e9cd 0100 	strd	r0, r1, [sp]
 800db54:	4650      	mov	r0, sl
 800db56:	4659      	mov	r1, fp
 800db58:	f7f2 fcf2 	bl	8000540 <__aeabi_dmul>
 800db5c:	a33f      	add	r3, pc, #252	@ (adr r3, 800dc5c <__kernel_sin+0x154>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	f7f2 fb35 	bl	80001d0 <__aeabi_dsub>
 800db66:	4652      	mov	r2, sl
 800db68:	465b      	mov	r3, fp
 800db6a:	f7f2 fce9 	bl	8000540 <__aeabi_dmul>
 800db6e:	a33d      	add	r3, pc, #244	@ (adr r3, 800dc64 <__kernel_sin+0x15c>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	f7f2 fb2e 	bl	80001d4 <__adddf3>
 800db78:	4652      	mov	r2, sl
 800db7a:	465b      	mov	r3, fp
 800db7c:	f7f2 fce0 	bl	8000540 <__aeabi_dmul>
 800db80:	a33a      	add	r3, pc, #232	@ (adr r3, 800dc6c <__kernel_sin+0x164>)
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	f7f2 fb23 	bl	80001d0 <__aeabi_dsub>
 800db8a:	4652      	mov	r2, sl
 800db8c:	465b      	mov	r3, fp
 800db8e:	f7f2 fcd7 	bl	8000540 <__aeabi_dmul>
 800db92:	a338      	add	r3, pc, #224	@ (adr r3, 800dc74 <__kernel_sin+0x16c>)
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f7f2 fb1c 	bl	80001d4 <__adddf3>
 800db9c:	4606      	mov	r6, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	f1b8 0f00 	cmp.w	r8, #0
 800dba4:	d11b      	bne.n	800dbde <__kernel_sin+0xd6>
 800dba6:	4602      	mov	r2, r0
 800dba8:	460b      	mov	r3, r1
 800dbaa:	4650      	mov	r0, sl
 800dbac:	4659      	mov	r1, fp
 800dbae:	f7f2 fcc7 	bl	8000540 <__aeabi_dmul>
 800dbb2:	a325      	add	r3, pc, #148	@ (adr r3, 800dc48 <__kernel_sin+0x140>)
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	f7f2 fb0a 	bl	80001d0 <__aeabi_dsub>
 800dbbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbc0:	f7f2 fcbe 	bl	8000540 <__aeabi_dmul>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	4620      	mov	r0, r4
 800dbca:	4629      	mov	r1, r5
 800dbcc:	f7f2 fb02 	bl	80001d4 <__adddf3>
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	ec45 4b10 	vmov	d0, r4, r5
 800dbd8:	b005      	add	sp, #20
 800dbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbe2:	4b1b      	ldr	r3, [pc, #108]	@ (800dc50 <__kernel_sin+0x148>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f7f2 fcab 	bl	8000540 <__aeabi_dmul>
 800dbea:	4632      	mov	r2, r6
 800dbec:	4680      	mov	r8, r0
 800dbee:	4689      	mov	r9, r1
 800dbf0:	463b      	mov	r3, r7
 800dbf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbf6:	f7f2 fca3 	bl	8000540 <__aeabi_dmul>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	4640      	mov	r0, r8
 800dc00:	4649      	mov	r1, r9
 800dc02:	f7f2 fae5 	bl	80001d0 <__aeabi_dsub>
 800dc06:	4652      	mov	r2, sl
 800dc08:	465b      	mov	r3, fp
 800dc0a:	f7f2 fc99 	bl	8000540 <__aeabi_dmul>
 800dc0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc12:	f7f2 fadd 	bl	80001d0 <__aeabi_dsub>
 800dc16:	a30c      	add	r3, pc, #48	@ (adr r3, 800dc48 <__kernel_sin+0x140>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	460f      	mov	r7, r1
 800dc20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc24:	f7f2 fc8c 	bl	8000540 <__aeabi_dmul>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f7f2 fad0 	bl	80001d4 <__adddf3>
 800dc34:	4602      	mov	r2, r0
 800dc36:	460b      	mov	r3, r1
 800dc38:	4620      	mov	r0, r4
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7f2 fac8 	bl	80001d0 <__aeabi_dsub>
 800dc40:	e7c6      	b.n	800dbd0 <__kernel_sin+0xc8>
 800dc42:	bf00      	nop
 800dc44:	f3af 8000 	nop.w
 800dc48:	55555549 	.word	0x55555549
 800dc4c:	3fc55555 	.word	0x3fc55555
 800dc50:	3fe00000 	.word	0x3fe00000
 800dc54:	5acfd57c 	.word	0x5acfd57c
 800dc58:	3de5d93a 	.word	0x3de5d93a
 800dc5c:	8a2b9ceb 	.word	0x8a2b9ceb
 800dc60:	3e5ae5e6 	.word	0x3e5ae5e6
 800dc64:	57b1fe7d 	.word	0x57b1fe7d
 800dc68:	3ec71de3 	.word	0x3ec71de3
 800dc6c:	19c161d5 	.word	0x19c161d5
 800dc70:	3f2a01a0 	.word	0x3f2a01a0
 800dc74:	1110f8a6 	.word	0x1110f8a6
 800dc78:	3f811111 	.word	0x3f811111
 800dc7c:	00000000 	.word	0x00000000

0800dc80 <__ieee754_atan2>:
 800dc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc84:	ec57 6b11 	vmov	r6, r7, d1
 800dc88:	4273      	negs	r3, r6
 800dc8a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800de08 <__ieee754_atan2+0x188>
 800dc8e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800dc92:	4333      	orrs	r3, r6
 800dc94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dc98:	4543      	cmp	r3, r8
 800dc9a:	ec51 0b10 	vmov	r0, r1, d0
 800dc9e:	4635      	mov	r5, r6
 800dca0:	d809      	bhi.n	800dcb6 <__ieee754_atan2+0x36>
 800dca2:	4244      	negs	r4, r0
 800dca4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dca8:	4304      	orrs	r4, r0
 800dcaa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dcae:	4544      	cmp	r4, r8
 800dcb0:	468e      	mov	lr, r1
 800dcb2:	4681      	mov	r9, r0
 800dcb4:	d907      	bls.n	800dcc6 <__ieee754_atan2+0x46>
 800dcb6:	4632      	mov	r2, r6
 800dcb8:	463b      	mov	r3, r7
 800dcba:	f7f2 fa8b 	bl	80001d4 <__adddf3>
 800dcbe:	ec41 0b10 	vmov	d0, r0, r1
 800dcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcc6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800dcca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800dcce:	4334      	orrs	r4, r6
 800dcd0:	d103      	bne.n	800dcda <__ieee754_atan2+0x5a>
 800dcd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcd6:	f000 ba97 	b.w	800e208 <atan>
 800dcda:	17bc      	asrs	r4, r7, #30
 800dcdc:	f004 0402 	and.w	r4, r4, #2
 800dce0:	ea53 0909 	orrs.w	r9, r3, r9
 800dce4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dce8:	d107      	bne.n	800dcfa <__ieee754_atan2+0x7a>
 800dcea:	2c02      	cmp	r4, #2
 800dcec:	d05f      	beq.n	800ddae <__ieee754_atan2+0x12e>
 800dcee:	2c03      	cmp	r4, #3
 800dcf0:	d1e5      	bne.n	800dcbe <__ieee754_atan2+0x3e>
 800dcf2:	a141      	add	r1, pc, #260	@ (adr r1, 800ddf8 <__ieee754_atan2+0x178>)
 800dcf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcf8:	e7e1      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800dcfa:	4315      	orrs	r5, r2
 800dcfc:	d106      	bne.n	800dd0c <__ieee754_atan2+0x8c>
 800dcfe:	f1be 0f00 	cmp.w	lr, #0
 800dd02:	da5f      	bge.n	800ddc4 <__ieee754_atan2+0x144>
 800dd04:	a13e      	add	r1, pc, #248	@ (adr r1, 800de00 <__ieee754_atan2+0x180>)
 800dd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd0a:	e7d8      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800dd0c:	4542      	cmp	r2, r8
 800dd0e:	d10f      	bne.n	800dd30 <__ieee754_atan2+0xb0>
 800dd10:	4293      	cmp	r3, r2
 800dd12:	f104 34ff 	add.w	r4, r4, #4294967295
 800dd16:	d107      	bne.n	800dd28 <__ieee754_atan2+0xa8>
 800dd18:	2c02      	cmp	r4, #2
 800dd1a:	d84c      	bhi.n	800ddb6 <__ieee754_atan2+0x136>
 800dd1c:	4b34      	ldr	r3, [pc, #208]	@ (800ddf0 <__ieee754_atan2+0x170>)
 800dd1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd26:	e7ca      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800dd28:	2c02      	cmp	r4, #2
 800dd2a:	d848      	bhi.n	800ddbe <__ieee754_atan2+0x13e>
 800dd2c:	4b31      	ldr	r3, [pc, #196]	@ (800ddf4 <__ieee754_atan2+0x174>)
 800dd2e:	e7f6      	b.n	800dd1e <__ieee754_atan2+0x9e>
 800dd30:	4543      	cmp	r3, r8
 800dd32:	d0e4      	beq.n	800dcfe <__ieee754_atan2+0x7e>
 800dd34:	1a9b      	subs	r3, r3, r2
 800dd36:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800dd3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dd3e:	da1e      	bge.n	800dd7e <__ieee754_atan2+0xfe>
 800dd40:	2f00      	cmp	r7, #0
 800dd42:	da01      	bge.n	800dd48 <__ieee754_atan2+0xc8>
 800dd44:	323c      	adds	r2, #60	@ 0x3c
 800dd46:	db1e      	blt.n	800dd86 <__ieee754_atan2+0x106>
 800dd48:	4632      	mov	r2, r6
 800dd4a:	463b      	mov	r3, r7
 800dd4c:	f7f2 fd22 	bl	8000794 <__aeabi_ddiv>
 800dd50:	ec41 0b10 	vmov	d0, r0, r1
 800dd54:	f000 fbf0 	bl	800e538 <fabs>
 800dd58:	f000 fa56 	bl	800e208 <atan>
 800dd5c:	ec51 0b10 	vmov	r0, r1, d0
 800dd60:	2c01      	cmp	r4, #1
 800dd62:	d013      	beq.n	800dd8c <__ieee754_atan2+0x10c>
 800dd64:	2c02      	cmp	r4, #2
 800dd66:	d015      	beq.n	800dd94 <__ieee754_atan2+0x114>
 800dd68:	2c00      	cmp	r4, #0
 800dd6a:	d0a8      	beq.n	800dcbe <__ieee754_atan2+0x3e>
 800dd6c:	a318      	add	r3, pc, #96	@ (adr r3, 800ddd0 <__ieee754_atan2+0x150>)
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	f7f2 fa2d 	bl	80001d0 <__aeabi_dsub>
 800dd76:	a318      	add	r3, pc, #96	@ (adr r3, 800ddd8 <__ieee754_atan2+0x158>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	e014      	b.n	800dda8 <__ieee754_atan2+0x128>
 800dd7e:	a118      	add	r1, pc, #96	@ (adr r1, 800dde0 <__ieee754_atan2+0x160>)
 800dd80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd84:	e7ec      	b.n	800dd60 <__ieee754_atan2+0xe0>
 800dd86:	2000      	movs	r0, #0
 800dd88:	2100      	movs	r1, #0
 800dd8a:	e7e9      	b.n	800dd60 <__ieee754_atan2+0xe0>
 800dd8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd90:	4619      	mov	r1, r3
 800dd92:	e794      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800dd94:	a30e      	add	r3, pc, #56	@ (adr r3, 800ddd0 <__ieee754_atan2+0x150>)
 800dd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9a:	f7f2 fa19 	bl	80001d0 <__aeabi_dsub>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	a10d      	add	r1, pc, #52	@ (adr r1, 800ddd8 <__ieee754_atan2+0x158>)
 800dda4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dda8:	f7f2 fa12 	bl	80001d0 <__aeabi_dsub>
 800ddac:	e787      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800ddae:	a10a      	add	r1, pc, #40	@ (adr r1, 800ddd8 <__ieee754_atan2+0x158>)
 800ddb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddb4:	e783      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800ddb6:	a10c      	add	r1, pc, #48	@ (adr r1, 800dde8 <__ieee754_atan2+0x168>)
 800ddb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddbc:	e77f      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800ddbe:	2000      	movs	r0, #0
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	e77c      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800ddc4:	a106      	add	r1, pc, #24	@ (adr r1, 800dde0 <__ieee754_atan2+0x160>)
 800ddc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddca:	e778      	b.n	800dcbe <__ieee754_atan2+0x3e>
 800ddcc:	f3af 8000 	nop.w
 800ddd0:	33145c07 	.word	0x33145c07
 800ddd4:	3ca1a626 	.word	0x3ca1a626
 800ddd8:	54442d18 	.word	0x54442d18
 800dddc:	400921fb 	.word	0x400921fb
 800dde0:	54442d18 	.word	0x54442d18
 800dde4:	3ff921fb 	.word	0x3ff921fb
 800dde8:	54442d18 	.word	0x54442d18
 800ddec:	3fe921fb 	.word	0x3fe921fb
 800ddf0:	0800eee0 	.word	0x0800eee0
 800ddf4:	0800eec8 	.word	0x0800eec8
 800ddf8:	54442d18 	.word	0x54442d18
 800ddfc:	c00921fb 	.word	0xc00921fb
 800de00:	54442d18 	.word	0x54442d18
 800de04:	bff921fb 	.word	0xbff921fb
 800de08:	7ff00000 	.word	0x7ff00000
 800de0c:	00000000 	.word	0x00000000

0800de10 <__ieee754_rem_pio2>:
 800de10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de14:	ec57 6b10 	vmov	r6, r7, d0
 800de18:	4bc5      	ldr	r3, [pc, #788]	@ (800e130 <__ieee754_rem_pio2+0x320>)
 800de1a:	b08d      	sub	sp, #52	@ 0x34
 800de1c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800de20:	4598      	cmp	r8, r3
 800de22:	4604      	mov	r4, r0
 800de24:	9704      	str	r7, [sp, #16]
 800de26:	d807      	bhi.n	800de38 <__ieee754_rem_pio2+0x28>
 800de28:	2200      	movs	r2, #0
 800de2a:	2300      	movs	r3, #0
 800de2c:	ed80 0b00 	vstr	d0, [r0]
 800de30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800de34:	2500      	movs	r5, #0
 800de36:	e028      	b.n	800de8a <__ieee754_rem_pio2+0x7a>
 800de38:	4bbe      	ldr	r3, [pc, #760]	@ (800e134 <__ieee754_rem_pio2+0x324>)
 800de3a:	4598      	cmp	r8, r3
 800de3c:	d878      	bhi.n	800df30 <__ieee754_rem_pio2+0x120>
 800de3e:	9b04      	ldr	r3, [sp, #16]
 800de40:	4dbd      	ldr	r5, [pc, #756]	@ (800e138 <__ieee754_rem_pio2+0x328>)
 800de42:	2b00      	cmp	r3, #0
 800de44:	4630      	mov	r0, r6
 800de46:	a3ac      	add	r3, pc, #688	@ (adr r3, 800e0f8 <__ieee754_rem_pio2+0x2e8>)
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	4639      	mov	r1, r7
 800de4e:	dd38      	ble.n	800dec2 <__ieee754_rem_pio2+0xb2>
 800de50:	f7f2 f9be 	bl	80001d0 <__aeabi_dsub>
 800de54:	45a8      	cmp	r8, r5
 800de56:	4606      	mov	r6, r0
 800de58:	460f      	mov	r7, r1
 800de5a:	d01a      	beq.n	800de92 <__ieee754_rem_pio2+0x82>
 800de5c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800e100 <__ieee754_rem_pio2+0x2f0>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 f9b5 	bl	80001d0 <__aeabi_dsub>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4680      	mov	r8, r0
 800de6c:	4689      	mov	r9, r1
 800de6e:	4630      	mov	r0, r6
 800de70:	4639      	mov	r1, r7
 800de72:	f7f2 f9ad 	bl	80001d0 <__aeabi_dsub>
 800de76:	a3a2      	add	r3, pc, #648	@ (adr r3, 800e100 <__ieee754_rem_pio2+0x2f0>)
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	f7f2 f9a8 	bl	80001d0 <__aeabi_dsub>
 800de80:	e9c4 8900 	strd	r8, r9, [r4]
 800de84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de88:	2501      	movs	r5, #1
 800de8a:	4628      	mov	r0, r5
 800de8c:	b00d      	add	sp, #52	@ 0x34
 800de8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de92:	a39d      	add	r3, pc, #628	@ (adr r3, 800e108 <__ieee754_rem_pio2+0x2f8>)
 800de94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de98:	f7f2 f99a 	bl	80001d0 <__aeabi_dsub>
 800de9c:	a39c      	add	r3, pc, #624	@ (adr r3, 800e110 <__ieee754_rem_pio2+0x300>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	4606      	mov	r6, r0
 800dea4:	460f      	mov	r7, r1
 800dea6:	f7f2 f993 	bl	80001d0 <__aeabi_dsub>
 800deaa:	4602      	mov	r2, r0
 800deac:	460b      	mov	r3, r1
 800deae:	4680      	mov	r8, r0
 800deb0:	4689      	mov	r9, r1
 800deb2:	4630      	mov	r0, r6
 800deb4:	4639      	mov	r1, r7
 800deb6:	f7f2 f98b 	bl	80001d0 <__aeabi_dsub>
 800deba:	a395      	add	r3, pc, #596	@ (adr r3, 800e110 <__ieee754_rem_pio2+0x300>)
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	e7dc      	b.n	800de7c <__ieee754_rem_pio2+0x6c>
 800dec2:	f7f2 f987 	bl	80001d4 <__adddf3>
 800dec6:	45a8      	cmp	r8, r5
 800dec8:	4606      	mov	r6, r0
 800deca:	460f      	mov	r7, r1
 800decc:	d018      	beq.n	800df00 <__ieee754_rem_pio2+0xf0>
 800dece:	a38c      	add	r3, pc, #560	@ (adr r3, 800e100 <__ieee754_rem_pio2+0x2f0>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	f7f2 f97e 	bl	80001d4 <__adddf3>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	4680      	mov	r8, r0
 800dede:	4689      	mov	r9, r1
 800dee0:	4630      	mov	r0, r6
 800dee2:	4639      	mov	r1, r7
 800dee4:	f7f2 f974 	bl	80001d0 <__aeabi_dsub>
 800dee8:	a385      	add	r3, pc, #532	@ (adr r3, 800e100 <__ieee754_rem_pio2+0x2f0>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 f971 	bl	80001d4 <__adddf3>
 800def2:	f04f 35ff 	mov.w	r5, #4294967295
 800def6:	e9c4 8900 	strd	r8, r9, [r4]
 800defa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800defe:	e7c4      	b.n	800de8a <__ieee754_rem_pio2+0x7a>
 800df00:	a381      	add	r3, pc, #516	@ (adr r3, 800e108 <__ieee754_rem_pio2+0x2f8>)
 800df02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df06:	f7f2 f965 	bl	80001d4 <__adddf3>
 800df0a:	a381      	add	r3, pc, #516	@ (adr r3, 800e110 <__ieee754_rem_pio2+0x300>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	4606      	mov	r6, r0
 800df12:	460f      	mov	r7, r1
 800df14:	f7f2 f95e 	bl	80001d4 <__adddf3>
 800df18:	4602      	mov	r2, r0
 800df1a:	460b      	mov	r3, r1
 800df1c:	4680      	mov	r8, r0
 800df1e:	4689      	mov	r9, r1
 800df20:	4630      	mov	r0, r6
 800df22:	4639      	mov	r1, r7
 800df24:	f7f2 f954 	bl	80001d0 <__aeabi_dsub>
 800df28:	a379      	add	r3, pc, #484	@ (adr r3, 800e110 <__ieee754_rem_pio2+0x300>)
 800df2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2e:	e7de      	b.n	800deee <__ieee754_rem_pio2+0xde>
 800df30:	4b82      	ldr	r3, [pc, #520]	@ (800e13c <__ieee754_rem_pio2+0x32c>)
 800df32:	4598      	cmp	r8, r3
 800df34:	f200 80d1 	bhi.w	800e0da <__ieee754_rem_pio2+0x2ca>
 800df38:	f000 fafe 	bl	800e538 <fabs>
 800df3c:	ec57 6b10 	vmov	r6, r7, d0
 800df40:	a375      	add	r3, pc, #468	@ (adr r3, 800e118 <__ieee754_rem_pio2+0x308>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	4630      	mov	r0, r6
 800df48:	4639      	mov	r1, r7
 800df4a:	f7f2 faf9 	bl	8000540 <__aeabi_dmul>
 800df4e:	4b7c      	ldr	r3, [pc, #496]	@ (800e140 <__ieee754_rem_pio2+0x330>)
 800df50:	2200      	movs	r2, #0
 800df52:	f7f2 f93f 	bl	80001d4 <__adddf3>
 800df56:	f7f2 fda3 	bl	8000aa0 <__aeabi_d2iz>
 800df5a:	4605      	mov	r5, r0
 800df5c:	f7f2 fa86 	bl	800046c <__aeabi_i2d>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df68:	a363      	add	r3, pc, #396	@ (adr r3, 800e0f8 <__ieee754_rem_pio2+0x2e8>)
 800df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6e:	f7f2 fae7 	bl	8000540 <__aeabi_dmul>
 800df72:	4602      	mov	r2, r0
 800df74:	460b      	mov	r3, r1
 800df76:	4630      	mov	r0, r6
 800df78:	4639      	mov	r1, r7
 800df7a:	f7f2 f929 	bl	80001d0 <__aeabi_dsub>
 800df7e:	a360      	add	r3, pc, #384	@ (adr r3, 800e100 <__ieee754_rem_pio2+0x2f0>)
 800df80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df84:	4682      	mov	sl, r0
 800df86:	468b      	mov	fp, r1
 800df88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df8c:	f7f2 fad8 	bl	8000540 <__aeabi_dmul>
 800df90:	2d1f      	cmp	r5, #31
 800df92:	4606      	mov	r6, r0
 800df94:	460f      	mov	r7, r1
 800df96:	dc0c      	bgt.n	800dfb2 <__ieee754_rem_pio2+0x1a2>
 800df98:	4b6a      	ldr	r3, [pc, #424]	@ (800e144 <__ieee754_rem_pio2+0x334>)
 800df9a:	1e6a      	subs	r2, r5, #1
 800df9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfa0:	4543      	cmp	r3, r8
 800dfa2:	d006      	beq.n	800dfb2 <__ieee754_rem_pio2+0x1a2>
 800dfa4:	4632      	mov	r2, r6
 800dfa6:	463b      	mov	r3, r7
 800dfa8:	4650      	mov	r0, sl
 800dfaa:	4659      	mov	r1, fp
 800dfac:	f7f2 f910 	bl	80001d0 <__aeabi_dsub>
 800dfb0:	e00e      	b.n	800dfd0 <__ieee754_rem_pio2+0x1c0>
 800dfb2:	463b      	mov	r3, r7
 800dfb4:	4632      	mov	r2, r6
 800dfb6:	4650      	mov	r0, sl
 800dfb8:	4659      	mov	r1, fp
 800dfba:	f7f2 f909 	bl	80001d0 <__aeabi_dsub>
 800dfbe:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dfc2:	9305      	str	r3, [sp, #20]
 800dfc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dfc8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dfcc:	2b10      	cmp	r3, #16
 800dfce:	dc02      	bgt.n	800dfd6 <__ieee754_rem_pio2+0x1c6>
 800dfd0:	e9c4 0100 	strd	r0, r1, [r4]
 800dfd4:	e039      	b.n	800e04a <__ieee754_rem_pio2+0x23a>
 800dfd6:	a34c      	add	r3, pc, #304	@ (adr r3, 800e108 <__ieee754_rem_pio2+0x2f8>)
 800dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfe0:	f7f2 faae 	bl	8000540 <__aeabi_dmul>
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	460f      	mov	r7, r1
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4650      	mov	r0, sl
 800dfee:	4659      	mov	r1, fp
 800dff0:	f7f2 f8ee 	bl	80001d0 <__aeabi_dsub>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	4680      	mov	r8, r0
 800dffa:	4689      	mov	r9, r1
 800dffc:	4650      	mov	r0, sl
 800dffe:	4659      	mov	r1, fp
 800e000:	f7f2 f8e6 	bl	80001d0 <__aeabi_dsub>
 800e004:	4632      	mov	r2, r6
 800e006:	463b      	mov	r3, r7
 800e008:	f7f2 f8e2 	bl	80001d0 <__aeabi_dsub>
 800e00c:	a340      	add	r3, pc, #256	@ (adr r3, 800e110 <__ieee754_rem_pio2+0x300>)
 800e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e012:	4606      	mov	r6, r0
 800e014:	460f      	mov	r7, r1
 800e016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e01a:	f7f2 fa91 	bl	8000540 <__aeabi_dmul>
 800e01e:	4632      	mov	r2, r6
 800e020:	463b      	mov	r3, r7
 800e022:	f7f2 f8d5 	bl	80001d0 <__aeabi_dsub>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	4606      	mov	r6, r0
 800e02c:	460f      	mov	r7, r1
 800e02e:	4640      	mov	r0, r8
 800e030:	4649      	mov	r1, r9
 800e032:	f7f2 f8cd 	bl	80001d0 <__aeabi_dsub>
 800e036:	9a05      	ldr	r2, [sp, #20]
 800e038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	2b31      	cmp	r3, #49	@ 0x31
 800e040:	dc20      	bgt.n	800e084 <__ieee754_rem_pio2+0x274>
 800e042:	e9c4 0100 	strd	r0, r1, [r4]
 800e046:	46c2      	mov	sl, r8
 800e048:	46cb      	mov	fp, r9
 800e04a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e04e:	4650      	mov	r0, sl
 800e050:	4642      	mov	r2, r8
 800e052:	464b      	mov	r3, r9
 800e054:	4659      	mov	r1, fp
 800e056:	f7f2 f8bb 	bl	80001d0 <__aeabi_dsub>
 800e05a:	463b      	mov	r3, r7
 800e05c:	4632      	mov	r2, r6
 800e05e:	f7f2 f8b7 	bl	80001d0 <__aeabi_dsub>
 800e062:	9b04      	ldr	r3, [sp, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e06a:	f6bf af0e 	bge.w	800de8a <__ieee754_rem_pio2+0x7a>
 800e06e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800e072:	6063      	str	r3, [r4, #4]
 800e074:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e078:	f8c4 8000 	str.w	r8, [r4]
 800e07c:	60a0      	str	r0, [r4, #8]
 800e07e:	60e3      	str	r3, [r4, #12]
 800e080:	426d      	negs	r5, r5
 800e082:	e702      	b.n	800de8a <__ieee754_rem_pio2+0x7a>
 800e084:	a326      	add	r3, pc, #152	@ (adr r3, 800e120 <__ieee754_rem_pio2+0x310>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e08e:	f7f2 fa57 	bl	8000540 <__aeabi_dmul>
 800e092:	4606      	mov	r6, r0
 800e094:	460f      	mov	r7, r1
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	4640      	mov	r0, r8
 800e09c:	4649      	mov	r1, r9
 800e09e:	f7f2 f897 	bl	80001d0 <__aeabi_dsub>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4682      	mov	sl, r0
 800e0a8:	468b      	mov	fp, r1
 800e0aa:	4640      	mov	r0, r8
 800e0ac:	4649      	mov	r1, r9
 800e0ae:	f7f2 f88f 	bl	80001d0 <__aeabi_dsub>
 800e0b2:	4632      	mov	r2, r6
 800e0b4:	463b      	mov	r3, r7
 800e0b6:	f7f2 f88b 	bl	80001d0 <__aeabi_dsub>
 800e0ba:	a31b      	add	r3, pc, #108	@ (adr r3, 800e128 <__ieee754_rem_pio2+0x318>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	4606      	mov	r6, r0
 800e0c2:	460f      	mov	r7, r1
 800e0c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0c8:	f7f2 fa3a 	bl	8000540 <__aeabi_dmul>
 800e0cc:	4632      	mov	r2, r6
 800e0ce:	463b      	mov	r3, r7
 800e0d0:	f7f2 f87e 	bl	80001d0 <__aeabi_dsub>
 800e0d4:	4606      	mov	r6, r0
 800e0d6:	460f      	mov	r7, r1
 800e0d8:	e764      	b.n	800dfa4 <__ieee754_rem_pio2+0x194>
 800e0da:	4b1b      	ldr	r3, [pc, #108]	@ (800e148 <__ieee754_rem_pio2+0x338>)
 800e0dc:	4598      	cmp	r8, r3
 800e0de:	d935      	bls.n	800e14c <__ieee754_rem_pio2+0x33c>
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	4639      	mov	r1, r7
 800e0e8:	f7f2 f872 	bl	80001d0 <__aeabi_dsub>
 800e0ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e0f0:	e9c4 0100 	strd	r0, r1, [r4]
 800e0f4:	e69e      	b.n	800de34 <__ieee754_rem_pio2+0x24>
 800e0f6:	bf00      	nop
 800e0f8:	54400000 	.word	0x54400000
 800e0fc:	3ff921fb 	.word	0x3ff921fb
 800e100:	1a626331 	.word	0x1a626331
 800e104:	3dd0b461 	.word	0x3dd0b461
 800e108:	1a600000 	.word	0x1a600000
 800e10c:	3dd0b461 	.word	0x3dd0b461
 800e110:	2e037073 	.word	0x2e037073
 800e114:	3ba3198a 	.word	0x3ba3198a
 800e118:	6dc9c883 	.word	0x6dc9c883
 800e11c:	3fe45f30 	.word	0x3fe45f30
 800e120:	2e000000 	.word	0x2e000000
 800e124:	3ba3198a 	.word	0x3ba3198a
 800e128:	252049c1 	.word	0x252049c1
 800e12c:	397b839a 	.word	0x397b839a
 800e130:	3fe921fb 	.word	0x3fe921fb
 800e134:	4002d97b 	.word	0x4002d97b
 800e138:	3ff921fb 	.word	0x3ff921fb
 800e13c:	413921fb 	.word	0x413921fb
 800e140:	3fe00000 	.word	0x3fe00000
 800e144:	0800eef8 	.word	0x0800eef8
 800e148:	7fefffff 	.word	0x7fefffff
 800e14c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e150:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800e154:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e158:	4630      	mov	r0, r6
 800e15a:	460f      	mov	r7, r1
 800e15c:	f7f2 fca0 	bl	8000aa0 <__aeabi_d2iz>
 800e160:	f7f2 f984 	bl	800046c <__aeabi_i2d>
 800e164:	4602      	mov	r2, r0
 800e166:	460b      	mov	r3, r1
 800e168:	4630      	mov	r0, r6
 800e16a:	4639      	mov	r1, r7
 800e16c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e170:	f7f2 f82e 	bl	80001d0 <__aeabi_dsub>
 800e174:	4b22      	ldr	r3, [pc, #136]	@ (800e200 <__ieee754_rem_pio2+0x3f0>)
 800e176:	2200      	movs	r2, #0
 800e178:	f7f2 f9e2 	bl	8000540 <__aeabi_dmul>
 800e17c:	460f      	mov	r7, r1
 800e17e:	4606      	mov	r6, r0
 800e180:	f7f2 fc8e 	bl	8000aa0 <__aeabi_d2iz>
 800e184:	f7f2 f972 	bl	800046c <__aeabi_i2d>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	4630      	mov	r0, r6
 800e18e:	4639      	mov	r1, r7
 800e190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e194:	f7f2 f81c 	bl	80001d0 <__aeabi_dsub>
 800e198:	4b19      	ldr	r3, [pc, #100]	@ (800e200 <__ieee754_rem_pio2+0x3f0>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	f7f2 f9d0 	bl	8000540 <__aeabi_dmul>
 800e1a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800e1a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800e1a8:	f04f 0803 	mov.w	r8, #3
 800e1ac:	2600      	movs	r6, #0
 800e1ae:	2700      	movs	r7, #0
 800e1b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	463b      	mov	r3, r7
 800e1b8:	46c2      	mov	sl, r8
 800e1ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1be:	f7f2 fc27 	bl	8000a10 <__aeabi_dcmpeq>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d1f4      	bne.n	800e1b0 <__ieee754_rem_pio2+0x3a0>
 800e1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e204 <__ieee754_rem_pio2+0x3f4>)
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	462a      	mov	r2, r5
 800e1d0:	4653      	mov	r3, sl
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	a806      	add	r0, sp, #24
 800e1d6:	f000 f9b7 	bl	800e548 <__kernel_rem_pio2>
 800e1da:	9b04      	ldr	r3, [sp, #16]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	4605      	mov	r5, r0
 800e1e0:	f6bf ae53 	bge.w	800de8a <__ieee754_rem_pio2+0x7a>
 800e1e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e1e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1ec:	e9c4 2300 	strd	r2, r3, [r4]
 800e1f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e1f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e1fc:	e740      	b.n	800e080 <__ieee754_rem_pio2+0x270>
 800e1fe:	bf00      	nop
 800e200:	41700000 	.word	0x41700000
 800e204:	0800ef78 	.word	0x0800ef78

0800e208 <atan>:
 800e208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20c:	ec55 4b10 	vmov	r4, r5, d0
 800e210:	4bbf      	ldr	r3, [pc, #764]	@ (800e510 <atan+0x308>)
 800e212:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e216:	429e      	cmp	r6, r3
 800e218:	46ab      	mov	fp, r5
 800e21a:	d918      	bls.n	800e24e <atan+0x46>
 800e21c:	4bbd      	ldr	r3, [pc, #756]	@ (800e514 <atan+0x30c>)
 800e21e:	429e      	cmp	r6, r3
 800e220:	d801      	bhi.n	800e226 <atan+0x1e>
 800e222:	d109      	bne.n	800e238 <atan+0x30>
 800e224:	b144      	cbz	r4, 800e238 <atan+0x30>
 800e226:	4622      	mov	r2, r4
 800e228:	462b      	mov	r3, r5
 800e22a:	4620      	mov	r0, r4
 800e22c:	4629      	mov	r1, r5
 800e22e:	f7f1 ffd1 	bl	80001d4 <__adddf3>
 800e232:	4604      	mov	r4, r0
 800e234:	460d      	mov	r5, r1
 800e236:	e006      	b.n	800e246 <atan+0x3e>
 800e238:	f1bb 0f00 	cmp.w	fp, #0
 800e23c:	f340 812b 	ble.w	800e496 <atan+0x28e>
 800e240:	a597      	add	r5, pc, #604	@ (adr r5, 800e4a0 <atan+0x298>)
 800e242:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e246:	ec45 4b10 	vmov	d0, r4, r5
 800e24a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24e:	4bb2      	ldr	r3, [pc, #712]	@ (800e518 <atan+0x310>)
 800e250:	429e      	cmp	r6, r3
 800e252:	d813      	bhi.n	800e27c <atan+0x74>
 800e254:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e258:	429e      	cmp	r6, r3
 800e25a:	d80c      	bhi.n	800e276 <atan+0x6e>
 800e25c:	a392      	add	r3, pc, #584	@ (adr r3, 800e4a8 <atan+0x2a0>)
 800e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e262:	4620      	mov	r0, r4
 800e264:	4629      	mov	r1, r5
 800e266:	f7f1 ffb5 	bl	80001d4 <__adddf3>
 800e26a:	4bac      	ldr	r3, [pc, #688]	@ (800e51c <atan+0x314>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	f7f2 fbf7 	bl	8000a60 <__aeabi_dcmpgt>
 800e272:	2800      	cmp	r0, #0
 800e274:	d1e7      	bne.n	800e246 <atan+0x3e>
 800e276:	f04f 3aff 	mov.w	sl, #4294967295
 800e27a:	e029      	b.n	800e2d0 <atan+0xc8>
 800e27c:	f000 f95c 	bl	800e538 <fabs>
 800e280:	4ba7      	ldr	r3, [pc, #668]	@ (800e520 <atan+0x318>)
 800e282:	429e      	cmp	r6, r3
 800e284:	ec55 4b10 	vmov	r4, r5, d0
 800e288:	f200 80bc 	bhi.w	800e404 <atan+0x1fc>
 800e28c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e290:	429e      	cmp	r6, r3
 800e292:	f200 809e 	bhi.w	800e3d2 <atan+0x1ca>
 800e296:	4622      	mov	r2, r4
 800e298:	462b      	mov	r3, r5
 800e29a:	4620      	mov	r0, r4
 800e29c:	4629      	mov	r1, r5
 800e29e:	f7f1 ff99 	bl	80001d4 <__adddf3>
 800e2a2:	4b9e      	ldr	r3, [pc, #632]	@ (800e51c <atan+0x314>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f7f1 ff93 	bl	80001d0 <__aeabi_dsub>
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	460f      	mov	r7, r1
 800e2b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	f7f1 ff8c 	bl	80001d4 <__adddf3>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f2 fa66 	bl	8000794 <__aeabi_ddiv>
 800e2c8:	f04f 0a00 	mov.w	sl, #0
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	460d      	mov	r5, r1
 800e2d0:	4622      	mov	r2, r4
 800e2d2:	462b      	mov	r3, r5
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	4629      	mov	r1, r5
 800e2d8:	f7f2 f932 	bl	8000540 <__aeabi_dmul>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4680      	mov	r8, r0
 800e2e2:	4689      	mov	r9, r1
 800e2e4:	f7f2 f92c 	bl	8000540 <__aeabi_dmul>
 800e2e8:	a371      	add	r3, pc, #452	@ (adr r3, 800e4b0 <atan+0x2a8>)
 800e2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	460f      	mov	r7, r1
 800e2f2:	f7f2 f925 	bl	8000540 <__aeabi_dmul>
 800e2f6:	a370      	add	r3, pc, #448	@ (adr r3, 800e4b8 <atan+0x2b0>)
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	f7f1 ff6a 	bl	80001d4 <__adddf3>
 800e300:	4632      	mov	r2, r6
 800e302:	463b      	mov	r3, r7
 800e304:	f7f2 f91c 	bl	8000540 <__aeabi_dmul>
 800e308:	a36d      	add	r3, pc, #436	@ (adr r3, 800e4c0 <atan+0x2b8>)
 800e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30e:	f7f1 ff61 	bl	80001d4 <__adddf3>
 800e312:	4632      	mov	r2, r6
 800e314:	463b      	mov	r3, r7
 800e316:	f7f2 f913 	bl	8000540 <__aeabi_dmul>
 800e31a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e4c8 <atan+0x2c0>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	f7f1 ff58 	bl	80001d4 <__adddf3>
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	f7f2 f90a 	bl	8000540 <__aeabi_dmul>
 800e32c:	a368      	add	r3, pc, #416	@ (adr r3, 800e4d0 <atan+0x2c8>)
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	f7f1 ff4f 	bl	80001d4 <__adddf3>
 800e336:	4632      	mov	r2, r6
 800e338:	463b      	mov	r3, r7
 800e33a:	f7f2 f901 	bl	8000540 <__aeabi_dmul>
 800e33e:	a366      	add	r3, pc, #408	@ (adr r3, 800e4d8 <atan+0x2d0>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	f7f1 ff46 	bl	80001d4 <__adddf3>
 800e348:	4642      	mov	r2, r8
 800e34a:	464b      	mov	r3, r9
 800e34c:	f7f2 f8f8 	bl	8000540 <__aeabi_dmul>
 800e350:	a363      	add	r3, pc, #396	@ (adr r3, 800e4e0 <atan+0x2d8>)
 800e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e356:	4680      	mov	r8, r0
 800e358:	4689      	mov	r9, r1
 800e35a:	4630      	mov	r0, r6
 800e35c:	4639      	mov	r1, r7
 800e35e:	f7f2 f8ef 	bl	8000540 <__aeabi_dmul>
 800e362:	a361      	add	r3, pc, #388	@ (adr r3, 800e4e8 <atan+0x2e0>)
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	f7f1 ff32 	bl	80001d0 <__aeabi_dsub>
 800e36c:	4632      	mov	r2, r6
 800e36e:	463b      	mov	r3, r7
 800e370:	f7f2 f8e6 	bl	8000540 <__aeabi_dmul>
 800e374:	a35e      	add	r3, pc, #376	@ (adr r3, 800e4f0 <atan+0x2e8>)
 800e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37a:	f7f1 ff29 	bl	80001d0 <__aeabi_dsub>
 800e37e:	4632      	mov	r2, r6
 800e380:	463b      	mov	r3, r7
 800e382:	f7f2 f8dd 	bl	8000540 <__aeabi_dmul>
 800e386:	a35c      	add	r3, pc, #368	@ (adr r3, 800e4f8 <atan+0x2f0>)
 800e388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38c:	f7f1 ff20 	bl	80001d0 <__aeabi_dsub>
 800e390:	4632      	mov	r2, r6
 800e392:	463b      	mov	r3, r7
 800e394:	f7f2 f8d4 	bl	8000540 <__aeabi_dmul>
 800e398:	a359      	add	r3, pc, #356	@ (adr r3, 800e500 <atan+0x2f8>)
 800e39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39e:	f7f1 ff17 	bl	80001d0 <__aeabi_dsub>
 800e3a2:	4632      	mov	r2, r6
 800e3a4:	463b      	mov	r3, r7
 800e3a6:	f7f2 f8cb 	bl	8000540 <__aeabi_dmul>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	4640      	mov	r0, r8
 800e3b0:	4649      	mov	r1, r9
 800e3b2:	f7f1 ff0f 	bl	80001d4 <__adddf3>
 800e3b6:	4622      	mov	r2, r4
 800e3b8:	462b      	mov	r3, r5
 800e3ba:	f7f2 f8c1 	bl	8000540 <__aeabi_dmul>
 800e3be:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	d148      	bne.n	800e45a <atan+0x252>
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	4629      	mov	r1, r5
 800e3cc:	f7f1 ff00 	bl	80001d0 <__aeabi_dsub>
 800e3d0:	e72f      	b.n	800e232 <atan+0x2a>
 800e3d2:	4b52      	ldr	r3, [pc, #328]	@ (800e51c <atan+0x314>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	4629      	mov	r1, r5
 800e3da:	f7f1 fef9 	bl	80001d0 <__aeabi_dsub>
 800e3de:	4b4f      	ldr	r3, [pc, #316]	@ (800e51c <atan+0x314>)
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	460f      	mov	r7, r1
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	f7f1 fef3 	bl	80001d4 <__adddf3>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	4639      	mov	r1, r7
 800e3f6:	f7f2 f9cd 	bl	8000794 <__aeabi_ddiv>
 800e3fa:	f04f 0a01 	mov.w	sl, #1
 800e3fe:	4604      	mov	r4, r0
 800e400:	460d      	mov	r5, r1
 800e402:	e765      	b.n	800e2d0 <atan+0xc8>
 800e404:	4b47      	ldr	r3, [pc, #284]	@ (800e524 <atan+0x31c>)
 800e406:	429e      	cmp	r6, r3
 800e408:	d21c      	bcs.n	800e444 <atan+0x23c>
 800e40a:	4b47      	ldr	r3, [pc, #284]	@ (800e528 <atan+0x320>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	4620      	mov	r0, r4
 800e410:	4629      	mov	r1, r5
 800e412:	f7f1 fedd 	bl	80001d0 <__aeabi_dsub>
 800e416:	4b44      	ldr	r3, [pc, #272]	@ (800e528 <atan+0x320>)
 800e418:	4606      	mov	r6, r0
 800e41a:	460f      	mov	r7, r1
 800e41c:	2200      	movs	r2, #0
 800e41e:	4620      	mov	r0, r4
 800e420:	4629      	mov	r1, r5
 800e422:	f7f2 f88d 	bl	8000540 <__aeabi_dmul>
 800e426:	4b3d      	ldr	r3, [pc, #244]	@ (800e51c <atan+0x314>)
 800e428:	2200      	movs	r2, #0
 800e42a:	f7f1 fed3 	bl	80001d4 <__adddf3>
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4630      	mov	r0, r6
 800e434:	4639      	mov	r1, r7
 800e436:	f7f2 f9ad 	bl	8000794 <__aeabi_ddiv>
 800e43a:	f04f 0a02 	mov.w	sl, #2
 800e43e:	4604      	mov	r4, r0
 800e440:	460d      	mov	r5, r1
 800e442:	e745      	b.n	800e2d0 <atan+0xc8>
 800e444:	4622      	mov	r2, r4
 800e446:	462b      	mov	r3, r5
 800e448:	4938      	ldr	r1, [pc, #224]	@ (800e52c <atan+0x324>)
 800e44a:	2000      	movs	r0, #0
 800e44c:	f7f2 f9a2 	bl	8000794 <__aeabi_ddiv>
 800e450:	f04f 0a03 	mov.w	sl, #3
 800e454:	4604      	mov	r4, r0
 800e456:	460d      	mov	r5, r1
 800e458:	e73a      	b.n	800e2d0 <atan+0xc8>
 800e45a:	4b35      	ldr	r3, [pc, #212]	@ (800e530 <atan+0x328>)
 800e45c:	4e35      	ldr	r6, [pc, #212]	@ (800e534 <atan+0x32c>)
 800e45e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 feb3 	bl	80001d0 <__aeabi_dsub>
 800e46a:	4622      	mov	r2, r4
 800e46c:	462b      	mov	r3, r5
 800e46e:	f7f1 feaf 	bl	80001d0 <__aeabi_dsub>
 800e472:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e476:	4602      	mov	r2, r0
 800e478:	460b      	mov	r3, r1
 800e47a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e47e:	f7f1 fea7 	bl	80001d0 <__aeabi_dsub>
 800e482:	f1bb 0f00 	cmp.w	fp, #0
 800e486:	4604      	mov	r4, r0
 800e488:	460d      	mov	r5, r1
 800e48a:	f6bf aedc 	bge.w	800e246 <atan+0x3e>
 800e48e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e492:	461d      	mov	r5, r3
 800e494:	e6d7      	b.n	800e246 <atan+0x3e>
 800e496:	a51c      	add	r5, pc, #112	@ (adr r5, 800e508 <atan+0x300>)
 800e498:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e49c:	e6d3      	b.n	800e246 <atan+0x3e>
 800e49e:	bf00      	nop
 800e4a0:	54442d18 	.word	0x54442d18
 800e4a4:	3ff921fb 	.word	0x3ff921fb
 800e4a8:	8800759c 	.word	0x8800759c
 800e4ac:	7e37e43c 	.word	0x7e37e43c
 800e4b0:	e322da11 	.word	0xe322da11
 800e4b4:	3f90ad3a 	.word	0x3f90ad3a
 800e4b8:	24760deb 	.word	0x24760deb
 800e4bc:	3fa97b4b 	.word	0x3fa97b4b
 800e4c0:	a0d03d51 	.word	0xa0d03d51
 800e4c4:	3fb10d66 	.word	0x3fb10d66
 800e4c8:	c54c206e 	.word	0xc54c206e
 800e4cc:	3fb745cd 	.word	0x3fb745cd
 800e4d0:	920083ff 	.word	0x920083ff
 800e4d4:	3fc24924 	.word	0x3fc24924
 800e4d8:	5555550d 	.word	0x5555550d
 800e4dc:	3fd55555 	.word	0x3fd55555
 800e4e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800e4e4:	bfa2b444 	.word	0xbfa2b444
 800e4e8:	52defd9a 	.word	0x52defd9a
 800e4ec:	3fadde2d 	.word	0x3fadde2d
 800e4f0:	af749a6d 	.word	0xaf749a6d
 800e4f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800e4f8:	fe231671 	.word	0xfe231671
 800e4fc:	3fbc71c6 	.word	0x3fbc71c6
 800e500:	9998ebc4 	.word	0x9998ebc4
 800e504:	3fc99999 	.word	0x3fc99999
 800e508:	54442d18 	.word	0x54442d18
 800e50c:	bff921fb 	.word	0xbff921fb
 800e510:	440fffff 	.word	0x440fffff
 800e514:	7ff00000 	.word	0x7ff00000
 800e518:	3fdbffff 	.word	0x3fdbffff
 800e51c:	3ff00000 	.word	0x3ff00000
 800e520:	3ff2ffff 	.word	0x3ff2ffff
 800e524:	40038000 	.word	0x40038000
 800e528:	3ff80000 	.word	0x3ff80000
 800e52c:	bff00000 	.word	0xbff00000
 800e530:	0800f080 	.word	0x0800f080
 800e534:	0800f0a0 	.word	0x0800f0a0

0800e538 <fabs>:
 800e538:	ec51 0b10 	vmov	r0, r1, d0
 800e53c:	4602      	mov	r2, r0
 800e53e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e542:	ec43 2b10 	vmov	d0, r2, r3
 800e546:	4770      	bx	lr

0800e548 <__kernel_rem_pio2>:
 800e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54c:	ed2d 8b02 	vpush	{d8}
 800e550:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800e554:	f112 0f14 	cmn.w	r2, #20
 800e558:	9306      	str	r3, [sp, #24]
 800e55a:	9104      	str	r1, [sp, #16]
 800e55c:	4bbe      	ldr	r3, [pc, #760]	@ (800e858 <__kernel_rem_pio2+0x310>)
 800e55e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800e560:	9008      	str	r0, [sp, #32]
 800e562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	9b06      	ldr	r3, [sp, #24]
 800e56a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e56e:	bfa8      	it	ge
 800e570:	1ed4      	subge	r4, r2, #3
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	bfb2      	itee	lt
 800e576:	2400      	movlt	r4, #0
 800e578:	2318      	movge	r3, #24
 800e57a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e57e:	f06f 0317 	mvn.w	r3, #23
 800e582:	fb04 3303 	mla	r3, r4, r3, r3
 800e586:	eb03 0b02 	add.w	fp, r3, r2
 800e58a:	9b00      	ldr	r3, [sp, #0]
 800e58c:	9a05      	ldr	r2, [sp, #20]
 800e58e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e848 <__kernel_rem_pio2+0x300>
 800e592:	eb03 0802 	add.w	r8, r3, r2
 800e596:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e598:	1aa7      	subs	r7, r4, r2
 800e59a:	ae20      	add	r6, sp, #128	@ 0x80
 800e59c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e5a0:	2500      	movs	r5, #0
 800e5a2:	4545      	cmp	r5, r8
 800e5a4:	dd13      	ble.n	800e5ce <__kernel_rem_pio2+0x86>
 800e5a6:	9b06      	ldr	r3, [sp, #24]
 800e5a8:	aa20      	add	r2, sp, #128	@ 0x80
 800e5aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e5ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800e5b2:	f04f 0800 	mov.w	r8, #0
 800e5b6:	9b00      	ldr	r3, [sp, #0]
 800e5b8:	4598      	cmp	r8, r3
 800e5ba:	dc31      	bgt.n	800e620 <__kernel_rem_pio2+0xd8>
 800e5bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e848 <__kernel_rem_pio2+0x300>
 800e5c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e5c8:	462f      	mov	r7, r5
 800e5ca:	2600      	movs	r6, #0
 800e5cc:	e01b      	b.n	800e606 <__kernel_rem_pio2+0xbe>
 800e5ce:	42ef      	cmn	r7, r5
 800e5d0:	d407      	bmi.n	800e5e2 <__kernel_rem_pio2+0x9a>
 800e5d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e5d6:	f7f1 ff49 	bl	800046c <__aeabi_i2d>
 800e5da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e5de:	3501      	adds	r5, #1
 800e5e0:	e7df      	b.n	800e5a2 <__kernel_rem_pio2+0x5a>
 800e5e2:	ec51 0b18 	vmov	r0, r1, d8
 800e5e6:	e7f8      	b.n	800e5da <__kernel_rem_pio2+0x92>
 800e5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e5f0:	f7f1 ffa6 	bl	8000540 <__aeabi_dmul>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5fc:	f7f1 fdea 	bl	80001d4 <__adddf3>
 800e600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e604:	3601      	adds	r6, #1
 800e606:	9b05      	ldr	r3, [sp, #20]
 800e608:	429e      	cmp	r6, r3
 800e60a:	f1a7 0708 	sub.w	r7, r7, #8
 800e60e:	ddeb      	ble.n	800e5e8 <__kernel_rem_pio2+0xa0>
 800e610:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e614:	f108 0801 	add.w	r8, r8, #1
 800e618:	ecaa 7b02 	vstmia	sl!, {d7}
 800e61c:	3508      	adds	r5, #8
 800e61e:	e7ca      	b.n	800e5b6 <__kernel_rem_pio2+0x6e>
 800e620:	9b00      	ldr	r3, [sp, #0]
 800e622:	f8dd 8000 	ldr.w	r8, [sp]
 800e626:	aa0c      	add	r2, sp, #48	@ 0x30
 800e628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e62c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e62e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e630:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e634:	9309      	str	r3, [sp, #36]	@ 0x24
 800e636:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e63a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e63c:	ab98      	add	r3, sp, #608	@ 0x260
 800e63e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e642:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800e646:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e64a:	ac0c      	add	r4, sp, #48	@ 0x30
 800e64c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e64e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800e652:	46a1      	mov	r9, r4
 800e654:	46c2      	mov	sl, r8
 800e656:	f1ba 0f00 	cmp.w	sl, #0
 800e65a:	f1a5 0508 	sub.w	r5, r5, #8
 800e65e:	dc77      	bgt.n	800e750 <__kernel_rem_pio2+0x208>
 800e660:	4658      	mov	r0, fp
 800e662:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e666:	f000 fac7 	bl	800ebf8 <scalbn>
 800e66a:	ec57 6b10 	vmov	r6, r7, d0
 800e66e:	2200      	movs	r2, #0
 800e670:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e674:	4630      	mov	r0, r6
 800e676:	4639      	mov	r1, r7
 800e678:	f7f1 ff62 	bl	8000540 <__aeabi_dmul>
 800e67c:	ec41 0b10 	vmov	d0, r0, r1
 800e680:	f000 fb3a 	bl	800ecf8 <floor>
 800e684:	4b75      	ldr	r3, [pc, #468]	@ (800e85c <__kernel_rem_pio2+0x314>)
 800e686:	ec51 0b10 	vmov	r0, r1, d0
 800e68a:	2200      	movs	r2, #0
 800e68c:	f7f1 ff58 	bl	8000540 <__aeabi_dmul>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4630      	mov	r0, r6
 800e696:	4639      	mov	r1, r7
 800e698:	f7f1 fd9a 	bl	80001d0 <__aeabi_dsub>
 800e69c:	460f      	mov	r7, r1
 800e69e:	4606      	mov	r6, r0
 800e6a0:	f7f2 f9fe 	bl	8000aa0 <__aeabi_d2iz>
 800e6a4:	9002      	str	r0, [sp, #8]
 800e6a6:	f7f1 fee1 	bl	800046c <__aeabi_i2d>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	4639      	mov	r1, r7
 800e6b2:	f7f1 fd8d 	bl	80001d0 <__aeabi_dsub>
 800e6b6:	f1bb 0f00 	cmp.w	fp, #0
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	460f      	mov	r7, r1
 800e6be:	dd6c      	ble.n	800e79a <__kernel_rem_pio2+0x252>
 800e6c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800e6c4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6c6:	9d02      	ldr	r5, [sp, #8]
 800e6c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6cc:	f1cb 0018 	rsb	r0, fp, #24
 800e6d0:	fa43 f200 	asr.w	r2, r3, r0
 800e6d4:	4415      	add	r5, r2
 800e6d6:	4082      	lsls	r2, r0
 800e6d8:	1a9b      	subs	r3, r3, r2
 800e6da:	aa0c      	add	r2, sp, #48	@ 0x30
 800e6dc:	9502      	str	r5, [sp, #8]
 800e6de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e6e2:	f1cb 0217 	rsb	r2, fp, #23
 800e6e6:	fa43 f902 	asr.w	r9, r3, r2
 800e6ea:	f1b9 0f00 	cmp.w	r9, #0
 800e6ee:	dd64      	ble.n	800e7ba <__kernel_rem_pio2+0x272>
 800e6f0:	9b02      	ldr	r3, [sp, #8]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	9302      	str	r3, [sp, #8]
 800e6f8:	4615      	mov	r5, r2
 800e6fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800e6fe:	4590      	cmp	r8, r2
 800e700:	f300 80b8 	bgt.w	800e874 <__kernel_rem_pio2+0x32c>
 800e704:	f1bb 0f00 	cmp.w	fp, #0
 800e708:	dd07      	ble.n	800e71a <__kernel_rem_pio2+0x1d2>
 800e70a:	f1bb 0f01 	cmp.w	fp, #1
 800e70e:	f000 80bf 	beq.w	800e890 <__kernel_rem_pio2+0x348>
 800e712:	f1bb 0f02 	cmp.w	fp, #2
 800e716:	f000 80c6 	beq.w	800e8a6 <__kernel_rem_pio2+0x35e>
 800e71a:	f1b9 0f02 	cmp.w	r9, #2
 800e71e:	d14c      	bne.n	800e7ba <__kernel_rem_pio2+0x272>
 800e720:	4632      	mov	r2, r6
 800e722:	463b      	mov	r3, r7
 800e724:	494e      	ldr	r1, [pc, #312]	@ (800e860 <__kernel_rem_pio2+0x318>)
 800e726:	2000      	movs	r0, #0
 800e728:	f7f1 fd52 	bl	80001d0 <__aeabi_dsub>
 800e72c:	4606      	mov	r6, r0
 800e72e:	460f      	mov	r7, r1
 800e730:	2d00      	cmp	r5, #0
 800e732:	d042      	beq.n	800e7ba <__kernel_rem_pio2+0x272>
 800e734:	4658      	mov	r0, fp
 800e736:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e850 <__kernel_rem_pio2+0x308>
 800e73a:	f000 fa5d 	bl	800ebf8 <scalbn>
 800e73e:	4630      	mov	r0, r6
 800e740:	4639      	mov	r1, r7
 800e742:	ec53 2b10 	vmov	r2, r3, d0
 800e746:	f7f1 fd43 	bl	80001d0 <__aeabi_dsub>
 800e74a:	4606      	mov	r6, r0
 800e74c:	460f      	mov	r7, r1
 800e74e:	e034      	b.n	800e7ba <__kernel_rem_pio2+0x272>
 800e750:	4b44      	ldr	r3, [pc, #272]	@ (800e864 <__kernel_rem_pio2+0x31c>)
 800e752:	2200      	movs	r2, #0
 800e754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e758:	f7f1 fef2 	bl	8000540 <__aeabi_dmul>
 800e75c:	f7f2 f9a0 	bl	8000aa0 <__aeabi_d2iz>
 800e760:	f7f1 fe84 	bl	800046c <__aeabi_i2d>
 800e764:	4b40      	ldr	r3, [pc, #256]	@ (800e868 <__kernel_rem_pio2+0x320>)
 800e766:	2200      	movs	r2, #0
 800e768:	4606      	mov	r6, r0
 800e76a:	460f      	mov	r7, r1
 800e76c:	f7f1 fee8 	bl	8000540 <__aeabi_dmul>
 800e770:	4602      	mov	r2, r0
 800e772:	460b      	mov	r3, r1
 800e774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e778:	f7f1 fd2a 	bl	80001d0 <__aeabi_dsub>
 800e77c:	f7f2 f990 	bl	8000aa0 <__aeabi_d2iz>
 800e780:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e784:	f849 0b04 	str.w	r0, [r9], #4
 800e788:	4639      	mov	r1, r7
 800e78a:	4630      	mov	r0, r6
 800e78c:	f7f1 fd22 	bl	80001d4 <__adddf3>
 800e790:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e798:	e75d      	b.n	800e656 <__kernel_rem_pio2+0x10e>
 800e79a:	d107      	bne.n	800e7ac <__kernel_rem_pio2+0x264>
 800e79c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e7a0:	aa0c      	add	r2, sp, #48	@ 0x30
 800e7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e7aa:	e79e      	b.n	800e6ea <__kernel_rem_pio2+0x1a2>
 800e7ac:	4b2f      	ldr	r3, [pc, #188]	@ (800e86c <__kernel_rem_pio2+0x324>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f7f2 f94c 	bl	8000a4c <__aeabi_dcmpge>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d143      	bne.n	800e840 <__kernel_rem_pio2+0x2f8>
 800e7b8:	4681      	mov	r9, r0
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4630      	mov	r0, r6
 800e7c0:	4639      	mov	r1, r7
 800e7c2:	f7f2 f925 	bl	8000a10 <__aeabi_dcmpeq>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f000 80bf 	beq.w	800e94a <__kernel_rem_pio2+0x402>
 800e7cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	9900      	ldr	r1, [sp, #0]
 800e7d4:	428b      	cmp	r3, r1
 800e7d6:	da6e      	bge.n	800e8b6 <__kernel_rem_pio2+0x36e>
 800e7d8:	2a00      	cmp	r2, #0
 800e7da:	f000 8089 	beq.w	800e8f0 <__kernel_rem_pio2+0x3a8>
 800e7de:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e7e4:	f1ab 0b18 	sub.w	fp, fp, #24
 800e7e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d0f6      	beq.n	800e7de <__kernel_rem_pio2+0x296>
 800e7f0:	4658      	mov	r0, fp
 800e7f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e850 <__kernel_rem_pio2+0x308>
 800e7f6:	f000 f9ff 	bl	800ebf8 <scalbn>
 800e7fa:	f108 0301 	add.w	r3, r8, #1
 800e7fe:	00da      	lsls	r2, r3, #3
 800e800:	9205      	str	r2, [sp, #20]
 800e802:	ec55 4b10 	vmov	r4, r5, d0
 800e806:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e808:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e864 <__kernel_rem_pio2+0x31c>
 800e80c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e810:	4646      	mov	r6, r8
 800e812:	f04f 0a00 	mov.w	sl, #0
 800e816:	2e00      	cmp	r6, #0
 800e818:	f280 80cf 	bge.w	800e9ba <__kernel_rem_pio2+0x472>
 800e81c:	4644      	mov	r4, r8
 800e81e:	2c00      	cmp	r4, #0
 800e820:	f2c0 80fd 	blt.w	800ea1e <__kernel_rem_pio2+0x4d6>
 800e824:	4b12      	ldr	r3, [pc, #72]	@ (800e870 <__kernel_rem_pio2+0x328>)
 800e826:	461f      	mov	r7, r3
 800e828:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e82a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e82e:	9306      	str	r3, [sp, #24]
 800e830:	f04f 0a00 	mov.w	sl, #0
 800e834:	f04f 0b00 	mov.w	fp, #0
 800e838:	2600      	movs	r6, #0
 800e83a:	eba8 0504 	sub.w	r5, r8, r4
 800e83e:	e0e2      	b.n	800ea06 <__kernel_rem_pio2+0x4be>
 800e840:	f04f 0902 	mov.w	r9, #2
 800e844:	e754      	b.n	800e6f0 <__kernel_rem_pio2+0x1a8>
 800e846:	bf00      	nop
	...
 800e854:	3ff00000 	.word	0x3ff00000
 800e858:	0800f100 	.word	0x0800f100
 800e85c:	40200000 	.word	0x40200000
 800e860:	3ff00000 	.word	0x3ff00000
 800e864:	3e700000 	.word	0x3e700000
 800e868:	41700000 	.word	0x41700000
 800e86c:	3fe00000 	.word	0x3fe00000
 800e870:	0800f0c0 	.word	0x0800f0c0
 800e874:	f854 3b04 	ldr.w	r3, [r4], #4
 800e878:	b945      	cbnz	r5, 800e88c <__kernel_rem_pio2+0x344>
 800e87a:	b123      	cbz	r3, 800e886 <__kernel_rem_pio2+0x33e>
 800e87c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e880:	f844 3c04 	str.w	r3, [r4, #-4]
 800e884:	2301      	movs	r3, #1
 800e886:	3201      	adds	r2, #1
 800e888:	461d      	mov	r5, r3
 800e88a:	e738      	b.n	800e6fe <__kernel_rem_pio2+0x1b6>
 800e88c:	1acb      	subs	r3, r1, r3
 800e88e:	e7f7      	b.n	800e880 <__kernel_rem_pio2+0x338>
 800e890:	f108 32ff 	add.w	r2, r8, #4294967295
 800e894:	ab0c      	add	r3, sp, #48	@ 0x30
 800e896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e89a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e89e:	a90c      	add	r1, sp, #48	@ 0x30
 800e8a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e8a4:	e739      	b.n	800e71a <__kernel_rem_pio2+0x1d2>
 800e8a6:	f108 32ff 	add.w	r2, r8, #4294967295
 800e8aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800e8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8b4:	e7f3      	b.n	800e89e <__kernel_rem_pio2+0x356>
 800e8b6:	a90c      	add	r1, sp, #48	@ 0x30
 800e8b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	430a      	orrs	r2, r1
 800e8c0:	e787      	b.n	800e7d2 <__kernel_rem_pio2+0x28a>
 800e8c2:	3401      	adds	r4, #1
 800e8c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	d0fa      	beq.n	800e8c2 <__kernel_rem_pio2+0x37a>
 800e8cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e8d2:	eb0d 0503 	add.w	r5, sp, r3
 800e8d6:	9b06      	ldr	r3, [sp, #24]
 800e8d8:	aa20      	add	r2, sp, #128	@ 0x80
 800e8da:	4443      	add	r3, r8
 800e8dc:	f108 0701 	add.w	r7, r8, #1
 800e8e0:	3d98      	subs	r5, #152	@ 0x98
 800e8e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e8e6:	4444      	add	r4, r8
 800e8e8:	42bc      	cmp	r4, r7
 800e8ea:	da04      	bge.n	800e8f6 <__kernel_rem_pio2+0x3ae>
 800e8ec:	46a0      	mov	r8, r4
 800e8ee:	e6a2      	b.n	800e636 <__kernel_rem_pio2+0xee>
 800e8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8f2:	2401      	movs	r4, #1
 800e8f4:	e7e6      	b.n	800e8c4 <__kernel_rem_pio2+0x37c>
 800e8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e8fc:	f7f1 fdb6 	bl	800046c <__aeabi_i2d>
 800e900:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800ebc8 <__kernel_rem_pio2+0x680>
 800e904:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e908:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e90c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e910:	46b2      	mov	sl, r6
 800e912:	f04f 0800 	mov.w	r8, #0
 800e916:	9b05      	ldr	r3, [sp, #20]
 800e918:	4598      	cmp	r8, r3
 800e91a:	dd05      	ble.n	800e928 <__kernel_rem_pio2+0x3e0>
 800e91c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e920:	3701      	adds	r7, #1
 800e922:	eca5 7b02 	vstmia	r5!, {d7}
 800e926:	e7df      	b.n	800e8e8 <__kernel_rem_pio2+0x3a0>
 800e928:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e92c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e930:	f7f1 fe06 	bl	8000540 <__aeabi_dmul>
 800e934:	4602      	mov	r2, r0
 800e936:	460b      	mov	r3, r1
 800e938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e93c:	f7f1 fc4a 	bl	80001d4 <__adddf3>
 800e940:	f108 0801 	add.w	r8, r8, #1
 800e944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e948:	e7e5      	b.n	800e916 <__kernel_rem_pio2+0x3ce>
 800e94a:	f1cb 0000 	rsb	r0, fp, #0
 800e94e:	ec47 6b10 	vmov	d0, r6, r7
 800e952:	f000 f951 	bl	800ebf8 <scalbn>
 800e956:	ec55 4b10 	vmov	r4, r5, d0
 800e95a:	4b9d      	ldr	r3, [pc, #628]	@ (800ebd0 <__kernel_rem_pio2+0x688>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	4620      	mov	r0, r4
 800e960:	4629      	mov	r1, r5
 800e962:	f7f2 f873 	bl	8000a4c <__aeabi_dcmpge>
 800e966:	b300      	cbz	r0, 800e9aa <__kernel_rem_pio2+0x462>
 800e968:	4b9a      	ldr	r3, [pc, #616]	@ (800ebd4 <__kernel_rem_pio2+0x68c>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	4620      	mov	r0, r4
 800e96e:	4629      	mov	r1, r5
 800e970:	f7f1 fde6 	bl	8000540 <__aeabi_dmul>
 800e974:	f7f2 f894 	bl	8000aa0 <__aeabi_d2iz>
 800e978:	4606      	mov	r6, r0
 800e97a:	f7f1 fd77 	bl	800046c <__aeabi_i2d>
 800e97e:	4b94      	ldr	r3, [pc, #592]	@ (800ebd0 <__kernel_rem_pio2+0x688>)
 800e980:	2200      	movs	r2, #0
 800e982:	f7f1 fddd 	bl	8000540 <__aeabi_dmul>
 800e986:	460b      	mov	r3, r1
 800e988:	4602      	mov	r2, r0
 800e98a:	4629      	mov	r1, r5
 800e98c:	4620      	mov	r0, r4
 800e98e:	f7f1 fc1f 	bl	80001d0 <__aeabi_dsub>
 800e992:	f7f2 f885 	bl	8000aa0 <__aeabi_d2iz>
 800e996:	ab0c      	add	r3, sp, #48	@ 0x30
 800e998:	f10b 0b18 	add.w	fp, fp, #24
 800e99c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e9a0:	f108 0801 	add.w	r8, r8, #1
 800e9a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e9a8:	e722      	b.n	800e7f0 <__kernel_rem_pio2+0x2a8>
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	f7f2 f877 	bl	8000aa0 <__aeabi_d2iz>
 800e9b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e9b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e9b8:	e71a      	b.n	800e7f0 <__kernel_rem_pio2+0x2a8>
 800e9ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800e9bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e9c0:	f7f1 fd54 	bl	800046c <__aeabi_i2d>
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	462b      	mov	r3, r5
 800e9c8:	f7f1 fdba 	bl	8000540 <__aeabi_dmul>
 800e9cc:	4652      	mov	r2, sl
 800e9ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e9d2:	465b      	mov	r3, fp
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f7f1 fdb2 	bl	8000540 <__aeabi_dmul>
 800e9dc:	3e01      	subs	r6, #1
 800e9de:	4604      	mov	r4, r0
 800e9e0:	460d      	mov	r5, r1
 800e9e2:	e718      	b.n	800e816 <__kernel_rem_pio2+0x2ce>
 800e9e4:	9906      	ldr	r1, [sp, #24]
 800e9e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e9ea:	9106      	str	r1, [sp, #24]
 800e9ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e9f0:	f7f1 fda6 	bl	8000540 <__aeabi_dmul>
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4650      	mov	r0, sl
 800e9fa:	4659      	mov	r1, fp
 800e9fc:	f7f1 fbea 	bl	80001d4 <__adddf3>
 800ea00:	3601      	adds	r6, #1
 800ea02:	4682      	mov	sl, r0
 800ea04:	468b      	mov	fp, r1
 800ea06:	9b00      	ldr	r3, [sp, #0]
 800ea08:	429e      	cmp	r6, r3
 800ea0a:	dc01      	bgt.n	800ea10 <__kernel_rem_pio2+0x4c8>
 800ea0c:	42b5      	cmp	r5, r6
 800ea0e:	dae9      	bge.n	800e9e4 <__kernel_rem_pio2+0x49c>
 800ea10:	ab48      	add	r3, sp, #288	@ 0x120
 800ea12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ea16:	e9c5 ab00 	strd	sl, fp, [r5]
 800ea1a:	3c01      	subs	r4, #1
 800ea1c:	e6ff      	b.n	800e81e <__kernel_rem_pio2+0x2d6>
 800ea1e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	dc0b      	bgt.n	800ea3c <__kernel_rem_pio2+0x4f4>
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	dc39      	bgt.n	800ea9c <__kernel_rem_pio2+0x554>
 800ea28:	d05d      	beq.n	800eae6 <__kernel_rem_pio2+0x59e>
 800ea2a:	9b02      	ldr	r3, [sp, #8]
 800ea2c:	f003 0007 	and.w	r0, r3, #7
 800ea30:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ea34:	ecbd 8b02 	vpop	{d8}
 800ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d1f3      	bne.n	800ea2a <__kernel_rem_pio2+0x4e2>
 800ea42:	9b05      	ldr	r3, [sp, #20]
 800ea44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ea48:	eb0d 0403 	add.w	r4, sp, r3
 800ea4c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ea50:	4625      	mov	r5, r4
 800ea52:	46c2      	mov	sl, r8
 800ea54:	f1ba 0f00 	cmp.w	sl, #0
 800ea58:	f1a5 0508 	sub.w	r5, r5, #8
 800ea5c:	dc6b      	bgt.n	800eb36 <__kernel_rem_pio2+0x5ee>
 800ea5e:	4645      	mov	r5, r8
 800ea60:	2d01      	cmp	r5, #1
 800ea62:	f1a4 0408 	sub.w	r4, r4, #8
 800ea66:	f300 8087 	bgt.w	800eb78 <__kernel_rem_pio2+0x630>
 800ea6a:	9c05      	ldr	r4, [sp, #20]
 800ea6c:	ab48      	add	r3, sp, #288	@ 0x120
 800ea6e:	441c      	add	r4, r3
 800ea70:	2000      	movs	r0, #0
 800ea72:	2100      	movs	r1, #0
 800ea74:	f1b8 0f01 	cmp.w	r8, #1
 800ea78:	f300 809c 	bgt.w	800ebb4 <__kernel_rem_pio2+0x66c>
 800ea7c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800ea80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800ea84:	f1b9 0f00 	cmp.w	r9, #0
 800ea88:	f040 80a6 	bne.w	800ebd8 <__kernel_rem_pio2+0x690>
 800ea8c:	9b04      	ldr	r3, [sp, #16]
 800ea8e:	e9c3 7800 	strd	r7, r8, [r3]
 800ea92:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ea96:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ea9a:	e7c6      	b.n	800ea2a <__kernel_rem_pio2+0x4e2>
 800ea9c:	9d05      	ldr	r5, [sp, #20]
 800ea9e:	ab48      	add	r3, sp, #288	@ 0x120
 800eaa0:	441d      	add	r5, r3
 800eaa2:	4644      	mov	r4, r8
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	2c00      	cmp	r4, #0
 800eaaa:	da35      	bge.n	800eb18 <__kernel_rem_pio2+0x5d0>
 800eaac:	f1b9 0f00 	cmp.w	r9, #0
 800eab0:	d038      	beq.n	800eb24 <__kernel_rem_pio2+0x5dc>
 800eab2:	4602      	mov	r2, r0
 800eab4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eab8:	9c04      	ldr	r4, [sp, #16]
 800eaba:	e9c4 2300 	strd	r2, r3, [r4]
 800eabe:	4602      	mov	r2, r0
 800eac0:	460b      	mov	r3, r1
 800eac2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800eac6:	f7f1 fb83 	bl	80001d0 <__aeabi_dsub>
 800eaca:	ad4a      	add	r5, sp, #296	@ 0x128
 800eacc:	2401      	movs	r4, #1
 800eace:	45a0      	cmp	r8, r4
 800ead0:	da2b      	bge.n	800eb2a <__kernel_rem_pio2+0x5e2>
 800ead2:	f1b9 0f00 	cmp.w	r9, #0
 800ead6:	d002      	beq.n	800eade <__kernel_rem_pio2+0x596>
 800ead8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eadc:	4619      	mov	r1, r3
 800eade:	9b04      	ldr	r3, [sp, #16]
 800eae0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eae4:	e7a1      	b.n	800ea2a <__kernel_rem_pio2+0x4e2>
 800eae6:	9c05      	ldr	r4, [sp, #20]
 800eae8:	ab48      	add	r3, sp, #288	@ 0x120
 800eaea:	441c      	add	r4, r3
 800eaec:	2000      	movs	r0, #0
 800eaee:	2100      	movs	r1, #0
 800eaf0:	f1b8 0f00 	cmp.w	r8, #0
 800eaf4:	da09      	bge.n	800eb0a <__kernel_rem_pio2+0x5c2>
 800eaf6:	f1b9 0f00 	cmp.w	r9, #0
 800eafa:	d002      	beq.n	800eb02 <__kernel_rem_pio2+0x5ba>
 800eafc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb00:	4619      	mov	r1, r3
 800eb02:	9b04      	ldr	r3, [sp, #16]
 800eb04:	e9c3 0100 	strd	r0, r1, [r3]
 800eb08:	e78f      	b.n	800ea2a <__kernel_rem_pio2+0x4e2>
 800eb0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb0e:	f7f1 fb61 	bl	80001d4 <__adddf3>
 800eb12:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb16:	e7eb      	b.n	800eaf0 <__kernel_rem_pio2+0x5a8>
 800eb18:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800eb1c:	f7f1 fb5a 	bl	80001d4 <__adddf3>
 800eb20:	3c01      	subs	r4, #1
 800eb22:	e7c1      	b.n	800eaa8 <__kernel_rem_pio2+0x560>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	e7c6      	b.n	800eab8 <__kernel_rem_pio2+0x570>
 800eb2a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800eb2e:	f7f1 fb51 	bl	80001d4 <__adddf3>
 800eb32:	3401      	adds	r4, #1
 800eb34:	e7cb      	b.n	800eace <__kernel_rem_pio2+0x586>
 800eb36:	ed95 7b00 	vldr	d7, [r5]
 800eb3a:	ed8d 7b00 	vstr	d7, [sp]
 800eb3e:	ed95 7b02 	vldr	d7, [r5, #8]
 800eb42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb46:	ec53 2b17 	vmov	r2, r3, d7
 800eb4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb4e:	f7f1 fb41 	bl	80001d4 <__adddf3>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	4606      	mov	r6, r0
 800eb58:	460f      	mov	r7, r1
 800eb5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb5e:	f7f1 fb37 	bl	80001d0 <__aeabi_dsub>
 800eb62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb66:	f7f1 fb35 	bl	80001d4 <__adddf3>
 800eb6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb6e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800eb72:	e9c5 6700 	strd	r6, r7, [r5]
 800eb76:	e76d      	b.n	800ea54 <__kernel_rem_pio2+0x50c>
 800eb78:	ed94 7b00 	vldr	d7, [r4]
 800eb7c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800eb80:	ec51 0b17 	vmov	r0, r1, d7
 800eb84:	4652      	mov	r2, sl
 800eb86:	465b      	mov	r3, fp
 800eb88:	ed8d 7b00 	vstr	d7, [sp]
 800eb8c:	f7f1 fb22 	bl	80001d4 <__adddf3>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb9c:	f7f1 fb18 	bl	80001d0 <__aeabi_dsub>
 800eba0:	4652      	mov	r2, sl
 800eba2:	465b      	mov	r3, fp
 800eba4:	f7f1 fb16 	bl	80001d4 <__adddf3>
 800eba8:	3d01      	subs	r5, #1
 800ebaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ebae:	e9c4 6700 	strd	r6, r7, [r4]
 800ebb2:	e755      	b.n	800ea60 <__kernel_rem_pio2+0x518>
 800ebb4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ebb8:	f7f1 fb0c 	bl	80001d4 <__adddf3>
 800ebbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebc0:	e758      	b.n	800ea74 <__kernel_rem_pio2+0x52c>
 800ebc2:	bf00      	nop
 800ebc4:	f3af 8000 	nop.w
	...
 800ebd0:	41700000 	.word	0x41700000
 800ebd4:	3e700000 	.word	0x3e700000
 800ebd8:	9b04      	ldr	r3, [sp, #16]
 800ebda:	9a04      	ldr	r2, [sp, #16]
 800ebdc:	601f      	str	r7, [r3, #0]
 800ebde:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800ebe2:	605c      	str	r4, [r3, #4]
 800ebe4:	609d      	str	r5, [r3, #8]
 800ebe6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ebea:	60d3      	str	r3, [r2, #12]
 800ebec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ebf0:	6110      	str	r0, [r2, #16]
 800ebf2:	6153      	str	r3, [r2, #20]
 800ebf4:	e719      	b.n	800ea2a <__kernel_rem_pio2+0x4e2>
 800ebf6:	bf00      	nop

0800ebf8 <scalbn>:
 800ebf8:	b570      	push	{r4, r5, r6, lr}
 800ebfa:	ec55 4b10 	vmov	r4, r5, d0
 800ebfe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ec02:	4606      	mov	r6, r0
 800ec04:	462b      	mov	r3, r5
 800ec06:	b991      	cbnz	r1, 800ec2e <scalbn+0x36>
 800ec08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ec0c:	4323      	orrs	r3, r4
 800ec0e:	d03d      	beq.n	800ec8c <scalbn+0x94>
 800ec10:	4b35      	ldr	r3, [pc, #212]	@ (800ece8 <scalbn+0xf0>)
 800ec12:	4620      	mov	r0, r4
 800ec14:	4629      	mov	r1, r5
 800ec16:	2200      	movs	r2, #0
 800ec18:	f7f1 fc92 	bl	8000540 <__aeabi_dmul>
 800ec1c:	4b33      	ldr	r3, [pc, #204]	@ (800ecec <scalbn+0xf4>)
 800ec1e:	429e      	cmp	r6, r3
 800ec20:	4604      	mov	r4, r0
 800ec22:	460d      	mov	r5, r1
 800ec24:	da0f      	bge.n	800ec46 <scalbn+0x4e>
 800ec26:	a328      	add	r3, pc, #160	@ (adr r3, 800ecc8 <scalbn+0xd0>)
 800ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2c:	e01e      	b.n	800ec6c <scalbn+0x74>
 800ec2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ec32:	4291      	cmp	r1, r2
 800ec34:	d10b      	bne.n	800ec4e <scalbn+0x56>
 800ec36:	4622      	mov	r2, r4
 800ec38:	4620      	mov	r0, r4
 800ec3a:	4629      	mov	r1, r5
 800ec3c:	f7f1 faca 	bl	80001d4 <__adddf3>
 800ec40:	4604      	mov	r4, r0
 800ec42:	460d      	mov	r5, r1
 800ec44:	e022      	b.n	800ec8c <scalbn+0x94>
 800ec46:	460b      	mov	r3, r1
 800ec48:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ec4c:	3936      	subs	r1, #54	@ 0x36
 800ec4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ec52:	4296      	cmp	r6, r2
 800ec54:	dd0d      	ble.n	800ec72 <scalbn+0x7a>
 800ec56:	2d00      	cmp	r5, #0
 800ec58:	a11d      	add	r1, pc, #116	@ (adr r1, 800ecd0 <scalbn+0xd8>)
 800ec5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec5e:	da02      	bge.n	800ec66 <scalbn+0x6e>
 800ec60:	a11d      	add	r1, pc, #116	@ (adr r1, 800ecd8 <scalbn+0xe0>)
 800ec62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec66:	a31a      	add	r3, pc, #104	@ (adr r3, 800ecd0 <scalbn+0xd8>)
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f7f1 fc68 	bl	8000540 <__aeabi_dmul>
 800ec70:	e7e6      	b.n	800ec40 <scalbn+0x48>
 800ec72:	1872      	adds	r2, r6, r1
 800ec74:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ec78:	428a      	cmp	r2, r1
 800ec7a:	dcec      	bgt.n	800ec56 <scalbn+0x5e>
 800ec7c:	2a00      	cmp	r2, #0
 800ec7e:	dd08      	ble.n	800ec92 <scalbn+0x9a>
 800ec80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ec84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ec88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ec8c:	ec45 4b10 	vmov	d0, r4, r5
 800ec90:	bd70      	pop	{r4, r5, r6, pc}
 800ec92:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ec96:	da08      	bge.n	800ecaa <scalbn+0xb2>
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ecc8 <scalbn+0xd0>)
 800ec9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eca0:	dac1      	bge.n	800ec26 <scalbn+0x2e>
 800eca2:	a10f      	add	r1, pc, #60	@ (adr r1, 800ece0 <scalbn+0xe8>)
 800eca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eca8:	e7bd      	b.n	800ec26 <scalbn+0x2e>
 800ecaa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ecae:	3236      	adds	r2, #54	@ 0x36
 800ecb0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ecb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ecb8:	4620      	mov	r0, r4
 800ecba:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf0 <scalbn+0xf8>)
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	e7d4      	b.n	800ec6c <scalbn+0x74>
 800ecc2:	bf00      	nop
 800ecc4:	f3af 8000 	nop.w
 800ecc8:	c2f8f359 	.word	0xc2f8f359
 800eccc:	01a56e1f 	.word	0x01a56e1f
 800ecd0:	8800759c 	.word	0x8800759c
 800ecd4:	7e37e43c 	.word	0x7e37e43c
 800ecd8:	8800759c 	.word	0x8800759c
 800ecdc:	fe37e43c 	.word	0xfe37e43c
 800ece0:	c2f8f359 	.word	0xc2f8f359
 800ece4:	81a56e1f 	.word	0x81a56e1f
 800ece8:	43500000 	.word	0x43500000
 800ecec:	ffff3cb0 	.word	0xffff3cb0
 800ecf0:	3c900000 	.word	0x3c900000
 800ecf4:	00000000 	.word	0x00000000

0800ecf8 <floor>:
 800ecf8:	ec51 0b10 	vmov	r0, r1, d0
 800ecfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ed08:	2e13      	cmp	r6, #19
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	4680      	mov	r8, r0
 800ed10:	dc34      	bgt.n	800ed7c <floor+0x84>
 800ed12:	2e00      	cmp	r6, #0
 800ed14:	da17      	bge.n	800ed46 <floor+0x4e>
 800ed16:	a332      	add	r3, pc, #200	@ (adr r3, 800ede0 <floor+0xe8>)
 800ed18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1c:	f7f1 fa5a 	bl	80001d4 <__adddf3>
 800ed20:	2200      	movs	r2, #0
 800ed22:	2300      	movs	r3, #0
 800ed24:	f7f1 fe9c 	bl	8000a60 <__aeabi_dcmpgt>
 800ed28:	b150      	cbz	r0, 800ed40 <floor+0x48>
 800ed2a:	2c00      	cmp	r4, #0
 800ed2c:	da55      	bge.n	800edda <floor+0xe2>
 800ed2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ed32:	432c      	orrs	r4, r5
 800ed34:	2500      	movs	r5, #0
 800ed36:	42ac      	cmp	r4, r5
 800ed38:	4c2b      	ldr	r4, [pc, #172]	@ (800ede8 <floor+0xf0>)
 800ed3a:	bf08      	it	eq
 800ed3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ed40:	4621      	mov	r1, r4
 800ed42:	4628      	mov	r0, r5
 800ed44:	e023      	b.n	800ed8e <floor+0x96>
 800ed46:	4f29      	ldr	r7, [pc, #164]	@ (800edec <floor+0xf4>)
 800ed48:	4137      	asrs	r7, r6
 800ed4a:	ea01 0307 	and.w	r3, r1, r7
 800ed4e:	4303      	orrs	r3, r0
 800ed50:	d01d      	beq.n	800ed8e <floor+0x96>
 800ed52:	a323      	add	r3, pc, #140	@ (adr r3, 800ede0 <floor+0xe8>)
 800ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed58:	f7f1 fa3c 	bl	80001d4 <__adddf3>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2300      	movs	r3, #0
 800ed60:	f7f1 fe7e 	bl	8000a60 <__aeabi_dcmpgt>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d0eb      	beq.n	800ed40 <floor+0x48>
 800ed68:	2c00      	cmp	r4, #0
 800ed6a:	bfbe      	ittt	lt
 800ed6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ed70:	4133      	asrlt	r3, r6
 800ed72:	18e4      	addlt	r4, r4, r3
 800ed74:	ea24 0407 	bic.w	r4, r4, r7
 800ed78:	2500      	movs	r5, #0
 800ed7a:	e7e1      	b.n	800ed40 <floor+0x48>
 800ed7c:	2e33      	cmp	r6, #51	@ 0x33
 800ed7e:	dd0a      	ble.n	800ed96 <floor+0x9e>
 800ed80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ed84:	d103      	bne.n	800ed8e <floor+0x96>
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	f7f1 fa23 	bl	80001d4 <__adddf3>
 800ed8e:	ec41 0b10 	vmov	d0, r0, r1
 800ed92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ed9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ed9e:	40df      	lsrs	r7, r3
 800eda0:	4207      	tst	r7, r0
 800eda2:	d0f4      	beq.n	800ed8e <floor+0x96>
 800eda4:	a30e      	add	r3, pc, #56	@ (adr r3, 800ede0 <floor+0xe8>)
 800eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edaa:	f7f1 fa13 	bl	80001d4 <__adddf3>
 800edae:	2200      	movs	r2, #0
 800edb0:	2300      	movs	r3, #0
 800edb2:	f7f1 fe55 	bl	8000a60 <__aeabi_dcmpgt>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	d0c2      	beq.n	800ed40 <floor+0x48>
 800edba:	2c00      	cmp	r4, #0
 800edbc:	da0a      	bge.n	800edd4 <floor+0xdc>
 800edbe:	2e14      	cmp	r6, #20
 800edc0:	d101      	bne.n	800edc6 <floor+0xce>
 800edc2:	3401      	adds	r4, #1
 800edc4:	e006      	b.n	800edd4 <floor+0xdc>
 800edc6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800edca:	2301      	movs	r3, #1
 800edcc:	40b3      	lsls	r3, r6
 800edce:	441d      	add	r5, r3
 800edd0:	4545      	cmp	r5, r8
 800edd2:	d3f6      	bcc.n	800edc2 <floor+0xca>
 800edd4:	ea25 0507 	bic.w	r5, r5, r7
 800edd8:	e7b2      	b.n	800ed40 <floor+0x48>
 800edda:	2500      	movs	r5, #0
 800eddc:	462c      	mov	r4, r5
 800edde:	e7af      	b.n	800ed40 <floor+0x48>
 800ede0:	8800759c 	.word	0x8800759c
 800ede4:	7e37e43c 	.word	0x7e37e43c
 800ede8:	bff00000 	.word	0xbff00000
 800edec:	000fffff 	.word	0x000fffff

0800edf0 <_init>:
 800edf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf2:	bf00      	nop
 800edf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edf6:	bc08      	pop	{r3}
 800edf8:	469e      	mov	lr, r3
 800edfa:	4770      	bx	lr

0800edfc <_fini>:
 800edfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfe:	bf00      	nop
 800ee00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee02:	bc08      	pop	{r3}
 800ee04:	469e      	mov	lr, r3
 800ee06:	4770      	bx	lr
