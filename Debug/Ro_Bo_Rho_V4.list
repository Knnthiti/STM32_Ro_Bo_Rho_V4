
Ro_Bo_Rho_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e500  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800e688  0800e688  0000f688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e968  0800e968  00010170  2**0
                  CONTENTS
  4 .ARM          00000008  0800e968  0800e968  0000f968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e970  0800e970  00010170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e970  0800e970  0000f970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e974  0800e974  0000f974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800e978  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010170  2**0
                  CONTENTS
 10 .bss          00002420  20000170  20000170  00010170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002590  20002590  00010170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001efce  00000000  00000000  000101a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004750  00000000  00000000  0002f16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  000338c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159f  00000000  00000000  00035478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002773e  00000000  00000000  00036a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000252ab  00000000  00000000  0005e155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e12ba  00000000  00000000  00083400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001646ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c78  00000000  00000000  00164700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0016c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e670 	.word	0x0800e670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	0800e670 	.word	0x0800e670

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b598      	push	{r3, r4, r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f001 fd9e 	bl	80029c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f9c4 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 ff0e 	bl	8001cac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e90:	f000 fb38 	bl	8001504 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e94:	f000 fbde 	bl	8001654 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000e98:	f000 fa26 	bl	80012e8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e9c:	f000 faa4 	bl	80013e8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ea0:	f000 fad8 	bl	8001454 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000ea4:	f000 fc7e 	bl	80017a4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000ea8:	f000 fcd4 	bl	8001854 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000eac:	f000 fd22 	bl	80018f4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000eb0:	f000 fd6e 	bl	8001990 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000eb4:	f000 fdba 	bl	8001a2c <MX_TIM12_Init>
  MX_TIM13_Init();
 8000eb8:	f000 fe08 	bl	8001acc <MX_TIM13_Init>
  MX_TIM14_Init();
 8000ebc:	f000 fe54 	bl	8001b68 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 feca 	bl	8001c58 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ec4:	f00b fac0 	bl	800c448 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000ec8:	f000 fe9c 	bl	8001c04 <MX_UART4_Init>
  MX_I2C2_Init();
 8000ecc:	f000 fa5e 	bl	800138c <MX_I2C2_Init>
  MX_TIM3_Init();
 8000ed0:	f000 fb6c 	bl	80015ac <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ed4:	f000 fc12 	bl	80016fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	Motor_setup_LF(&htim14, &htim5, "PC05");
 8000ed8:	4aa9      	ldr	r2, [pc, #676]	@ (8001180 <main+0x300>)
 8000eda:	49aa      	ldr	r1, [pc, #680]	@ (8001184 <main+0x304>)
 8000edc:	48aa      	ldr	r0, [pc, #680]	@ (8001188 <main+0x308>)
 8000ede:	f008 fa85 	bl	80093ec <Motor_setup_LF>
	Motor_setup_LB(&htim12, &htim1, "PE12");
 8000ee2:	4aaa      	ldr	r2, [pc, #680]	@ (800118c <main+0x30c>)
 8000ee4:	49aa      	ldr	r1, [pc, #680]	@ (8001190 <main+0x310>)
 8000ee6:	48ab      	ldr	r0, [pc, #684]	@ (8001194 <main+0x314>)
 8000ee8:	f008 faae 	bl	8009448 <Motor_setup_LB>
	Motor_setup_RF(&htim11, &htim8, "PE01");
 8000eec:	4aaa      	ldr	r2, [pc, #680]	@ (8001198 <main+0x318>)
 8000eee:	49ab      	ldr	r1, [pc, #684]	@ (800119c <main+0x31c>)
 8000ef0:	48ab      	ldr	r0, [pc, #684]	@ (80011a0 <main+0x320>)
 8000ef2:	f008 fad7 	bl	80094a4 <Motor_setup_RF>
	Motor_setup_RB(&htim12, &htim4, "PD09");
 8000ef6:	4aab      	ldr	r2, [pc, #684]	@ (80011a4 <main+0x324>)
 8000ef8:	49ab      	ldr	r1, [pc, #684]	@ (80011a8 <main+0x328>)
 8000efa:	48a6      	ldr	r0, [pc, #664]	@ (8001194 <main+0x314>)
 8000efc:	f008 fb00 	bl	8009500 <Motor_setup_RB>

	Motor_setup_EXTRA2(&htim9, &htim3, "PC13");
 8000f00:	4aaa      	ldr	r2, [pc, #680]	@ (80011ac <main+0x32c>)
 8000f02:	49ab      	ldr	r1, [pc, #684]	@ (80011b0 <main+0x330>)
 8000f04:	48ab      	ldr	r0, [pc, #684]	@ (80011b4 <main+0x334>)
 8000f06:	f008 fb57 	bl	80095b8 <Motor_setup_EXTRA2>
	Motor_setup_EXTRA1(&htim10, &htim2, "PE00");
 8000f0a:	4aab      	ldr	r2, [pc, #684]	@ (80011b8 <main+0x338>)
 8000f0c:	49ab      	ldr	r1, [pc, #684]	@ (80011bc <main+0x33c>)
 8000f0e:	48ac      	ldr	r0, [pc, #688]	@ (80011c0 <main+0x340>)
 8000f10:	f008 fb24 	bl	800955c <Motor_setup_EXTRA1>

	//	HAL_TIMEx_PWMN_Start(&htim9, TIM_CHANNEL_2);

	Setup_Gear_Ratio(27);
 8000f14:	201b      	movs	r0, #27
 8000f16:	f008 fbb7 	bl	8009688 <Setup_Gear_Ratio>
	Setup_CPR(68);
 8000f1a:	2044      	movs	r0, #68	@ 0x44
 8000f1c:	f008 fba4 	bl	8009668 <Setup_CPR>
	Setup_frequency_Motor(100);
 8000f20:	2064      	movs	r0, #100	@ 0x64
 8000f22:	f008 fb91 	bl	8009648 <Setup_frequency_Motor>

	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _LF);
 8000f26:	2000      	movs	r0, #0
 8000f28:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 80011c4 <main+0x344>
 8000f2c:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 80011c8 <main+0x348>
 8000f30:	ed9f 1aa6 	vldr	s2, [pc, #664]	@ 80011cc <main+0x34c>
 8000f34:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 80011d0 <main+0x350>
 8000f38:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f3c:	f008 fc54 	bl	80097e8 <Setup_PID_Wheel>
	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _LB);
 8000f40:	2001      	movs	r0, #1
 8000f42:	ed9f 2aa0 	vldr	s4, [pc, #640]	@ 80011c4 <main+0x344>
 8000f46:	eddf 1aa0 	vldr	s3, [pc, #640]	@ 80011c8 <main+0x348>
 8000f4a:	ed9f 1aa0 	vldr	s2, [pc, #640]	@ 80011cc <main+0x34c>
 8000f4e:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 80011d0 <main+0x350>
 8000f52:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f56:	f008 fc47 	bl	80097e8 <Setup_PID_Wheel>
	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _RF);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	ed9f 2a99 	vldr	s4, [pc, #612]	@ 80011c4 <main+0x344>
 8000f60:	eddf 1a99 	vldr	s3, [pc, #612]	@ 80011c8 <main+0x348>
 8000f64:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 80011cc <main+0x34c>
 8000f68:	eddf 0a99 	vldr	s1, [pc, #612]	@ 80011d0 <main+0x350>
 8000f6c:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f70:	f008 fc3a 	bl	80097e8 <Setup_PID_Wheel>
	Setup_PID_Wheel(1.5, 0.05, 0.1, 0, 360, _RB);
 8000f74:	2003      	movs	r0, #3
 8000f76:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80011c4 <main+0x344>
 8000f7a:	eddf 1a93 	vldr	s3, [pc, #588]	@ 80011c8 <main+0x348>
 8000f7e:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 80011cc <main+0x34c>
 8000f82:	eddf 0a93 	vldr	s1, [pc, #588]	@ 80011d0 <main+0x350>
 8000f86:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000f8a:	f008 fc2d 	bl	80097e8 <Setup_PID_Wheel>

	//	Setup_PID_Wheel(1.0, 0.0, 0.2, 0, 300, _EXTRA1);
	//	Setup_PID_Wheel(1.0, 0.0, 0.2, 0, 300, _EXTRA2);

	Setup_Ramp_Count(1.5, 0.004, 0.1, 13790.0, 2700.0);
 8000f8e:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 80011d4 <main+0x354>
 8000f92:	eddf 1a91 	vldr	s3, [pc, #580]	@ 80011d8 <main+0x358>
 8000f96:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 80011cc <main+0x34c>
 8000f9a:	eddf 0a90 	vldr	s1, [pc, #576]	@ 80011dc <main+0x35c>
 8000f9e:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000fa2:	f009 fa1b 	bl	800a3dc <Setup_Ramp_Count>

	//	Setup_frequency_Forward_Kinematic(100);
	//  Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);

	Setup_Inverse_Kinematic(0.23f, 0.23f, 0.06f);
 8000fa6:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 80011e0 <main+0x360>
 8000faa:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80011e4 <main+0x364>
 8000fae:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 80011e4 <main+0x364>
 8000fb2:	f009 f89d 	bl	800a0f0 <Setup_Inverse_Kinematic>

	HAL_UART_Receive_IT(&huart2, (uint8_t*) &Str_PS2, sizeof(Str_PS2));
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	498b      	ldr	r1, [pc, #556]	@ (80011e8 <main+0x368>)
 8000fba:	488c      	ldr	r0, [pc, #560]	@ (80011ec <main+0x36c>)
 8000fbc:	f005 fc16 	bl	80067ec <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if ((uwTick - PastTime) > 10) {
 8000fc0:	4b8b      	ldr	r3, [pc, #556]	@ (80011f0 <main+0x370>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a8b      	ldr	r2, [pc, #556]	@ (80011f4 <main+0x374>)
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d9f8      	bls.n	8000fc0 <main+0x140>
			PastTime = uwTick;
 8000fce:	4b88      	ldr	r3, [pc, #544]	@ (80011f0 <main+0x370>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b87      	ldr	r3, [pc, #540]	@ (80011f4 <main+0x374>)
 8000fd6:	601a      	str	r2, [r3, #0]

			digitalWrite("PE15", (UART_Runner(&huart2) == 1) ? 1 : 0);
 8000fd8:	4884      	ldr	r0, [pc, #528]	@ (80011ec <main+0x36c>)
 8000fda:	f009 fa2b 	bl	800a434 <UART_Runner>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	4882      	ldr	r0, [pc, #520]	@ (80011f8 <main+0x378>)
 8000fee:	f007 fe69 	bl	8008cc4 <digitalWrite>
//
//				Motor_DutyCycle_EXTRA1(0);
//				Motor_DutyCycle_EXTRA2(0);
//			}

			Vx = map(Str_PS2.stickValue[0], 100.0f, -100.0f, 4.0f, -4.0f);
 8000ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80011e8 <main+0x368>)
 8000ff4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001000:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 8001004:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 8001008:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 80011fc <main+0x37c>
 800100c:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8001200 <main+0x380>
 8001010:	eeb0 0a67 	vmov.f32	s0, s15
 8001014:	f008 f9bc 	bl	8009390 <map>
 8001018:	eef0 7a40 	vmov.f32	s15, s0
 800101c:	4b79      	ldr	r3, [pc, #484]	@ (8001204 <main+0x384>)
 800101e:	edc3 7a00 	vstr	s15, [r3]
			Vy = map(Str_PS2.stickValue[1], 100.0f, -100.0f, 4.0f, -4.0f);
 8001022:	4b71      	ldr	r3, [pc, #452]	@ (80011e8 <main+0x368>)
 8001024:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 8001034:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 8001038:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 80011fc <main+0x37c>
 800103c:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8001200 <main+0x380>
 8001040:	eeb0 0a67 	vmov.f32	s0, s15
 8001044:	f008 f9a4 	bl	8009390 <map>
 8001048:	eef0 7a40 	vmov.f32	s15, s0
 800104c:	4b6e      	ldr	r3, [pc, #440]	@ (8001208 <main+0x388>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
			Vz = map(Str_PS2.stickValue[3], 100.0f, -100.0f, -5.0f, 5.0f);
 8001052:	4b65      	ldr	r3, [pc, #404]	@ (80011e8 <main+0x368>)
 8001054:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	eeb1 2a04 	vmov.f32	s4, #20	@ 0x40a00000  5.0
 8001064:	eef9 1a04 	vmov.f32	s3, #148	@ 0xc0a00000 -5.0
 8001068:	ed9f 1a64 	vldr	s2, [pc, #400]	@ 80011fc <main+0x37c>
 800106c:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8001200 <main+0x380>
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	f008 f98c 	bl	8009390 <map>
 8001078:	eef0 7a40 	vmov.f32	s15, s0
 800107c:	4b63      	ldr	r3, [pc, #396]	@ (800120c <main+0x38c>)
 800107e:	edc3 7a00 	vstr	s15, [r3]

			//			Inverse_Kinematic(Vx, Vy, Vz);
			Inverse_Kinematic_Lock_Direction(Vx, Vy, Vz, Rad);
 8001082:	4b60      	ldr	r3, [pc, #384]	@ (8001204 <main+0x384>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	4b5f      	ldr	r3, [pc, #380]	@ (8001208 <main+0x388>)
 800108a:	ed93 7a00 	vldr	s14, [r3]
 800108e:	4b5f      	ldr	r3, [pc, #380]	@ (800120c <main+0x38c>)
 8001090:	edd3 6a00 	vldr	s13, [r3]
 8001094:	4b5e      	ldr	r3, [pc, #376]	@ (8001210 <main+0x390>)
 8001096:	ed93 6a00 	vldr	s12, [r3]
 800109a:	eef0 1a46 	vmov.f32	s3, s12
 800109e:	eeb0 1a66 	vmov.f32	s2, s13
 80010a2:	eef0 0a47 	vmov.f32	s1, s14
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f009 f83f 	bl	800a12c <Inverse_Kinematic_Lock_Direction>

			Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()),getRPM_TIM_Wheel(&htim5, _LF));
 80010ae:	f009 f95d 	bl	800a36c <get_w_LF>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	f008 faf5 	bl	80096a8 <getRad_s_to_RPM>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	b21c      	sxth	r4, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	482d      	ldr	r0, [pc, #180]	@ (8001184 <main+0x304>)
 80010d0:	f008 fb04 	bl	80096dc <getRPM_TIM_Wheel>
 80010d4:	eef0 7a40 	vmov.f32	s15, s0
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	4620      	mov	r0, r4
 80010de:	f008 fe57 	bl	8009d90 <Motor_Speed_LF>
			Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()),getRPM_TIM_Wheel(&htim1, _LB));
 80010e2:	f009 f951 	bl	800a388 <get_w_LB>
 80010e6:	eef0 7a40 	vmov.f32	s15, s0
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	f008 fadb 	bl	80096a8 <getRad_s_to_RPM>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fa:	ee17 3a90 	vmov	r3, s15
 80010fe:	b21c      	sxth	r4, r3
 8001100:	2101      	movs	r1, #1
 8001102:	4823      	ldr	r0, [pc, #140]	@ (8001190 <main+0x310>)
 8001104:	f008 faea 	bl	80096dc <getRPM_TIM_Wheel>
 8001108:	eef0 7a40 	vmov.f32	s15, s0
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	4620      	mov	r0, r4
 8001112:	f008 fea9 	bl	8009e68 <Motor_Speed_LB>
			Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()),getRPM_TIM_Wheel(&htim8, _RF));
 8001116:	f009 f945 	bl	800a3a4 <get_w_RF>
 800111a:	eef0 7a40 	vmov.f32	s15, s0
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	f008 fac1 	bl	80096a8 <getRad_s_to_RPM>
 8001126:	eef0 7a40 	vmov.f32	s15, s0
 800112a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112e:	ee17 3a90 	vmov	r3, s15
 8001132:	b21c      	sxth	r4, r3
 8001134:	2102      	movs	r1, #2
 8001136:	4819      	ldr	r0, [pc, #100]	@ (800119c <main+0x31c>)
 8001138:	f008 fad0 	bl	80096dc <getRPM_TIM_Wheel>
 800113c:	eef0 7a40 	vmov.f32	s15, s0
 8001140:	eeb0 0a67 	vmov.f32	s0, s15
 8001144:	4620      	mov	r0, r4
 8001146:	f008 fefb 	bl	8009f40 <Motor_Speed_RF>
			Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()),getRPM_TIM_Wheel(&htim4, _RB));
 800114a:	f009 f939 	bl	800a3c0 <get_w_RB>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	f008 faa7 	bl	80096a8 <getRad_s_to_RPM>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	b21c      	sxth	r4, r3
 8001168:	2103      	movs	r1, #3
 800116a:	480f      	ldr	r0, [pc, #60]	@ (80011a8 <main+0x328>)
 800116c:	f008 fab6 	bl	80096dc <getRPM_TIM_Wheel>
 8001170:	eef0 7a40 	vmov.f32	s15, s0
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	4620      	mov	r0, r4
 800117a:	f008 ff4d 	bl	800a018 <Motor_Speed_RB>
		if ((uwTick - PastTime) > 10) {
 800117e:	e71f      	b.n	8000fc0 <main+0x140>
 8001180:	0800e688 	.word	0x0800e688
 8001184:	200003a0 	.word	0x200003a0
 8001188:	20000598 	.word	0x20000598
 800118c:	0800e690 	.word	0x0800e690
 8001190:	20000280 	.word	0x20000280
 8001194:	20000508 	.word	0x20000508
 8001198:	0800e698 	.word	0x0800e698
 800119c:	200003e8 	.word	0x200003e8
 80011a0:	200004c0 	.word	0x200004c0
 80011a4:	0800e6a0 	.word	0x0800e6a0
 80011a8:	20000358 	.word	0x20000358
 80011ac:	0800e6a8 	.word	0x0800e6a8
 80011b0:	20000310 	.word	0x20000310
 80011b4:	20000430 	.word	0x20000430
 80011b8:	0800e6b0 	.word	0x0800e6b0
 80011bc:	200002c8 	.word	0x200002c8
 80011c0:	20000478 	.word	0x20000478
 80011c4:	43b40000 	.word	0x43b40000
 80011c8:	00000000 	.word	0x00000000
 80011cc:	3dcccccd 	.word	0x3dcccccd
 80011d0:	3d4ccccd 	.word	0x3d4ccccd
 80011d4:	4528c000 	.word	0x4528c000
 80011d8:	46577800 	.word	0x46577800
 80011dc:	3b83126f 	.word	0x3b83126f
 80011e0:	3d75c28f 	.word	0x3d75c28f
 80011e4:	3e6b851f 	.word	0x3e6b851f
 80011e8:	20000670 	.word	0x20000670
 80011ec:	20000628 	.word	0x20000628
 80011f0:	20000688 	.word	0x20000688
 80011f4:	20000678 	.word	0x20000678
 80011f8:	0800e6b8 	.word	0x0800e6b8
 80011fc:	c2c80000 	.word	0xc2c80000
 8001200:	42c80000 	.word	0x42c80000
 8001204:	2000067c 	.word	0x2000067c
 8001208:	20000680 	.word	0x20000680
 800120c:	20000684 	.word	0x20000684
 8001210:	20000000 	.word	0x20000000

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	@ 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2230      	movs	r2, #48	@ 0x30
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f00b fe04 	bl	800ce30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <SystemClock_Config+0xcc>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <SystemClock_Config+0xcc>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	@ 0x40
 8001248:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <SystemClock_Config+0xcc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <SystemClock_Config+0xd0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <SystemClock_Config+0xd0>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <SystemClock_Config+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 8001284:	2307      	movs	r3, #7
 8001286:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001288:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800128c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800128e:	2304      	movs	r3, #4
 8001290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001292:	2308      	movs	r3, #8
 8001294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fea8 	bl	8004ff0 <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012a6:	f000 fe03 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	230f      	movs	r3, #15
 80012ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2103      	movs	r1, #3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 f909 	bl	80054e0 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012d4:	f000 fdec 	bl	8001eb0 <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	@ 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <MX_ADC1_Init+0x98>)
 80012fc:	4a21      	ldr	r2, [pc, #132]	@ (8001384 <MX_ADC1_Init+0x9c>)
 80012fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <MX_ADC1_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <MX_ADC1_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001328:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <MX_ADC1_Init+0xa0>)
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_ADC1_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001334:	2201      	movs	r2, #1
 8001336:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_ADC1_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001342:	2201      	movs	r2, #1
 8001344:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001346:	480e      	ldr	r0, [pc, #56]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001348:	f001 fbd2 	bl	8002af0 <HAL_ADC_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001352:	f000 fdad 	bl	8001eb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001356:	2304      	movs	r3, #4
 8001358:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_ADC1_Init+0x98>)
 8001368:	f001 fc06 	bl	8002b78 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001372:	f000 fd9d 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000018c 	.word	0x2000018c
 8001384:	40012000 	.word	0x40012000
 8001388:	0f000001 	.word	0x0f000001

0800138c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <MX_I2C2_Init+0x50>)
 8001392:	4a13      	ldr	r2, [pc, #76]	@ (80013e0 <MX_I2C2_Init+0x54>)
 8001394:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_I2C2_Init+0x50>)
 8001398:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <MX_I2C2_Init+0x58>)
 800139a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_I2C2_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_I2C2_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_I2C2_Init+0x50>)
 80013aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <MX_I2C2_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_I2C2_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <MX_I2C2_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_I2C2_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_I2C2_Init+0x50>)
 80013ca:	f002 fa7b 	bl	80038c4 <HAL_I2C_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d4:	f000 fd6c 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200001d4 	.word	0x200001d4
 80013e0:	40005800 	.word	0x40005800
 80013e4:	000186a0 	.word	0x000186a0

080013e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_SPI2_Init+0x64>)
 80013ee:	4a18      	ldr	r2, [pc, #96]	@ (8001450 <MX_SPI2_Init+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_SPI2_Init+0x64>)
 80013f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_SPI2_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_SPI2_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_SPI2_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_SPI2_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_SPI2_Init+0x64>)
 8001414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001418:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_SPI2_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <MX_SPI2_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_SPI2_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <MX_SPI2_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_SPI2_Init+0x64>)
 8001434:	220a      	movs	r2, #10
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <MX_SPI2_Init+0x64>)
 800143a:	f004 fa71 	bl	8005920 <HAL_SPI_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001444:	f000 fd34 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000228 	.word	0x20000228
 8001450:	40003800 	.word	0x40003800

08001454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	@ 0x30
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2224      	movs	r2, #36	@ 0x24
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f00b fce4 	bl	800ce30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <MX_TIM1_Init+0xa8>)
 8001472:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <MX_TIM1_Init+0xac>)
 8001474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <MX_TIM1_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <MX_TIM1_Init+0xa8>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001482:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <MX_TIM1_Init+0xa8>)
 8001484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001488:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <MX_TIM1_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_TIM1_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_TIM1_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800149c:	2303      	movs	r3, #3
 800149e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a4:	2301      	movs	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b4:	2301      	movs	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_TIM1_Init+0xa8>)
 80014c8:	f004 fc1a 	bl	8005d00 <HAL_TIM_Encoder_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014d2:	f000 fced 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	@ (80014fc <MX_TIM1_Init+0xa8>)
 80014e4:	f005 f884 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014ee:	f000 fcdf 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3730      	adds	r7, #48	@ 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000280 	.word	0x20000280
 8001500:	40010000 	.word	0x40010000

08001504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2224      	movs	r2, #36	@ 0x24
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f00b fc8c 	bl	800ce30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001536:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001548:	2303      	movs	r3, #3
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001550:	2301      	movs	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001560:	2301      	movs	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001574:	f004 fbc4 	bl	8005d00 <HAL_TIM_Encoder_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800157e:	f000 fc97 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001590:	f005 f82e 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800159a:	f000 fc89 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002c8 	.word	0x200002c8

080015ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	@ 0x30
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2224      	movs	r2, #36	@ 0x24
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00b fc38 	bl	800ce30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015ca:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ee:	2303      	movs	r3, #3
 80015f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001606:	2301      	movs	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <MX_TIM3_Init+0xa0>)
 800161a:	f004 fb71 	bl	8005d00 <HAL_TIM_Encoder_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001624:	f000 fc44 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_TIM3_Init+0xa0>)
 8001636:	f004 ffdb 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001640:	f000 fc36 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	@ 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000310 	.word	0x20000310
 8001650:	40000400 	.word	0x40000400

08001654 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	@ 0x30
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2224      	movs	r2, #36	@ 0x24
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f00b fbe4 	bl	800ce30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001672:	4a21      	ldr	r2, [pc, #132]	@ (80016f8 <MX_TIM4_Init+0xa4>)
 8001674:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001688:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001696:	2303      	movs	r3, #3
 8001698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 80016c2:	f004 fb1d 	bl	8005d00 <HAL_TIM_Encoder_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016cc:	f000 fbf0 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 80016de:	f004 ff87 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016e8:	f000 fbe2 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	@ 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000358 	.word	0x20000358
 80016f8:	40000800 	.word	0x40000800

080016fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	@ 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2224      	movs	r2, #36	@ 0x24
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00b fb90 	bl	800ce30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <MX_TIM5_Init+0xa0>)
 800171a:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <MX_TIM5_Init+0xa4>)
 800171c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_TIM5_Init+0xa0>)
 800172c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001730:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <MX_TIM5_Init+0xa0>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800173e:	2303      	movs	r3, #3
 8001740:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001756:	2301      	movs	r3, #1
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <MX_TIM5_Init+0xa0>)
 800176a:	f004 fac9 	bl	8005d00 <HAL_TIM_Encoder_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001774:	f000 fb9c 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001786:	f004 ff33 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001790:	f000 fb8e 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3730      	adds	r7, #48	@ 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200003a0 	.word	0x200003a0
 80017a0:	40000c00 	.word	0x40000c00

080017a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2224      	movs	r2, #36	@ 0x24
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00b fb3c 	bl	800ce30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <MX_TIM8_Init+0xa8>)
 80017c2:	4a23      	ldr	r2, [pc, #140]	@ (8001850 <MX_TIM8_Init+0xac>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_TIM8_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_TIM8_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <MX_TIM8_Init+0xa8>)
 80017d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <MX_TIM8_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <MX_TIM8_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <MX_TIM8_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017ec:	2303      	movs	r3, #3
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017f4:	2301      	movs	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001804:	2301      	movs	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	480d      	ldr	r0, [pc, #52]	@ (800184c <MX_TIM8_Init+0xa8>)
 8001818:	f004 fa72 	bl	8005d00 <HAL_TIM_Encoder_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001822:	f000 fb45 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	@ (800184c <MX_TIM8_Init+0xa8>)
 8001834:	f004 fedc 	bl	80065f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800183e:	f000 fb37 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3730      	adds	r7, #48	@ 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200003e8 	.word	0x200003e8
 8001850:	40010400 	.word	0x40010400

08001854 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <MX_TIM9_Init+0x98>)
 800186e:	4a20      	ldr	r2, [pc, #128]	@ (80018f0 <MX_TIM9_Init+0x9c>)
 8001870:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <MX_TIM9_Init+0x98>)
 8001874:	2201      	movs	r2, #1
 8001876:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <MX_TIM9_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_TIM9_Init+0x98>)
 8001880:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001884:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <MX_TIM9_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_TIM9_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001892:	4816      	ldr	r0, [pc, #88]	@ (80018ec <MX_TIM9_Init+0x98>)
 8001894:	f004 f91c 	bl	8005ad0 <HAL_TIM_PWM_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800189e:	f000 fb07 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a2:	2360      	movs	r3, #96	@ 0x60
 80018a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <MX_TIM9_Init+0x98>)
 80018ba:	f004 fb55 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80018c4:	f000 faf4 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2204      	movs	r2, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4807      	ldr	r0, [pc, #28]	@ (80018ec <MX_TIM9_Init+0x98>)
 80018d0:	f004 fb4a 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80018da:	f000 fae9 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80018de:	4803      	ldr	r0, [pc, #12]	@ (80018ec <MX_TIM9_Init+0x98>)
 80018e0:	f000 fe36 	bl	8002550 <HAL_TIM_MspPostInit>

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000430 	.word	0x20000430
 80018f0:	40014000 	.word	0x40014000

080018f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800190c:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_TIM10_Init+0x94>)
 800190e:	4a1f      	ldr	r2, [pc, #124]	@ (800198c <MX_TIM10_Init+0x98>)
 8001910:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 8001912:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <MX_TIM10_Init+0x94>)
 8001914:	2201      	movs	r2, #1
 8001916:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <MX_TIM10_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_TIM10_Init+0x94>)
 8001920:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001924:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_TIM10_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <MX_TIM10_Init+0x94>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001932:	4815      	ldr	r0, [pc, #84]	@ (8001988 <MX_TIM10_Init+0x94>)
 8001934:	f004 f87d 	bl	8005a32 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800193e:	f000 fab7 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001942:	4811      	ldr	r0, [pc, #68]	@ (8001988 <MX_TIM10_Init+0x94>)
 8001944:	f004 f8c4 	bl	8005ad0 <HAL_TIM_PWM_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800194e:	f000 faaf 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001952:	2360      	movs	r3, #96	@ 0x60
 8001954:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	4807      	ldr	r0, [pc, #28]	@ (8001988 <MX_TIM10_Init+0x94>)
 800196a:	f004 fafd 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001974:	f000 fa9c 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001978:	4803      	ldr	r0, [pc, #12]	@ (8001988 <MX_TIM10_Init+0x94>)
 800197a:	f000 fde9 	bl	8002550 <HAL_TIM_MspPostInit>

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000478 	.word	0x20000478
 800198c:	40014400 	.word	0x40014400

08001990 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <MX_TIM11_Init+0x98>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019bc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80019c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019ce:	4815      	ldr	r0, [pc, #84]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019d0:	f004 f82f 	bl	8005a32 <HAL_TIM_Base_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80019da:	f000 fa69 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80019de:	4811      	ldr	r0, [pc, #68]	@ (8001a24 <MX_TIM11_Init+0x94>)
 80019e0:	f004 f876 	bl	8005ad0 <HAL_TIM_PWM_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80019ea:	f000 fa61 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ee:	2360      	movs	r3, #96	@ 0x60
 80019f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <MX_TIM11_Init+0x94>)
 8001a06:	f004 faaf 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001a10:	f000 fa4e 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001a14:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <MX_TIM11_Init+0x94>)
 8001a16:	f000 fd9b 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200004c0 	.word	0x200004c0
 8001a28:	40014800 	.word	0x40014800

08001a2c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a46:	4a20      	ldr	r2, [pc, #128]	@ (8001ac8 <MX_TIM12_Init+0x9c>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a58:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001a5c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a6a:	4816      	ldr	r0, [pc, #88]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a6c:	f004 f830 	bl	8005ad0 <HAL_TIM_PWM_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001a76:	f000 fa1b 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7a:	2360      	movs	r3, #96	@ 0x60
 8001a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001a92:	f004 fa69 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001a9c:	f000 fa08 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001aa8:	f004 fa5e 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001ab2:	f000 f9fd 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <MX_TIM12_Init+0x98>)
 8001ab8:	f000 fd4a 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000508 	.word	0x20000508
 8001ac8:	40001800 	.word	0x40001800

08001acc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <MX_TIM13_Init+0x98>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001af8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001afc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001b0a:	4815      	ldr	r0, [pc, #84]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001b0c:	f003 ff91 	bl	8005a32 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001b16:	f000 f9cb 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001b1a:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001b1c:	f003 ffd8 	bl	8005ad0 <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001b26:	f000 f9c3 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	@ 0x60
 8001b2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001b42:	f004 fa11 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001b4c:	f000 f9b0 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <MX_TIM13_Init+0x94>)
 8001b52:	f000 fcfd 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000550 	.word	0x20000550
 8001b64:	40001c00 	.word	0x40001c00

08001b68 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001b82:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <MX_TIM14_Init+0x98>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001b94:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b98:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ba6:	4815      	ldr	r0, [pc, #84]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001ba8:	f003 ff43 	bl	8005a32 <HAL_TIM_Base_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001bb2:	f000 f97d 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001bb6:	4811      	ldr	r0, [pc, #68]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001bb8:	f003 ff8a 	bl	8005ad0 <HAL_TIM_PWM_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001bc2:	f000 f975 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc6:	2360      	movs	r3, #96	@ 0x60
 8001bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001bde:	f004 f9c3 	bl	8005f68 <HAL_TIM_PWM_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001be8:	f000 f962 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <MX_TIM14_Init+0x94>)
 8001bee:	f000 fcaf 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000598 	.word	0x20000598
 8001c00:	40002000 	.word	0x40002000

08001c04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <MX_UART4_Init+0x50>)
 8001c0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_UART4_Init+0x4c>)
 8001c3c:	f004 fd54 	bl	80066e8 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001c46:	f000 f933 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200005e0 	.word	0x200005e0
 8001c54:	40004c00 	.word	0x40004c00

08001c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <MX_USART2_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c90:	f004 fd2a 	bl	80066e8 <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c9a:	f000 f909 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000628 	.word	0x20000628
 8001ca8:	40004400 	.word	0x40004400

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	@ 0x30
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b62      	ldr	r3, [pc, #392]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a61      	ldr	r2, [pc, #388]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b58      	ldr	r3, [pc, #352]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b54      	ldr	r3, [pc, #336]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a53      	ldr	r2, [pc, #332]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b51      	ldr	r3, [pc, #324]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a45      	ldr	r2, [pc, #276]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a3e      	ldr	r2, [pc, #248]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <MX_GPIO_Init+0x1a4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 8001d70:	4838      	ldr	r0, [pc, #224]	@ (8001e54 <MX_GPIO_Init+0x1a8>)
 8001d72:	f001 fd8d 	bl	8003890 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001d7c:	4836      	ldr	r0, [pc, #216]	@ (8001e58 <MX_GPIO_Init+0x1ac>)
 8001d7e:	f001 fd87 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2101      	movs	r1, #1
 8001d86:	4835      	ldr	r0, [pc, #212]	@ (8001e5c <MX_GPIO_Init+0x1b0>)
 8001d88:	f001 fd82 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d92:	4833      	ldr	r0, [pc, #204]	@ (8001e60 <MX_GPIO_Init+0x1b4>)
 8001d94:	f001 fd7c 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 PE13 PE15 EXTRA2_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001d98:	f24a 538d 	movw	r3, #42381	@ 0xa58d
 8001d9c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_15|EXTRA2_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	4828      	ldr	r0, [pc, #160]	@ (8001e54 <MX_GPIO_Init+0x1a8>)
 8001db2:	f001 fad5 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA1_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin;
 8001db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(EXTRA1_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4822      	ldr	r0, [pc, #136]	@ (8001e58 <MX_GPIO_Init+0x1ac>)
 8001dd0:	f001 fac6 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = LF_DIGI_R_Pin;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LF_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	481b      	ldr	r0, [pc, #108]	@ (8001e58 <MX_GPIO_Init+0x1ac>)
 8001dec:	f001 fab8 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4815      	ldr	r0, [pc, #84]	@ (8001e5c <MX_GPIO_Init+0x1b0>)
 8001e08:	f001 faaa 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LB_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = LB_DIGI_R_Pin|RF_DIGI_R_Pin;
 8001e0c:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e16:	2302      	movs	r3, #2
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	480b      	ldr	r0, [pc, #44]	@ (8001e54 <MX_GPIO_Init+0x1a8>)
 8001e26:	f001 fa9b 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 8001e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e34:	2302      	movs	r3, #2
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	4807      	ldr	r0, [pc, #28]	@ (8001e60 <MX_GPIO_Init+0x1b4>)
 8001e44:	f001 fa8c 	bl	8003360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	@ 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020c00 	.word	0x40020c00

08001e64 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
     if (huart->Instance == USART2){
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_UART_RxCpltCallback+0x34>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10b      	bne.n	8001e8e <HAL_UART_RxCpltCallback+0x2a>
        last_uart_data_time = uwTick;
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_UART_RxCpltCallback+0x38>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <HAL_UART_RxCpltCallback+0x3c>)
 8001e7c:	6013      	str	r3, [r2, #0]
        uart_resetting = 0;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_UART_RxCpltCallback+0x40>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&Str_PS2, sizeof(Str_PS2));
 8001e84:	2208      	movs	r2, #8
 8001e86:	4908      	ldr	r1, [pc, #32]	@ (8001ea8 <HAL_UART_RxCpltCallback+0x44>)
 8001e88:	4808      	ldr	r0, [pc, #32]	@ (8001eac <HAL_UART_RxCpltCallback+0x48>)
 8001e8a:	f004 fcaf 	bl	80067ec <HAL_UART_Receive_IT>
     }
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	20000688 	.word	0x20000688
 8001ea0:	20000870 	.word	0x20000870
 8001ea4:	20000874 	.word	0x20000874
 8001ea8:	20000670 	.word	0x20000670
 8001eac:	20000628 	.word	0x20000628

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <Error_Handler+0x8>

08001ebc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	4a0f      	ldr	r2, [pc, #60]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	@ 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a24      	ldr	r2, [pc, #144]	@ (8001fbc <HAL_ADC_MspInit+0xb0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d141      	bne.n	8001fb2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_ADC_MspInit+0xb4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f82:	2303      	movs	r3, #3
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f86:	2303      	movs	r3, #3
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <HAL_ADC_MspInit+0xb8>)
 8001f96:	f001 f9e3 	bl	8003360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f9a:	2330      	movs	r3, #48	@ 0x30
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <HAL_ADC_MspInit+0xbc>)
 8001fae:	f001 f9d7 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	@ 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	@ (8002050 <HAL_I2C_MspInit+0x84>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12c      	bne.n	8002048 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_I2C_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <HAL_I2C_MspInit+0x88>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_I2C_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800200a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800201c:	2304      	movs	r3, #4
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	480c      	ldr	r0, [pc, #48]	@ (8002058 <HAL_I2C_MspInit+0x8c>)
 8002028:	f001 f99a 	bl	8003360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_I2C_MspInit+0x88>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <HAL_I2C_MspInit+0x88>)
 8002036:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_I2C_MspInit+0x88>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	@ 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40005800 	.word	0x40005800
 8002054:	40023800 	.word	0x40023800
 8002058:	40020400 	.word	0x40020400

0800205c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a28      	ldr	r2, [pc, #160]	@ (800211c <HAL_SPI_MspInit+0xc0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d14a      	bne.n	8002114 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b27      	ldr	r3, [pc, #156]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a26      	ldr	r2, [pc, #152]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	4a18      	ldr	r2, [pc, #96]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <HAL_SPI_MspInit+0xc4>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d2:	230c      	movs	r3, #12
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e2:	2305      	movs	r3, #5
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	480d      	ldr	r0, [pc, #52]	@ (8002124 <HAL_SPI_MspInit+0xc8>)
 80020ee:	f001 f937 	bl	8003360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002104:	2305      	movs	r3, #5
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4806      	ldr	r0, [pc, #24]	@ (8002128 <HAL_SPI_MspInit+0xcc>)
 8002110:	f001 f926 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002114:	bf00      	nop
 8002116:	3728      	adds	r7, #40	@ 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40003800 	.word	0x40003800
 8002120:	40023800 	.word	0x40023800
 8002124:	40020800 	.word	0x40020800
 8002128:	40020400 	.word	0x40020400

0800212c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b094      	sub	sp, #80	@ 0x50
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a8c      	ldr	r2, [pc, #560]	@ (800237c <HAL_TIM_Encoder_MspInit+0x250>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12d      	bne.n	80021aa <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002152:	4b8b      	ldr	r3, [pc, #556]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	4a8a      	ldr	r2, [pc, #552]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6453      	str	r3, [r2, #68]	@ 0x44
 800215e:	4b88      	ldr	r3, [pc, #544]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	@ 0x34
 800216e:	4b84      	ldr	r3, [pc, #528]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a83      	ldr	r2, [pc, #524]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b81      	ldr	r3, [pc, #516]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	637b      	str	r3, [r7, #52]	@ 0x34
 8002184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002186:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002190:	2302      	movs	r3, #2
 8002192:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002198:	2301      	movs	r3, #1
 800219a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021a0:	4619      	mov	r1, r3
 80021a2:	4878      	ldr	r0, [pc, #480]	@ (8002384 <HAL_TIM_Encoder_MspInit+0x258>)
 80021a4:	f001 f8dc 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021a8:	e12b      	b.n	8002402 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b2:	d14b      	bne.n	800224c <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80021b8:	4b71      	ldr	r3, [pc, #452]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	4a70      	ldr	r2, [pc, #448]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	4a69      	ldr	r2, [pc, #420]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e0:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021f0:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	4a62      	ldr	r2, [pc, #392]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fc:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8002208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800221a:	2301      	movs	r3, #1
 800221c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002222:	4619      	mov	r1, r3
 8002224:	4858      	ldr	r0, [pc, #352]	@ (8002388 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002226:	f001 f89b 	bl	8003360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 800222a:	2308      	movs	r3, #8
 800222c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800223a:	2301      	movs	r3, #1
 800223c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002242:	4619      	mov	r1, r3
 8002244:	4851      	ldr	r0, [pc, #324]	@ (800238c <HAL_TIM_Encoder_MspInit+0x260>)
 8002246:	f001 f88b 	bl	8003360 <HAL_GPIO_Init>
}
 800224a:	e0da      	b.n	8002402 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a4f      	ldr	r2, [pc, #316]	@ (8002390 <HAL_TIM_Encoder_MspInit+0x264>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12c      	bne.n	80022b0 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
 800225a:	4b49      	ldr	r3, [pc, #292]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	4a48      	ldr	r2, [pc, #288]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	6413      	str	r3, [r2, #64]	@ 0x40
 8002266:	4b46      	ldr	r3, [pc, #280]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	4b42      	ldr	r3, [pc, #264]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a41      	ldr	r2, [pc, #260]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b3f      	ldr	r3, [pc, #252]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 800228e:	2330      	movs	r3, #48	@ 0x30
 8002290:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002296:	2302      	movs	r3, #2
 8002298:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800229e:	2302      	movs	r3, #2
 80022a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80022a6:	4619      	mov	r1, r3
 80022a8:	4838      	ldr	r0, [pc, #224]	@ (800238c <HAL_TIM_Encoder_MspInit+0x260>)
 80022aa:	f001 f859 	bl	8003360 <HAL_GPIO_Init>
}
 80022ae:	e0a8      	b.n	8002402 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a37      	ldr	r2, [pc, #220]	@ (8002394 <HAL_TIM_Encoder_MspInit+0x268>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12d      	bne.n	8002316 <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a28      	ldr	r2, [pc, #160]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022f2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002304:	2302      	movs	r3, #2
 8002306:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002308:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800230c:	4619      	mov	r1, r3
 800230e:	4822      	ldr	r0, [pc, #136]	@ (8002398 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002310:	f001 f826 	bl	8003360 <HAL_GPIO_Init>
}
 8002314:	e075      	b.n	8002402 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a20      	ldr	r2, [pc, #128]	@ (800239c <HAL_TIM_Encoder_MspInit+0x270>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d13f      	bne.n	80023a0 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	4a15      	ldr	r2, [pc, #84]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	4a0e      	ldr	r2, [pc, #56]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6313      	str	r3, [r2, #48]	@ 0x30
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <HAL_TIM_Encoder_MspInit+0x254>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002358:	2303      	movs	r3, #3
 800235a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002360:	2302      	movs	r3, #2
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002368:	2302      	movs	r3, #2
 800236a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002370:	4619      	mov	r1, r3
 8002372:	4805      	ldr	r0, [pc, #20]	@ (8002388 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002374:	f000 fff4 	bl	8003360 <HAL_GPIO_Init>
}
 8002378:	e043      	b.n	8002402 <HAL_TIM_Encoder_MspInit+0x2d6>
 800237a:	bf00      	nop
 800237c:	40010000 	.word	0x40010000
 8002380:	40023800 	.word	0x40023800
 8002384:	40021000 	.word	0x40021000
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40000400 	.word	0x40000400
 8002394:	40000800 	.word	0x40000800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_TIM_Encoder_MspInit+0x2e0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d12b      	bne.n	8002402 <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a17      	ldr	r2, [pc, #92]	@ (8002410 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a10      	ldr	r2, [pc, #64]	@ (8002410 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e2:	23c0      	movs	r3, #192	@ 0xc0
 80023e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ea:	2302      	movs	r3, #2
 80023ec:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023f2:	2303      	movs	r3, #3
 80023f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4805      	ldr	r0, [pc, #20]	@ (8002414 <HAL_TIM_Encoder_MspInit+0x2e8>)
 80023fe:	f000 ffaf 	bl	8003360 <HAL_GPIO_Init>
}
 8002402:	bf00      	nop
 8002404:	3750      	adds	r7, #80	@ 0x50
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40010400 	.word	0x40010400
 8002410:	40023800 	.word	0x40023800
 8002414:	40020800 	.word	0x40020800

08002418 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a15      	ldr	r2, [pc, #84]	@ (800247c <HAL_TIM_PWM_MspInit+0x64>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <HAL_TIM_PWM_MspInit+0x68>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a13      	ldr	r2, [pc, #76]	@ (8002480 <HAL_TIM_PWM_MspInit+0x68>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <HAL_TIM_PWM_MspInit+0x68>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002446:	e012      	b.n	800246e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <HAL_TIM_PWM_MspInit+0x6c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10d      	bne.n	800246e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_TIM_PWM_MspInit+0x68>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4a09      	ldr	r2, [pc, #36]	@ (8002480 <HAL_TIM_PWM_MspInit+0x68>)
 800245c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002460:	6413      	str	r3, [r2, #64]	@ 0x40
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <HAL_TIM_PWM_MspInit+0x68>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40014000 	.word	0x40014000
 8002480:	40023800 	.word	0x40023800
 8002484:	40001800 	.word	0x40001800

08002488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a29      	ldr	r2, [pc, #164]	@ (800253c <HAL_TIM_Base_MspInit+0xb4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10e      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	4a27      	ldr	r2, [pc, #156]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024aa:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80024b6:	e03a      	b.n	800252e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a21      	ldr	r2, [pc, #132]	@ (8002544 <HAL_TIM_Base_MspInit+0xbc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
}
 80024de:	e026      	b.n	800252e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <HAL_TIM_Base_MspInit+0xc0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	4a13      	ldr	r2, [pc, #76]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
}
 8002506:	e012      	b.n	800252e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <HAL_TIM_Base_MspInit+0xc4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d10d      	bne.n	800252e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002520:	6413      	str	r3, [r2, #64]	@ 0x40
 8002522:	4b07      	ldr	r3, [pc, #28]	@ (8002540 <HAL_TIM_Base_MspInit+0xb8>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40014400 	.word	0x40014400
 8002540:	40023800 	.word	0x40023800
 8002544:	40014800 	.word	0x40014800
 8002548:	40001c00 	.word	0x40001c00
 800254c:	40002000 	.word	0x40002000

08002550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08e      	sub	sp, #56	@ 0x38
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6d      	ldr	r2, [pc, #436]	@ (8002724 <HAL_TIM_MspPostInit+0x1d4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d11e      	bne.n	80025b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
 8002576:	4b6c      	ldr	r3, [pc, #432]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a6b      	ldr	r2, [pc, #428]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 800257c:	f043 0310 	orr.w	r3, r3, #16
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b69      	ldr	r3, [pc, #420]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800258e:	2360      	movs	r3, #96	@ 0x60
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800259e:	2303      	movs	r3, #3
 80025a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4860      	ldr	r0, [pc, #384]	@ (800272c <HAL_TIM_MspPostInit+0x1dc>)
 80025aa:	f000 fed9 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80025ae:	e0b5      	b.n	800271c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5e      	ldr	r2, [pc, #376]	@ (8002730 <HAL_TIM_MspPostInit+0x1e0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d11f      	bne.n	80025fa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	4b5a      	ldr	r3, [pc, #360]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a59      	ldr	r2, [pc, #356]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b57      	ldr	r3, [pc, #348]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 80025d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80025e8:	2303      	movs	r3, #3
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80025ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f0:	4619      	mov	r1, r3
 80025f2:	4850      	ldr	r0, [pc, #320]	@ (8002734 <HAL_TIM_MspPostInit+0x1e4>)
 80025f4:	f000 feb4 	bl	8003360 <HAL_GPIO_Init>
}
 80025f8:	e090      	b.n	800271c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002738 <HAL_TIM_MspPostInit+0x1e8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d11f      	bne.n	8002644 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	4a46      	ldr	r2, [pc, #280]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	6313      	str	r3, [r2, #48]	@ 0x30
 8002614:	4b44      	ldr	r3, [pc, #272]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8002620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002632:	2303      	movs	r3, #3
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800263a:	4619      	mov	r1, r3
 800263c:	483d      	ldr	r0, [pc, #244]	@ (8002734 <HAL_TIM_MspPostInit+0x1e4>)
 800263e:	f000 fe8f 	bl	8003360 <HAL_GPIO_Init>
}
 8002642:	e06b      	b.n	800271c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3c      	ldr	r2, [pc, #240]	@ (800273c <HAL_TIM_MspPostInit+0x1ec>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d11f      	bne.n	800268e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	4b35      	ldr	r3, [pc, #212]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a34      	ldr	r2, [pc, #208]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b32      	ldr	r3, [pc, #200]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 800266a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800267c:	2309      	movs	r3, #9
 800267e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002684:	4619      	mov	r1, r3
 8002686:	482b      	ldr	r0, [pc, #172]	@ (8002734 <HAL_TIM_MspPostInit+0x1e4>)
 8002688:	f000 fe6a 	bl	8003360 <HAL_GPIO_Init>
}
 800268c:	e046      	b.n	800271c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2b      	ldr	r2, [pc, #172]	@ (8002740 <HAL_TIM_MspPostInit+0x1f0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d11e      	bne.n	80026d6 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	4a21      	ldr	r2, [pc, #132]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 80026b4:	2340      	movs	r3, #64	@ 0x40
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80026c4:	2309      	movs	r3, #9
 80026c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	481d      	ldr	r0, [pc, #116]	@ (8002744 <HAL_TIM_MspPostInit+0x1f4>)
 80026d0:	f000 fe46 	bl	8003360 <HAL_GPIO_Init>
}
 80026d4:	e022      	b.n	800271c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <HAL_TIM_MspPostInit+0x1f8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d11d      	bne.n	800271c <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <HAL_TIM_MspPostInit+0x1d8>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800270c:	2309      	movs	r3, #9
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002714:	4619      	mov	r1, r3
 8002716:	480b      	ldr	r0, [pc, #44]	@ (8002744 <HAL_TIM_MspPostInit+0x1f4>)
 8002718:	f000 fe22 	bl	8003360 <HAL_GPIO_Init>
}
 800271c:	bf00      	nop
 800271e:	3738      	adds	r7, #56	@ 0x38
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40014000 	.word	0x40014000
 8002728:	40023800 	.word	0x40023800
 800272c:	40021000 	.word	0x40021000
 8002730:	40014400 	.word	0x40014400
 8002734:	40020400 	.word	0x40020400
 8002738:	40014800 	.word	0x40014800
 800273c:	40001800 	.word	0x40001800
 8002740:	40001c00 	.word	0x40001c00
 8002744:	40020000 	.word	0x40020000
 8002748:	40002000 	.word	0x40002000

0800274c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	@ 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a36      	ldr	r2, [pc, #216]	@ (8002844 <HAL_UART_MspInit+0xf8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12d      	bne.n	80027ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	4b35      	ldr	r3, [pc, #212]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	4a34      	ldr	r2, [pc, #208]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 8002778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800277c:	6413      	str	r3, [r2, #64]	@ 0x40
 800277e:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	4b2e      	ldr	r3, [pc, #184]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a2d      	ldr	r2, [pc, #180]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027b8:	2308      	movs	r3, #8
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4822      	ldr	r0, [pc, #136]	@ (800284c <HAL_UART_MspInit+0x100>)
 80027c4:	f000 fdcc 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027c8:	e038      	b.n	800283c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a20      	ldr	r2, [pc, #128]	@ (8002850 <HAL_UART_MspInit+0x104>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d133      	bne.n	800283c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 80027de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e4:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	4a13      	ldr	r2, [pc, #76]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002800:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <HAL_UART_MspInit+0xfc>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800280c:	230c      	movs	r3, #12
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800281c:	2307      	movs	r3, #7
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	480b      	ldr	r0, [pc, #44]	@ (8002854 <HAL_UART_MspInit+0x108>)
 8002828:	f000 fd9a 	bl	8003360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	2026      	movs	r0, #38	@ 0x26
 8002832:	f000 fcbe 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002836:	2026      	movs	r0, #38	@ 0x26
 8002838:	f000 fcd7 	bl	80031ea <HAL_NVIC_EnableIRQ>
}
 800283c:	bf00      	nop
 800283e:	3730      	adds	r7, #48	@ 0x30
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40004c00 	.word	0x40004c00
 8002848:	40023800 	.word	0x40023800
 800284c:	40020800 	.word	0x40020800
 8002850:	40004400 	.word	0x40004400
 8002854:	40020000 	.word	0x40020000

08002858 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <HAL_UART_MspDeInit+0x58>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10b      	bne.n	8002882 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800286a:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <HAL_UART_MspDeInit+0x5c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <HAL_UART_MspDeInit+0x5c>)
 8002870:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8002876:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800287a:	480f      	ldr	r0, [pc, #60]	@ (80028b8 <HAL_UART_MspDeInit+0x60>)
 800287c:	f000 ff0c 	bl	8003698 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002880:	e011      	b.n	80028a6 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a0d      	ldr	r2, [pc, #52]	@ (80028bc <HAL_UART_MspDeInit+0x64>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10c      	bne.n	80028a6 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_UART_MspDeInit+0x5c>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	4a08      	ldr	r2, [pc, #32]	@ (80028b4 <HAL_UART_MspDeInit+0x5c>)
 8002892:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002896:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002898:	210c      	movs	r1, #12
 800289a:	4809      	ldr	r0, [pc, #36]	@ (80028c0 <HAL_UART_MspDeInit+0x68>)
 800289c:	f000 fefc 	bl	8003698 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80028a0:	2026      	movs	r0, #38	@ 0x26
 80028a2:	f000 fcb0 	bl	8003206 <HAL_NVIC_DisableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40004c00 	.word	0x40004c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40004400 	.word	0x40004400
 80028c0:	40020000 	.word	0x40020000

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <NMI_Handler+0x4>

080028cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <MemManage_Handler+0x4>

080028dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291a:	f000 f8a5 	bl	8002a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <USART2_IRQHandler+0x10>)
 800292a:	f003 ff85 	bl	8006838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000628 	.word	0x20000628

08002938 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <OTG_FS_IRQHandler+0x10>)
 800293e:	f001 fa49 	bl	8003dd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20001d54 	.word	0x20001d54

0800294c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <SystemInit+0x20>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	4a05      	ldr	r2, [pc, #20]	@ (800296c <SystemInit+0x20>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002974:	f7ff ffea 	bl	800294c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002978:	480c      	ldr	r0, [pc, #48]	@ (80029ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800297a:	490d      	ldr	r1, [pc, #52]	@ (80029b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002990:	4c0a      	ldr	r4, [pc, #40]	@ (80029bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800299e:	f00a fa55 	bl	800ce4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a2:	f7fe fa6d 	bl	8000e80 <main>
  bx  lr    
 80029a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80029b4:	0800e978 	.word	0x0800e978
  ldr r2, =_sbss
 80029b8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80029bc:	20002590 	.word	0x20002590

080029c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC_IRQHandler>
	...

080029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_Init+0x40>)
 80029ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <HAL_Init+0x40>)
 80029da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a07      	ldr	r2, [pc, #28]	@ (8002a04 <HAL_Init+0x40>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ec:	2003      	movs	r0, #3
 80029ee:	f000 fbd5 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f2:	200f      	movs	r0, #15
 80029f4:	f000 f808 	bl	8002a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f8:	f7ff fa60 	bl	8001ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00

08002a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a10:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_InitTick+0x54>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_InitTick+0x58>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fbfb 	bl	8003222 <HAL_SYSTICK_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00e      	b.n	8002a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d80a      	bhi.n	8002a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f000 fbb5 	bl	80031b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a48:	4a06      	ldr	r2, [pc, #24]	@ (8002a64 <HAL_InitTick+0x5c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	20000008 	.word	0x20000008

08002a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_IncTick+0x20>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_IncTick+0x24>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a04      	ldr	r2, [pc, #16]	@ (8002a8c <HAL_IncTick+0x24>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000688 	.word	0x20000688

08002a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return uwTick;
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_GetTick+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000688 	.word	0x20000688

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff ffee 	bl	8002a90 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d005      	beq.n	8002ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_Delay+0x44>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ace:	bf00      	nop
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f7      	bhi.n	8002ad0 <HAL_Delay+0x28>
  {
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000000c 	.word	0x2000000c

08002af0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e033      	b.n	8002b6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff f9fc 	bl	8001f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b36:	f023 0302 	bic.w	r3, r3, #2
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f93a 	bl	8002dbc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b5e:	e001      	b.n	8002b64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x1c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e105      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x228>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d925      	bls.n	8002bf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b1e      	subs	r3, #30
 8002bba:	2207      	movs	r2, #7
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68d9      	ldr	r1, [r3, #12]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4403      	add	r3, r0
 8002be2:	3b1e      	subs	r3, #30
 8002be4:	409a      	lsls	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	e022      	b.n	8002c36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6919      	ldr	r1, [r3, #16]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	2207      	movs	r2, #7
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6919      	ldr	r1, [r3, #16]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4618      	mov	r0, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4403      	add	r3, r0
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d824      	bhi.n	8002c88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3b05      	subs	r3, #5
 8002c50:	221f      	movs	r2, #31
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	3b05      	subs	r3, #5
 8002c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c86:	e04c      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d824      	bhi.n	8002cda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b23      	subs	r3, #35	@ 0x23
 8002ca2:	221f      	movs	r2, #31
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	400a      	ands	r2, r1
 8002cb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b23      	subs	r3, #35	@ 0x23
 8002ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cd8:	e023      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b41      	subs	r3, #65	@ 0x41
 8002cec:	221f      	movs	r2, #31
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b41      	subs	r3, #65	@ 0x41
 8002d16:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d22:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <HAL_ADC_ConfigChannel+0x234>)
 8002d24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a21      	ldr	r2, [pc, #132]	@ (8002db0 <HAL_ADC_ConfigChannel+0x238>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d109      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1cc>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b12      	cmp	r3, #18
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a19      	ldr	r2, [pc, #100]	@ (8002db0 <HAL_ADC_ConfigChannel+0x238>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d123      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x21e>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d003      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x1e6>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b11      	cmp	r3, #17
 8002d5c:	d11b      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d111      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d72:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <HAL_ADC_ConfigChannel+0x23c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a10      	ldr	r2, [pc, #64]	@ (8002db8 <HAL_ADC_ConfigChannel+0x240>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	0c9a      	lsrs	r2, r3, #18
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d88:	e002      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f9      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40012300 	.word	0x40012300
 8002db0:	40012000 	.word	0x40012000
 8002db4:	20000004 	.word	0x20000004
 8002db8:	431bde83 	.word	0x431bde83

08002dbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dc4:	4b79      	ldr	r3, [pc, #484]	@ (8002fac <ADC_Init+0x1f0>)
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	4a58      	ldr	r2, [pc, #352]	@ (8002fb0 <ADC_Init+0x1f4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e00f      	b.n	8002eba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002eb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0202 	bic.w	r2, r2, #2
 8002ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6899      	ldr	r1, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7e1b      	ldrb	r3, [r3, #24]
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01b      	beq.n	8002f20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ef6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	3b01      	subs	r3, #1
 8002f14:	035a      	lsls	r2, r3, #13
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	e007      	b.n	8002f30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	051a      	lsls	r2, r3, #20
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6899      	ldr	r1, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f72:	025a      	lsls	r2, r3, #9
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6899      	ldr	r1, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	029a      	lsls	r2, r3, #10
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40012300 	.word	0x40012300
 8002fb0:	0f000001 	.word	0x0f000001

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4907      	ldr	r1, [pc, #28]	@ (8003050 <__NVIC_EnableIRQ+0x38>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db12      	blt.n	800308c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	490a      	ldr	r1, [pc, #40]	@ (8003098 <__NVIC_DisableIRQ+0x44>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	3320      	adds	r3, #32
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003080:	f3bf 8f4f 	dsb	sy
}
 8003084:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003086:	f3bf 8f6f 	isb	sy
}
 800308a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	@ (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	@ (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	@ 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	@ 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff05 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c4:	f7ff ff1a 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 80031c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff ff8e 	bl	80030f0 <NVIC_EncodePriority>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff5d 	bl	800309c <__NVIC_SetPriority>
}
 80031e2:	bf00      	nop
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff0d 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff1d 	bl	8003054 <__NVIC_DisableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ff94 	bl	8003158 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff fc22 	bl	8002a90 <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d008      	beq.n	800326c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e052      	b.n	8003312 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0216 	bic.w	r2, r2, #22
 800327a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800328a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <HAL_DMA_Abort+0x62>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0208 	bic.w	r2, r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	e013      	b.n	80032e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032be:	f7ff fbe7 	bl	8002a90 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d90c      	bls.n	80032e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e015      	b.n	8003312 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e4      	bne.n	80032be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	223f      	movs	r2, #63	@ 0x3f
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d004      	beq.n	8003338 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2280      	movs	r2, #128	@ 0x80
 8003332:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e00c      	b.n	8003352 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2205      	movs	r2, #5
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	@ 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e16b      	b.n	8003654 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800337c:	2201      	movs	r2, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	f040 815a 	bne.w	800364e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d005      	beq.n	80033b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d130      	bne.n	8003414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0201 	and.w	r2, r3, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b03      	cmp	r3, #3
 800341e:	d017      	beq.n	8003450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d123      	bne.n	80034a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	220f      	movs	r2, #15
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	69b9      	ldr	r1, [r7, #24]
 80034a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0203 	and.w	r2, r3, #3
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80b4 	beq.w	800364e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b60      	ldr	r3, [pc, #384]	@ (800366c <HAL_GPIO_Init+0x30c>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	4a5f      	ldr	r2, [pc, #380]	@ (800366c <HAL_GPIO_Init+0x30c>)
 80034f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034f6:	4b5d      	ldr	r3, [pc, #372]	@ (800366c <HAL_GPIO_Init+0x30c>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003502:	4a5b      	ldr	r2, [pc, #364]	@ (8003670 <HAL_GPIO_Init+0x310>)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	@ (8003674 <HAL_GPIO_Init+0x314>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02b      	beq.n	8003586 <HAL_GPIO_Init+0x226>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a51      	ldr	r2, [pc, #324]	@ (8003678 <HAL_GPIO_Init+0x318>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d025      	beq.n	8003582 <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a50      	ldr	r2, [pc, #320]	@ (800367c <HAL_GPIO_Init+0x31c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01f      	beq.n	800357e <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4f      	ldr	r2, [pc, #316]	@ (8003680 <HAL_GPIO_Init+0x320>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d019      	beq.n	800357a <HAL_GPIO_Init+0x21a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4e      	ldr	r2, [pc, #312]	@ (8003684 <HAL_GPIO_Init+0x324>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0x216>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4d      	ldr	r2, [pc, #308]	@ (8003688 <HAL_GPIO_Init+0x328>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00d      	beq.n	8003572 <HAL_GPIO_Init+0x212>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4c      	ldr	r2, [pc, #304]	@ (800368c <HAL_GPIO_Init+0x32c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x20e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4b      	ldr	r2, [pc, #300]	@ (8003690 <HAL_GPIO_Init+0x330>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_GPIO_Init+0x20a>
 8003566:	2307      	movs	r3, #7
 8003568:	e00e      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800356a:	2308      	movs	r3, #8
 800356c:	e00c      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800356e:	2306      	movs	r3, #6
 8003570:	e00a      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003572:	2305      	movs	r3, #5
 8003574:	e008      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003576:	2304      	movs	r3, #4
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <HAL_GPIO_Init+0x228>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x228>
 8003586:	2300      	movs	r3, #0
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	4093      	lsls	r3, r2
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003598:	4935      	ldr	r1, [pc, #212]	@ (8003670 <HAL_GPIO_Init+0x310>)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003694 <HAL_GPIO_Init+0x334>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ca:	4a32      	ldr	r2, [pc, #200]	@ (8003694 <HAL_GPIO_Init+0x334>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d0:	4b30      	ldr	r3, [pc, #192]	@ (8003694 <HAL_GPIO_Init+0x334>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035f4:	4a27      	ldr	r2, [pc, #156]	@ (8003694 <HAL_GPIO_Init+0x334>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <HAL_GPIO_Init+0x334>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <HAL_GPIO_Init+0x334>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_GPIO_Init+0x334>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003648:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <HAL_GPIO_Init+0x334>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3301      	adds	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	f67f ae90 	bls.w	800337c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3724      	adds	r7, #36	@ 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	40013800 	.word	0x40013800
 8003674:	40020000 	.word	0x40020000
 8003678:	40020400 	.word	0x40020400
 800367c:	40020800 	.word	0x40020800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40021000 	.word	0x40021000
 8003688:	40021400 	.word	0x40021400
 800368c:	40021800 	.word	0x40021800
 8003690:	40021c00 	.word	0x40021c00
 8003694:	40013c00 	.word	0x40013c00

08003698 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e0cd      	b.n	8003850 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036b4:	2201      	movs	r2, #1
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	f040 80bd 	bne.w	800384a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036d0:	4a65      	ldr	r2, [pc, #404]	@ (8003868 <HAL_GPIO_DeInit+0x1d0>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	220f      	movs	r2, #15
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a5d      	ldr	r2, [pc, #372]	@ (800386c <HAL_GPIO_DeInit+0x1d4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02b      	beq.n	8003752 <HAL_GPIO_DeInit+0xba>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003870 <HAL_GPIO_DeInit+0x1d8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d025      	beq.n	800374e <HAL_GPIO_DeInit+0xb6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a5b      	ldr	r2, [pc, #364]	@ (8003874 <HAL_GPIO_DeInit+0x1dc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01f      	beq.n	800374a <HAL_GPIO_DeInit+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a5a      	ldr	r2, [pc, #360]	@ (8003878 <HAL_GPIO_DeInit+0x1e0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_DeInit+0xae>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a59      	ldr	r2, [pc, #356]	@ (800387c <HAL_GPIO_DeInit+0x1e4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_DeInit+0xaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a58      	ldr	r2, [pc, #352]	@ (8003880 <HAL_GPIO_DeInit+0x1e8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_DeInit+0xa6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a57      	ldr	r2, [pc, #348]	@ (8003884 <HAL_GPIO_DeInit+0x1ec>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_DeInit+0xa2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a56      	ldr	r2, [pc, #344]	@ (8003888 <HAL_GPIO_DeInit+0x1f0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_DeInit+0x9e>
 8003732:	2307      	movs	r3, #7
 8003734:	e00e      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 8003736:	2308      	movs	r3, #8
 8003738:	e00c      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 800373a:	2306      	movs	r3, #6
 800373c:	e00a      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 800373e:	2305      	movs	r3, #5
 8003740:	e008      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 8003742:	2304      	movs	r3, #4
 8003744:	e006      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 8003746:	2303      	movs	r3, #3
 8003748:	e004      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 800374a:	2302      	movs	r3, #2
 800374c:	e002      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_GPIO_DeInit+0xbc>
 8003752:	2300      	movs	r3, #0
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4093      	lsls	r3, r2
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d132      	bne.n	80037ca <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003764:	4b49      	ldr	r3, [pc, #292]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	43db      	mvns	r3, r3
 800376c:	4947      	ldr	r1, [pc, #284]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 800376e:	4013      	ands	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003772:	4b46      	ldr	r3, [pc, #280]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	4944      	ldr	r1, [pc, #272]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 800377c:	4013      	ands	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003780:	4b42      	ldr	r3, [pc, #264]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	4940      	ldr	r1, [pc, #256]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 800378a:	4013      	ands	r3, r2
 800378c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800378e:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	43db      	mvns	r3, r3
 8003796:	493d      	ldr	r1, [pc, #244]	@ (800388c <HAL_GPIO_DeInit+0x1f4>)
 8003798:	4013      	ands	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003868 <HAL_GPIO_DeInit+0x1d0>)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	43da      	mvns	r2, r3
 80037bc:	482a      	ldr	r0, [pc, #168]	@ (8003868 <HAL_GPIO_DeInit+0x1d0>)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	400a      	ands	r2, r1
 80037c4:	3302      	adds	r3, #2
 80037c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2103      	movs	r1, #3
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	401a      	ands	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	08d2      	lsrs	r2, r2, #3
 8003800:	4019      	ands	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3208      	adds	r2, #8
 8003806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2103      	movs	r1, #3
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	2101      	movs	r1, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	401a      	ands	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	2103      	movs	r1, #3
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	401a      	ands	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3301      	adds	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	f67f af2e 	bls.w	80036b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40013800 	.word	0x40013800
 800386c:	40020000 	.word	0x40020000
 8003870:	40020400 	.word	0x40020400
 8003874:	40020800 	.word	0x40020800
 8003878:	40020c00 	.word	0x40020c00
 800387c:	40021000 	.word	0x40021000
 8003880:	40021400 	.word	0x40021400
 8003884:	40021800 	.word	0x40021800
 8003888:	40021c00 	.word	0x40021c00
 800388c:	40013c00 	.word	0x40013c00

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038ac:	e003      	b.n	80038b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	041a      	lsls	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	619a      	str	r2, [r3, #24]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e12b      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe fb6e 	bl	8001fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	@ 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003928:	f001 ffd2 	bl	80058d0 <HAL_RCC_GetPCLK1Freq>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4a81      	ldr	r2, [pc, #516]	@ (8003b38 <HAL_I2C_Init+0x274>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d807      	bhi.n	8003948 <HAL_I2C_Init+0x84>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a80      	ldr	r2, [pc, #512]	@ (8003b3c <HAL_I2C_Init+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e006      	b.n	8003956 <HAL_I2C_Init+0x92>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b40 <HAL_I2C_Init+0x27c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e7      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a78      	ldr	r2, [pc, #480]	@ (8003b44 <HAL_I2C_Init+0x280>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0c9b      	lsrs	r3, r3, #18
 8003968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b38 <HAL_I2C_Init+0x274>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d802      	bhi.n	8003998 <HAL_I2C_Init+0xd4>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3301      	adds	r3, #1
 8003996:	e009      	b.n	80039ac <HAL_I2C_Init+0xe8>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	4a69      	ldr	r2, [pc, #420]	@ (8003b48 <HAL_I2C_Init+0x284>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	3301      	adds	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	495c      	ldr	r1, [pc, #368]	@ (8003b38 <HAL_I2C_Init+0x274>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d819      	bhi.n	8003a00 <HAL_I2C_Init+0x13c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e59      	subs	r1, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039e0:	400b      	ands	r3, r1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_I2C_Init+0x138>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e59      	subs	r1, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	e051      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e04f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <HAL_I2C_Init+0x168>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e012      	b.n	8003a52 <HAL_I2C_Init+0x18e>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	0099      	lsls	r1, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Init+0x196>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e022      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <HAL_I2C_Init+0x1bc>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1e58      	subs	r0, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	440b      	add	r3, r1
 8003a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a7e:	e00f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	0099      	lsls	r1, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	6809      	ldr	r1, [r1, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ace:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6911      	ldr	r1, [r2, #16]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	000186a0 	.word	0x000186a0
 8003b3c:	001e847f 	.word	0x001e847f
 8003b40:	003d08ff 	.word	0x003d08ff
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e101      	b.n	8003d62 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f008 fe45 	bl	800c808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2203      	movs	r2, #3
 8003b82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b8c:	d102      	bne.n	8003b94 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fe62 	bl	8007862 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7c1a      	ldrb	r2, [r3, #16]
 8003ba6:	f88d 2000 	strb.w	r2, [sp]
 8003baa:	3304      	adds	r3, #4
 8003bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bae:	f003 fd41 	bl	8007634 <USB_CoreInit>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0ce      	b.n	8003d62 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 fe5a 	bl	8007884 <USB_SetCurrentMode>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e0bf      	b.n	8003d62 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	e04a      	b.n	8003c7e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3315      	adds	r3, #21
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	b298      	uxth	r0, r3
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	332e      	adds	r3, #46	@ 0x2e
 8003c24:	4602      	mov	r2, r0
 8003c26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	3318      	adds	r3, #24
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	331c      	adds	r3, #28
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3320      	adds	r3, #32
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3324      	adds	r3, #36	@ 0x24
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	791b      	ldrb	r3, [r3, #4]
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d3af      	bcc.n	8003be8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e044      	b.n	8003d18 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c8e:	7bfa      	ldrb	r2, [r7, #15]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cb6:	7bfa      	ldrb	r2, [r7, #15]
 8003cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	3301      	adds	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	791b      	ldrb	r3, [r3, #4]
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d3b5      	bcc.n	8003c8e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7c1a      	ldrb	r2, [r3, #16]
 8003d2a:	f88d 2000 	strb.w	r2, [sp]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d32:	f003 fdf3 	bl	800791c <USB_DevInit>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e00c      	b.n	8003d62 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 fe3d 	bl	80089da <USB_DevDisconnect>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_PCD_Start+0x1c>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e022      	b.n	8003dcc <HAL_PCD_Start+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 fd44 	bl	8007840 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f004 fdeb 	bl	8008998 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b08d      	sub	sp, #52	@ 0x34
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 fea9 	bl	8008b42 <USB_GetMode>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 848c 	bne.w	8004710 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 fe0d 	bl	8008a1c <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8482 	beq.w	800470e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 fdfa 	bl	8008a1c <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d107      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f002 0202 	and.w	r2, r2, #2
 8003e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 fde8 	bl	8008a1c <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d161      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0210 	bic.w	r2, r2, #16
 8003e64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f003 020f 	and.w	r2, r3, #15
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	3304      	adds	r3, #4
 8003e84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	0c5b      	lsrs	r3, r3, #17
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d124      	bne.n	8003edc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d035      	beq.n	8003f0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6a38      	ldr	r0, [r7, #32]
 8003eb2:	f004 fc1f 	bl	80086f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ec2:	441a      	add	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed4:	441a      	add	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	615a      	str	r2, [r3, #20]
 8003eda:	e016      	b.n	8003f0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	0c5b      	lsrs	r3, r3, #17
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d110      	bne.n	8003f0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eee:	2208      	movs	r2, #8
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6a38      	ldr	r0, [r7, #32]
 8003ef4:	f004 fbfe 	bl	80086f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f04:	441a      	add	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0210 	orr.w	r2, r2, #16
 8003f18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fd7c 	bl	8008a1c <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f2e:	f040 80a7 	bne.w	8004080 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 fd81 	bl	8008a42 <USB_ReadDevAllOutEpInterrupt>
 8003f40:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f42:	e099      	b.n	8004078 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 808e 	beq.w	800406c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f004 fda5 	bl	8008aaa <USB_ReadDevOutEPInterrupt>
 8003f60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00c      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fea3 	bl	8004ccc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 ff79 	bl	8004e9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d030      	beq.n	8004032 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd8:	2b80      	cmp	r3, #128	@ 0x80
 8003fda:	d109      	bne.n	8003ff0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	3304      	adds	r3, #4
 8004004:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	78db      	ldrb	r3, [r3, #3]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d108      	bne.n	8004020 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f008 fcfa 	bl	800ca14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402c:	461a      	mov	r2, r3
 800402e:	2302      	movs	r3, #2
 8004030:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004048:	461a      	mov	r2, r3
 800404a:	2320      	movs	r3, #32
 800404c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800406a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	3301      	adds	r3, #1
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	f47f af62 	bne.w	8003f44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f004 fcc9 	bl	8008a1c <USB_ReadInterrupts>
 800408a:	4603      	mov	r3, r0
 800408c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004094:	f040 80db 	bne.w	800424e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f004 fcea 	bl	8008a76 <USB_ReadDevAllInEpInterrupt>
 80040a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80040a8:	e0cd      	b.n	8004246 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80c2 	beq.w	800423a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f004 fd10 	bl	8008ae6 <USB_ReadDevInEPInterrupt>
 80040c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d057      	beq.n	8004182 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	2201      	movs	r2, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69f9      	ldr	r1, [r7, #28]
 80040ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040f2:	4013      	ands	r3, r2
 80040f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004102:	461a      	mov	r2, r3
 8004104:	2301      	movs	r3, #1
 8004106:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	799b      	ldrb	r3, [r3, #6]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d132      	bne.n	8004176 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	3320      	adds	r3, #32
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4403      	add	r3, r0
 8004130:	331c      	adds	r3, #28
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4419      	add	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4403      	add	r3, r0
 8004144:	3320      	adds	r3, #32
 8004146:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d113      	bne.n	8004176 <HAL_PCD_IRQHandler+0x3a2>
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3324      	adds	r3, #36	@ 0x24
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d108      	bne.n	8004176 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800416e:	461a      	mov	r2, r3
 8004170:	2101      	movs	r1, #1
 8004172:	f004 fd17 	bl	8008ba4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	b2db      	uxtb	r3, r3
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f008 fbc4 	bl	800c90a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004198:	461a      	mov	r2, r3
 800419a:	2308      	movs	r3, #8
 800419c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b4:	461a      	mov	r2, r3
 80041b6:	2310      	movs	r3, #16
 80041b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	2340      	movs	r3, #64	@ 0x40
 80041d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041e2:	6a38      	ldr	r0, [r7, #32]
 80041e4:	f003 fcfe 	bl	8007be4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	3310      	adds	r3, #16
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	3304      	adds	r3, #4
 80041fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	78db      	ldrb	r3, [r3, #3]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d108      	bne.n	8004216 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2200      	movs	r2, #0
 8004208:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f008 fc11 	bl	800ca38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004222:	461a      	mov	r2, r3
 8004224:	2302      	movs	r3, #2
 8004226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fcbd 	bl	8004bb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	3301      	adds	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	f47f af2e 	bne.w	80040aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f004 fbe2 	bl	8008a1c <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800425e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004262:	d122      	bne.n	80042aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800427e:	2b01      	cmp	r3, #1
 8004280:	d108      	bne.n	8004294 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800428a:	2100      	movs	r1, #0
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fea3 	bl	8004fd8 <HAL_PCDEx_LPM_Callback>
 8004292:	e002      	b.n	800429a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f008 fbaf 	bl	800c9f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80042a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 fbb4 	bl	8008a1c <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042be:	d112      	bne.n	80042e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d102      	bne.n	80042d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f008 fb6b 	bl	800c9ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042e4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 fb96 	bl	8008a1c <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	f040 80b7 	bne.w	800446c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2110      	movs	r1, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fc63 	bl	8007be4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004322:	e046      	b.n	80043b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004330:	461a      	mov	r2, r3
 8004332:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004336:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004352:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004356:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800436a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800437c:	0151      	lsls	r1, r2, #5
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	440a      	add	r2, r1
 8004382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004386:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800438a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800438c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ae:	3301      	adds	r3, #1
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	791b      	ldrb	r3, [r3, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d3b2      	bcc.n	8004324 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80043d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	7bdb      	ldrb	r3, [r3, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ea:	f043 030b 	orr.w	r3, r3, #11
 80043ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004400:	f043 030b 	orr.w	r3, r3, #11
 8004404:	6453      	str	r3, [r2, #68]	@ 0x44
 8004406:	e015      	b.n	8004434 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004416:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800441a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800441e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800442e:	f043 030b 	orr.w	r3, r3, #11
 8004432:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004442:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004446:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004456:	461a      	mov	r2, r3
 8004458:	f004 fba4 	bl	8008ba4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800446a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f004 fad3 	bl	8008a1c <USB_ReadInterrupts>
 8004476:	4603      	mov	r3, r0
 8004478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004480:	d123      	bne.n	80044ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f004 fb69 	bl	8008b5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f003 fc20 	bl	8007cd6 <USB_GetDevSpeed>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681c      	ldr	r4, [r3, #0]
 80044a2:	f001 fa09 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 80044a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044ac:	461a      	mov	r2, r3
 80044ae:	4620      	mov	r0, r4
 80044b0:	f003 f924 	bl	80076fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f008 fa50 	bl	800c95a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80044c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f004 faa4 	bl	8008a1c <USB_ReadInterrupts>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d10a      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f008 fa2d 	bl	800c93e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f002 0208 	and.w	r2, r2, #8
 80044f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f004 fa8f 	bl	8008a1c <USB_ReadInterrupts>
 80044fe:	4603      	mov	r3, r0
 8004500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004504:	2b80      	cmp	r3, #128	@ 0x80
 8004506:	d123      	bne.n	8004550 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004514:	2301      	movs	r3, #1
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
 8004518:	e014      	b.n	8004544 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d105      	bne.n	800453e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	b2db      	uxtb	r3, r3
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fb0a 	bl	8004b52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	3301      	adds	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	791b      	ldrb	r3, [r3, #4]
 8004548:	461a      	mov	r2, r3
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	4293      	cmp	r3, r2
 800454e:	d3e4      	bcc.n	800451a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f004 fa61 	bl	8008a1c <USB_ReadInterrupts>
 800455a:	4603      	mov	r3, r0
 800455c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004560:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004564:	d13c      	bne.n	80045e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004566:	2301      	movs	r3, #1
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
 800456a:	e02b      	b.n	80045c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	3318      	adds	r3, #24
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d115      	bne.n	80045be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004592:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004594:	2b00      	cmp	r3, #0
 8004596:	da12      	bge.n	80045be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3317      	adds	r3, #23
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 faca 	bl	8004b52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	3301      	adds	r3, #1
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	791b      	ldrb	r3, [r3, #4]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d3cd      	bcc.n	800456c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80045de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f004 fa19 	bl	8008a1c <USB_ReadInterrupts>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045f4:	d156      	bne.n	80046a4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045f6:	2301      	movs	r3, #1
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fa:	e045      	b.n	8004688 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004610:	4613      	mov	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d12e      	bne.n	8004682 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004624:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004626:	2b00      	cmp	r3, #0
 8004628:	da2b      	bge.n	8004682 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004636:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800463a:	429a      	cmp	r2, r3
 800463c:	d121      	bne.n	8004682 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800467a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800467e:	6053      	str	r3, [r2, #4]
            break;
 8004680:	e008      	b.n	8004694 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	3301      	adds	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	791b      	ldrb	r3, [r3, #4]
 800468c:	461a      	mov	r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	4293      	cmp	r3, r2
 8004692:	d3b3      	bcc.n	80045fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80046a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f004 f9b7 	bl	8008a1c <USB_ReadInterrupts>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b8:	d10a      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f008 f9ce 	bl	800ca5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 f9a1 	bl	8008a1c <USB_ReadInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d115      	bne.n	8004710 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f008 f9be 	bl	800ca78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6859      	ldr	r1, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	430a      	orrs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	e000      	b.n	8004710 <HAL_PCD_IRQHandler+0x93c>
      return;
 800470e:	bf00      	nop
    }
  }
}
 8004710:	3734      	adds	r7, #52	@ 0x34
 8004712:	46bd      	mov	sp, r7
 8004714:	bd90      	pop	{r4, r7, pc}

08004716 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	460b      	mov	r3, r1
 8004720:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_PCD_SetAddress+0x1a>
 800472c:	2302      	movs	r3, #2
 800472e:	e012      	b.n	8004756 <HAL_PCD_SetAddress+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f004 f900 	bl	800894c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	4608      	mov	r0, r1
 8004768:	4611      	mov	r1, r2
 800476a:	461a      	mov	r2, r3
 800476c:	4603      	mov	r3, r0
 800476e:	70fb      	strb	r3, [r7, #3]
 8004770:	460b      	mov	r3, r1
 8004772:	803b      	strh	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800477c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004780:	2b00      	cmp	r3, #0
 8004782:	da0f      	bge.n	80047a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	3310      	adds	r3, #16
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	705a      	strb	r2, [r3, #1]
 80047a2:	e00f      	b.n	80047c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	3304      	adds	r3, #4
 80047bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80047d0:	883b      	ldrh	r3, [r7, #0]
 80047d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	78ba      	ldrb	r2, [r7, #2]
 80047de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047f2:	78bb      	ldrb	r3, [r7, #2]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d102      	bne.n	80047fe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_PCD_EP_Open+0xae>
 8004808:	2302      	movs	r3, #2
 800480a:	e00e      	b.n	800482a <HAL_PCD_EP_Open+0xcc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	4618      	mov	r0, r3
 800481c:	f003 fa80 	bl	8007d20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004828:	7afb      	ldrb	r3, [r7, #11]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800483e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004842:	2b00      	cmp	r3, #0
 8004844:	da0f      	bge.n	8004866 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	3310      	adds	r3, #16
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	3304      	adds	r3, #4
 800485c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	705a      	strb	r2, [r3, #1]
 8004864:	e00f      	b.n	8004886 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4413      	add	r3, r2
 800487c:	3304      	adds	r3, #4
 800487e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_PCD_EP_Close+0x6e>
 800489c:	2302      	movs	r3, #2
 800489e:	e00e      	b.n	80048be <HAL_PCD_EP_Close+0x8c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68f9      	ldr	r1, [r7, #12]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 fabe 	bl	8007e30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	460b      	mov	r3, r1
 80048d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	4613      	mov	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	3304      	adds	r3, #4
 80048ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2200      	movs	r2, #0
 8004900:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2200      	movs	r2, #0
 8004906:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004908:	7afb      	ldrb	r3, [r7, #11]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	b2da      	uxtb	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	799b      	ldrb	r3, [r3, #6]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	799b      	ldrb	r3, [r3, #6]
 800492a:	461a      	mov	r2, r3
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	f003 fb5b 	bl	8007fe8 <USB_EPStartXfer>

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	460b      	mov	r3, r1
 800497a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497c:	7afb      	ldrb	r3, [r7, #11]
 800497e:	f003 020f 	and.w	r2, r3, #15
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	3310      	adds	r3, #16
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	3304      	adds	r3, #4
 8004992:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2200      	movs	r2, #0
 80049a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2201      	movs	r2, #1
 80049aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ac:	7afb      	ldrb	r3, [r7, #11]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	799b      	ldrb	r3, [r3, #6]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d102      	bne.n	80049c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	799b      	ldrb	r3, [r3, #6]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6979      	ldr	r1, [r7, #20]
 80049d2:	f003 fb09 	bl	8007fe8 <USB_EPStartXfer>

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	7912      	ldrb	r2, [r2, #4]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e04f      	b.n	8004a9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da0f      	bge.n	8004a26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	3310      	adds	r3, #16
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	705a      	strb	r2, [r3, #1]
 8004a24:	e00d      	b.n	8004a42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	3304      	adds	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_PCD_EP_SetStall+0x82>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e01d      	b.n	8004a9e <HAL_PCD_EP_SetStall+0xbe>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f003 fe97 	bl	80087a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7999      	ldrb	r1, [r3, #6]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f004 f888 	bl	8008ba4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	7912      	ldrb	r2, [r2, #4]
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e042      	b.n	8004b4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da0f      	bge.n	8004aec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	f003 020f 	and.w	r2, r3, #15
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	3310      	adds	r3, #16
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4413      	add	r3, r2
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	705a      	strb	r2, [r3, #1]
 8004aea:	e00f      	b.n	8004b0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	f003 020f 	and.w	r2, r3, #15
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	3304      	adds	r3, #4
 8004b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_PCD_EP_ClrStall+0x86>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e00e      	b.n	8004b4a <HAL_PCD_EP_ClrStall+0xa4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f003 fea0 	bl	8008880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	da0c      	bge.n	8004b80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	f003 020f 	and.w	r2, r3, #15
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	3310      	adds	r3, #16
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e00c      	b.n	8004b9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 020f 	and.w	r2, r3, #15
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f003 fcbf 	bl	8008524 <USB_EPStopXfer>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004baa:	7afb      	ldrb	r3, [r7, #11]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	@ 0x28
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	3310      	adds	r3, #16
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3304      	adds	r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d901      	bls.n	8004bec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e06b      	b.n	8004cc4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d902      	bls.n	8004c08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3303      	adds	r3, #3
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c10:	e02a      	b.n	8004c68 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d902      	bls.n	8004c2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3303      	adds	r3, #3
 8004c32:	089b      	lsrs	r3, r3, #2
 8004c34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68d9      	ldr	r1, [r3, #12]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	4603      	mov	r3, r0
 8004c4a:	6978      	ldr	r0, [r7, #20]
 8004c4c:	f003 fd14 	bl	8008678 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	441a      	add	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d809      	bhi.n	8004c92 <PCD_WriteEmptyTxFifo+0xde>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d203      	bcs.n	8004c92 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1bf      	bne.n	8004c12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d811      	bhi.n	8004cc2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	6939      	ldr	r1, [r7, #16]
 8004cba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	333c      	adds	r3, #60	@ 0x3c
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	799b      	ldrb	r3, [r3, #6]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d17b      	bne.n	8004dfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d015      	beq.n	8004d38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4a61      	ldr	r2, [pc, #388]	@ (8004e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	f240 80b9 	bls.w	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80b3 	beq.w	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d34:	6093      	str	r3, [r2, #8]
 8004d36:	e0a7      	b.n	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2320      	movs	r3, #32
 8004d52:	6093      	str	r3, [r2, #8]
 8004d54:	e098      	b.n	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 8093 	bne.w	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4a4b      	ldr	r2, [pc, #300]	@ (8004e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d90f      	bls.n	8004d8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d80:	461a      	mov	r2, r3
 8004d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d86:	6093      	str	r3, [r2, #8]
 8004d88:	e07e      	b.n	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	0159      	lsls	r1, r3, #5
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	440b      	add	r3, r1
 8004dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d114      	bne.n	8004dec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	f003 fee4 	bl	8008ba4 <USB_EP0_OutStart>
 8004ddc:	e006      	b.n	8004dec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	441a      	add	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f007 fd6e 	bl	800c8d4 <HAL_PCD_DataOutStageCallback>
 8004df8:	e046      	b.n	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4a26      	ldr	r2, [pc, #152]	@ (8004e98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d124      	bne.n	8004e4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1e:	6093      	str	r3, [r2, #8]
 8004e20:	e032      	b.n	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f007 fd45 	bl	800c8d4 <HAL_PCD_DataOutStageCallback>
 8004e4a:	e01d      	b.n	8004e88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d114      	bne.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d108      	bne.n	8004e7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e74:	461a      	mov	r2, r3
 8004e76:	2100      	movs	r1, #0
 8004e78:	f003 fe94 	bl	8008ba4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f007 fd26 	bl	800c8d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	4f54300a 	.word	0x4f54300a
 8004e98:	4f54310a 	.word	0x4f54310a

08004e9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	333c      	adds	r3, #60	@ 0x3c
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d90e      	bls.n	8004ef0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f007 fcdd 	bl	800c8b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d90c      	bls.n	8004f18 <PCD_EP_OutSetupPacket_int+0x7c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	799b      	ldrb	r3, [r3, #6]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d108      	bne.n	8004f18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f10:	461a      	mov	r2, r3
 8004f12:	2101      	movs	r1, #1
 8004f14:	f003 fe46 	bl	8008ba4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	4f54300a 	.word	0x4f54300a

08004f28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
 8004f34:	4613      	mov	r3, r2
 8004f36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f46:	883b      	ldrh	r3, [r7, #0]
 8004f48:	0419      	lsls	r1, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f54:	e028      	b.n	8004fa8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e00d      	b.n	8004f86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	3340      	adds	r3, #64	@ 0x40
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	3301      	adds	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d3ec      	bcc.n	8004f6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f90:	883b      	ldrh	r3, [r7, #0]
 8004f92:	0418      	lsls	r0, r3, #16
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6819      	ldr	r1, [r3, #0]
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	4302      	orrs	r2, r0
 8004fa0:	3340      	adds	r3, #64	@ 0x40
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e267      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d075      	beq.n	80050fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800500e:	4b88      	ldr	r3, [pc, #544]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b04      	cmp	r3, #4
 8005018:	d00c      	beq.n	8005034 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800501a:	4b85      	ldr	r3, [pc, #532]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005022:	2b08      	cmp	r3, #8
 8005024:	d112      	bne.n	800504c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005026:	4b82      	ldr	r3, [pc, #520]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005032:	d10b      	bne.n	800504c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	4b7e      	ldr	r3, [pc, #504]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05b      	beq.n	80050f8 <HAL_RCC_OscConfig+0x108>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d157      	bne.n	80050f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e242      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005054:	d106      	bne.n	8005064 <HAL_RCC_OscConfig+0x74>
 8005056:	4b76      	ldr	r3, [pc, #472]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a75      	ldr	r2, [pc, #468]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e01d      	b.n	80050a0 <HAL_RCC_OscConfig+0xb0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0x98>
 800506e:	4b70      	ldr	r3, [pc, #448]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6f      	ldr	r2, [pc, #444]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b6d      	ldr	r3, [pc, #436]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6c      	ldr	r2, [pc, #432]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0xb0>
 8005088:	4b69      	ldr	r3, [pc, #420]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a68      	ldr	r2, [pc, #416]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b66      	ldr	r3, [pc, #408]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a65      	ldr	r2, [pc, #404]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800509e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fd fcf2 	bl	8002a90 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fd fcee 	bl	8002a90 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	@ 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e207      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0xc0>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fd fcde 	bl	8002a90 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fd fcda 	bl	8002a90 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	@ 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e1f3      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	4b51      	ldr	r3, [pc, #324]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0xe8>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d063      	beq.n	80051ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005106:	4b4a      	ldr	r3, [pc, #296]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005112:	4b47      	ldr	r3, [pc, #284]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800511a:	2b08      	cmp	r3, #8
 800511c:	d11c      	bne.n	8005158 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511e:	4b44      	ldr	r3, [pc, #272]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d116      	bne.n	8005158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	4b41      	ldr	r3, [pc, #260]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_RCC_OscConfig+0x152>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e1c7      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005142:	4b3b      	ldr	r3, [pc, #236]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4937      	ldr	r1, [pc, #220]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	e03a      	b.n	80051ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005160:	4b34      	ldr	r3, [pc, #208]	@ (8005234 <HAL_RCC_OscConfig+0x244>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005166:	f7fd fc93 	bl	8002a90 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516e:	f7fd fc8f 	bl	8002a90 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e1a8      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b28      	ldr	r3, [pc, #160]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4925      	ldr	r1, [pc, #148]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	e015      	b.n	80051ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a2:	4b24      	ldr	r3, [pc, #144]	@ (8005234 <HAL_RCC_OscConfig+0x244>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd fc72 	bl	8002a90 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b0:	f7fd fc6e 	bl	8002a90 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e187      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d036      	beq.n	8005248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d016      	beq.n	8005210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e2:	4b15      	ldr	r3, [pc, #84]	@ (8005238 <HAL_RCC_OscConfig+0x248>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7fd fc52 	bl	8002a90 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fd fc4e 	bl	8002a90 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e167      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005202:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCC_OscConfig+0x240>)
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x200>
 800520e:	e01b      	b.n	8005248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005210:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <HAL_RCC_OscConfig+0x248>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005216:	f7fd fc3b 	bl	8002a90 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521c:	e00e      	b.n	800523c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521e:	f7fd fc37 	bl	8002a90 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d907      	bls.n	800523c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e150      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
 8005230:	40023800 	.word	0x40023800
 8005234:	42470000 	.word	0x42470000
 8005238:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	4b88      	ldr	r3, [pc, #544]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800523e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ea      	bne.n	800521e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8097 	beq.w	8005384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525a:	4b81      	ldr	r3, [pc, #516]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	4b7d      	ldr	r3, [pc, #500]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	4a7c      	ldr	r2, [pc, #496]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005274:	6413      	str	r3, [r2, #64]	@ 0x40
 8005276:	4b7a      	ldr	r3, [pc, #488]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005286:	4b77      	ldr	r3, [pc, #476]	@ (8005464 <HAL_RCC_OscConfig+0x474>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d118      	bne.n	80052c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005292:	4b74      	ldr	r3, [pc, #464]	@ (8005464 <HAL_RCC_OscConfig+0x474>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a73      	ldr	r2, [pc, #460]	@ (8005464 <HAL_RCC_OscConfig+0x474>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800529c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529e:	f7fd fbf7 	bl	8002a90 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7fd fbf3 	bl	8002a90 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e10c      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005464 <HAL_RCC_OscConfig+0x474>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d106      	bne.n	80052da <HAL_RCC_OscConfig+0x2ea>
 80052cc:	4b64      	ldr	r3, [pc, #400]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d0:	4a63      	ldr	r2, [pc, #396]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d8:	e01c      	b.n	8005314 <HAL_RCC_OscConfig+0x324>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d10c      	bne.n	80052fc <HAL_RCC_OscConfig+0x30c>
 80052e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80052e8:	f043 0304 	orr.w	r3, r3, #4
 80052ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_OscConfig+0x324>
 80052fc:	4b58      	ldr	r3, [pc, #352]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005300:	4a57      	ldr	r2, [pc, #348]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	6713      	str	r3, [r2, #112]	@ 0x70
 8005308:	4b55      	ldr	r3, [pc, #340]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530c:	4a54      	ldr	r2, [pc, #336]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800530e:	f023 0304 	bic.w	r3, r3, #4
 8005312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fd fbb8 	bl	8002a90 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005322:	e00a      	b.n	800533a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fd fbb4 	bl	8002a90 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e0cb      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533a:	4b49      	ldr	r3, [pc, #292]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ee      	beq.n	8005324 <HAL_RCC_OscConfig+0x334>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005348:	f7fd fba2 	bl	8002a90 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fd fb9e 	bl	8002a90 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0b5      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005366:	4b3e      	ldr	r3, [pc, #248]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ee      	bne.n	8005350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005378:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	4a38      	ldr	r2, [pc, #224]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800537e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80a1 	beq.w	80054d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800538e:	4b34      	ldr	r3, [pc, #208]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b08      	cmp	r3, #8
 8005398:	d05c      	beq.n	8005454 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d141      	bne.n	8005426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a2:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <HAL_RCC_OscConfig+0x478>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fd fb72 	bl	8002a90 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b0:	f7fd fb6e 	bl	8002a90 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e087      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	4b27      	ldr	r3, [pc, #156]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	019b      	lsls	r3, r3, #6
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	3b01      	subs	r3, #1
 80053e8:	041b      	lsls	r3, r3, #16
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	491b      	ldr	r1, [pc, #108]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005468 <HAL_RCC_OscConfig+0x478>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fe:	f7fd fb47 	bl	8002a90 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005406:	f7fd fb43 	bl	8002a90 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e05c      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005418:	4b11      	ldr	r3, [pc, #68]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x416>
 8005424:	e054      	b.n	80054d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <HAL_RCC_OscConfig+0x478>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fd fb30 	bl	8002a90 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005434:	f7fd fb2c 	bl	8002a90 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e045      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005446:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <HAL_RCC_OscConfig+0x470>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x444>
 8005452:	e03d      	b.n	80054d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e038      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
 8005460:	40023800 	.word	0x40023800
 8005464:	40007000 	.word	0x40007000
 8005468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800546c:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <HAL_RCC_OscConfig+0x4ec>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d028      	beq.n	80054cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d121      	bne.n	80054cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d11a      	bne.n	80054cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800549c:	4013      	ands	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d111      	bne.n	80054cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	3b01      	subs	r3, #1
 80054b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d107      	bne.n	80054cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40023800 	.word	0x40023800

080054e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0cc      	b.n	800568e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054f4:	4b68      	ldr	r3, [pc, #416]	@ (8005698 <HAL_RCC_ClockConfig+0x1b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d90c      	bls.n	800551c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b65      	ldr	r3, [pc, #404]	@ (8005698 <HAL_RCC_ClockConfig+0x1b8>)
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b63      	ldr	r3, [pc, #396]	@ (8005698 <HAL_RCC_ClockConfig+0x1b8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0b8      	b.n	800568e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005534:	4b59      	ldr	r3, [pc, #356]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a58      	ldr	r2, [pc, #352]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800553e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800554c:	4b53      	ldr	r3, [pc, #332]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4a52      	ldr	r2, [pc, #328]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005558:	4b50      	ldr	r3, [pc, #320]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	494d      	ldr	r1, [pc, #308]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d044      	beq.n	8005600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d107      	bne.n	800558e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557e:	4b47      	ldr	r3, [pc, #284]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d119      	bne.n	80055be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e07f      	b.n	800568e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d003      	beq.n	800559e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559a:	2b03      	cmp	r3, #3
 800559c:	d107      	bne.n	80055ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800559e:	4b3f      	ldr	r3, [pc, #252]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e06f      	b.n	800568e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ae:	4b3b      	ldr	r3, [pc, #236]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e067      	b.n	800568e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055be:	4b37      	ldr	r3, [pc, #220]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f023 0203 	bic.w	r2, r3, #3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4934      	ldr	r1, [pc, #208]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055d0:	f7fd fa5e 	bl	8002a90 <HAL_GetTick>
 80055d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d8:	f7fd fa5a 	bl	8002a90 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e04f      	b.n	800568e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ee:	4b2b      	ldr	r3, [pc, #172]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 020c 	and.w	r2, r3, #12
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d1eb      	bne.n	80055d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005600:	4b25      	ldr	r3, [pc, #148]	@ (8005698 <HAL_RCC_ClockConfig+0x1b8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d20c      	bcs.n	8005628 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b22      	ldr	r3, [pc, #136]	@ (8005698 <HAL_RCC_ClockConfig+0x1b8>)
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	4b20      	ldr	r3, [pc, #128]	@ (8005698 <HAL_RCC_ClockConfig+0x1b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e032      	b.n	800568e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005634:	4b19      	ldr	r3, [pc, #100]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4916      	ldr	r1, [pc, #88]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005652:	4b12      	ldr	r3, [pc, #72]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	490e      	ldr	r1, [pc, #56]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005666:	f000 f821 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 800566a:	4602      	mov	r2, r0
 800566c:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	490a      	ldr	r1, [pc, #40]	@ (80056a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005678:	5ccb      	ldrb	r3, [r1, r3]
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	4a09      	ldr	r2, [pc, #36]	@ (80056a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005682:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fd f9be 	bl	8002a08 <HAL_InitTick>

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023c00 	.word	0x40023c00
 800569c:	40023800 	.word	0x40023800
 80056a0:	0800e708 	.word	0x0800e708
 80056a4:	20000004 	.word	0x20000004
 80056a8:	20000008 	.word	0x20000008

080056ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b0:	b094      	sub	sp, #80	@ 0x50
 80056b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056c4:	4b79      	ldr	r3, [pc, #484]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x200>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 030c 	and.w	r3, r3, #12
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d00d      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x40>
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	f200 80e1 	bhi.w	8005898 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x34>
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d003      	beq.n	80056e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056de:	e0db      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056e0:	4b73      	ldr	r3, [pc, #460]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056e4:	e0db      	b.n	800589e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056e6:	4b73      	ldr	r3, [pc, #460]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80056e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ea:	e0d8      	b.n	800589e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056ec:	4b6f      	ldr	r3, [pc, #444]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x200>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056f6:	4b6d      	ldr	r3, [pc, #436]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x200>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d063      	beq.n	80057ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005702:	4b6a      	ldr	r3, [pc, #424]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x200>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	2200      	movs	r2, #0
 800570a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800570c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005714:	633b      	str	r3, [r7, #48]	@ 0x30
 8005716:	2300      	movs	r3, #0
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
 800571a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800571e:	4622      	mov	r2, r4
 8005720:	462b      	mov	r3, r5
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f04f 0100 	mov.w	r1, #0
 800572a:	0159      	lsls	r1, r3, #5
 800572c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005730:	0150      	lsls	r0, r2, #5
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4621      	mov	r1, r4
 8005738:	1a51      	subs	r1, r2, r1
 800573a:	6139      	str	r1, [r7, #16]
 800573c:	4629      	mov	r1, r5
 800573e:	eb63 0301 	sbc.w	r3, r3, r1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005750:	4659      	mov	r1, fp
 8005752:	018b      	lsls	r3, r1, #6
 8005754:	4651      	mov	r1, sl
 8005756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800575a:	4651      	mov	r1, sl
 800575c:	018a      	lsls	r2, r1, #6
 800575e:	4651      	mov	r1, sl
 8005760:	ebb2 0801 	subs.w	r8, r2, r1
 8005764:	4659      	mov	r1, fp
 8005766:	eb63 0901 	sbc.w	r9, r3, r1
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800577a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800577e:	4690      	mov	r8, r2
 8005780:	4699      	mov	r9, r3
 8005782:	4623      	mov	r3, r4
 8005784:	eb18 0303 	adds.w	r3, r8, r3
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	462b      	mov	r3, r5
 800578c:	eb49 0303 	adc.w	r3, r9, r3
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800579e:	4629      	mov	r1, r5
 80057a0:	024b      	lsls	r3, r1, #9
 80057a2:	4621      	mov	r1, r4
 80057a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057a8:	4621      	mov	r1, r4
 80057aa:	024a      	lsls	r2, r1, #9
 80057ac:	4610      	mov	r0, r2
 80057ae:	4619      	mov	r1, r3
 80057b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b2:	2200      	movs	r2, #0
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057bc:	f7fb f9e8 	bl	8000b90 <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4613      	mov	r3, r2
 80057c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c8:	e058      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ca:	4b38      	ldr	r3, [pc, #224]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x200>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	099b      	lsrs	r3, r3, #6
 80057d0:	2200      	movs	r2, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	4611      	mov	r1, r2
 80057d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	2300      	movs	r3, #0
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057e4:	4642      	mov	r2, r8
 80057e6:	464b      	mov	r3, r9
 80057e8:	f04f 0000 	mov.w	r0, #0
 80057ec:	f04f 0100 	mov.w	r1, #0
 80057f0:	0159      	lsls	r1, r3, #5
 80057f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f6:	0150      	lsls	r0, r2, #5
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4641      	mov	r1, r8
 80057fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005802:	4649      	mov	r1, r9
 8005804:	eb63 0b01 	sbc.w	fp, r3, r1
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800581c:	ebb2 040a 	subs.w	r4, r2, sl
 8005820:	eb63 050b 	sbc.w	r5, r3, fp
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	00eb      	lsls	r3, r5, #3
 800582e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005832:	00e2      	lsls	r2, r4, #3
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	4643      	mov	r3, r8
 800583a:	18e3      	adds	r3, r4, r3
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	464b      	mov	r3, r9
 8005840:	eb45 0303 	adc.w	r3, r5, r3
 8005844:	607b      	str	r3, [r7, #4]
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005852:	4629      	mov	r1, r5
 8005854:	028b      	lsls	r3, r1, #10
 8005856:	4621      	mov	r1, r4
 8005858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800585c:	4621      	mov	r1, r4
 800585e:	028a      	lsls	r2, r1, #10
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005866:	2200      	movs	r2, #0
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	61fa      	str	r2, [r7, #28]
 800586c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005870:	f7fb f98e 	bl	8000b90 <__aeabi_uldivmod>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4613      	mov	r3, r2
 800587a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800587c:	4b0b      	ldr	r3, [pc, #44]	@ (80058ac <HAL_RCC_GetSysClockFreq+0x200>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	3301      	adds	r3, #1
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800588c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800588e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005896:	e002      	b.n	800589e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005898:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800589a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800589c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800589e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3750      	adds	r7, #80	@ 0x50
 80058a4:	46bd      	mov	sp, r7
 80058a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800
 80058b0:	00f42400 	.word	0x00f42400
 80058b4:	007a1200 	.word	0x007a1200

080058b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058bc:	4b03      	ldr	r3, [pc, #12]	@ (80058cc <HAL_RCC_GetHCLKFreq+0x14>)
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000004 	.word	0x20000004

080058d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058d4:	f7ff fff0 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 80058d8:	4602      	mov	r2, r0
 80058da:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	0a9b      	lsrs	r3, r3, #10
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	4903      	ldr	r1, [pc, #12]	@ (80058f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e6:	5ccb      	ldrb	r3, [r1, r3]
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40023800 	.word	0x40023800
 80058f4:	0800e718 	.word	0x0800e718

080058f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058fc:	f7ff ffdc 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	0b5b      	lsrs	r3, r3, #13
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	4903      	ldr	r1, [pc, #12]	@ (800591c <HAL_RCC_GetPCLK2Freq+0x24>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40023800 	.word	0x40023800
 800591c:	0800e718 	.word	0x0800e718

08005920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07b      	b.n	8005a2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d108      	bne.n	800594c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005942:	d009      	beq.n	8005958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	61da      	str	r2, [r3, #28]
 800594a:	e005      	b.n	8005958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fc fb72 	bl	800205c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800598e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059dc:	ea42 0103 	orr.w	r1, r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	f003 0104 	and.w	r1, r3, #4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	f003 0210 	and.w	r2, r3, #16
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e041      	b.n	8005ac8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fc fd15 	bl	8002488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 fb3b 	bl	80060ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e041      	b.n	8005b66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fc8e 	bl	8002418 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 faec 	bl	80060ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <HAL_TIM_PWM_Start+0x24>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	bf14      	ite	ne
 8005b8c:	2301      	movne	r3, #1
 8005b8e:	2300      	moveq	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e022      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d109      	bne.n	8005bae <HAL_TIM_PWM_Start+0x3e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	e015      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e008      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e07c      	b.n	8005cdc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x82>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bf0:	e013      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x92>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c00:	e00b      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_PWM_Start+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c10:	e003      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fcbe 	bl	80065a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ce4 <HAL_TIM_PWM_Start+0x174>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_TIM_PWM_Start+0xcc>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <HAL_TIM_PWM_Start+0x178>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIM_PWM_Start+0xd0>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <HAL_TIM_PWM_Start+0xd2>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a22      	ldr	r2, [pc, #136]	@ (8005ce4 <HAL_TIM_PWM_Start+0x174>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c68:	d01d      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cec <HAL_TIM_PWM_Start+0x17c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d018      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf0 <HAL_TIM_PWM_Start+0x180>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf4 <HAL_TIM_PWM_Start+0x184>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a16      	ldr	r2, [pc, #88]	@ (8005ce8 <HAL_TIM_PWM_Start+0x178>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <HAL_TIM_PWM_Start+0x188>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x136>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a16      	ldr	r2, [pc, #88]	@ (8005cfc <HAL_TIM_PWM_Start+0x18c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d111      	bne.n	8005cca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b06      	cmp	r3, #6
 8005cb6:	d010      	beq.n	8005cda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc8:	e007      	b.n	8005cda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0201 	orr.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	40000c00 	.word	0x40000c00
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40001800 	.word	0x40001800

08005d00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e097      	b.n	8005e44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d106      	bne.n	8005d2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7fc f9ff 	bl	800212c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d44:	f023 0307 	bic.w	r3, r3, #7
 8005d48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f000 f9c9 	bl	80060ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	4313      	orrs	r3, r2
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005da0:	f023 030c 	bic.w	r3, r3, #12
 8005da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	011a      	lsls	r2, r3, #4
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	031b      	lsls	r3, r3, #12
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005dde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	4313      	orrs	r3, r2
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d110      	bne.n	8005e9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d102      	bne.n	8005e88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e82:	7b7b      	ldrb	r3, [r7, #13]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d001      	beq.n	8005e8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e069      	b.n	8005f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e9c:	e031      	b.n	8005f02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d110      	bne.n	8005ec6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d102      	bne.n	8005eb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eaa:	7b3b      	ldrb	r3, [r7, #12]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d001      	beq.n	8005eb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e055      	b.n	8005f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ec4:	e01d      	b.n	8005f02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d108      	bne.n	8005ede <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ed2:	7b7b      	ldrb	r3, [r7, #13]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d102      	bne.n	8005ede <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ed8:	7b3b      	ldrb	r3, [r7, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e03e      	b.n	8005f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_TIM_Encoder_Start+0xc4>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d008      	beq.n	8005f20 <HAL_TIM_Encoder_Start+0xd4>
 8005f0e:	e00f      	b.n	8005f30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2201      	movs	r2, #1
 8005f16:	2100      	movs	r1, #0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fb43 	bl	80065a4 <TIM_CCxChannelCmd>
      break;
 8005f1e:	e016      	b.n	8005f4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	2104      	movs	r1, #4
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fb3b 	bl	80065a4 <TIM_CCxChannelCmd>
      break;
 8005f2e:	e00e      	b.n	8005f4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2201      	movs	r2, #1
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fb33 	bl	80065a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2201      	movs	r2, #1
 8005f44:	2104      	movs	r1, #4
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fb2c 	bl	80065a4 <TIM_CCxChannelCmd>
      break;
 8005f4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e0ae      	b.n	80060e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	f200 809f 	bhi.w	80060d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f96:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fd1 	.word	0x08005fd1
 8005fa0:	080060d5 	.word	0x080060d5
 8005fa4:	080060d5 	.word	0x080060d5
 8005fa8:	080060d5 	.word	0x080060d5
 8005fac:	08006011 	.word	0x08006011
 8005fb0:	080060d5 	.word	0x080060d5
 8005fb4:	080060d5 	.word	0x080060d5
 8005fb8:	080060d5 	.word	0x080060d5
 8005fbc:	08006053 	.word	0x08006053
 8005fc0:	080060d5 	.word	0x080060d5
 8005fc4:	080060d5 	.word	0x080060d5
 8005fc8:	080060d5 	.word	0x080060d5
 8005fcc:	08006093 	.word	0x08006093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f934 	bl	8006244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0208 	orr.w	r2, r2, #8
 8005fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0204 	bic.w	r2, r2, #4
 8005ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6999      	ldr	r1, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	619a      	str	r2, [r3, #24]
      break;
 800600e:	e064      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f984 	bl	8006324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800602a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6999      	ldr	r1, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	619a      	str	r2, [r3, #24]
      break;
 8006050:	e043      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f9d9 	bl	8006410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0204 	bic.w	r2, r2, #4
 800607c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
      break;
 8006090:	e023      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fa2d 	bl	80064f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69d9      	ldr	r1, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	021a      	lsls	r2, r3, #8
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	61da      	str	r2, [r3, #28]
      break;
 80060d2:	e002      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
      break;
 80060d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a46      	ldr	r2, [pc, #280]	@ (8006218 <TIM_Base_SetConfig+0x12c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610a:	d00f      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a43      	ldr	r2, [pc, #268]	@ (800621c <TIM_Base_SetConfig+0x130>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a42      	ldr	r2, [pc, #264]	@ (8006220 <TIM_Base_SetConfig+0x134>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a41      	ldr	r2, [pc, #260]	@ (8006224 <TIM_Base_SetConfig+0x138>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a40      	ldr	r2, [pc, #256]	@ (8006228 <TIM_Base_SetConfig+0x13c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a35      	ldr	r2, [pc, #212]	@ (8006218 <TIM_Base_SetConfig+0x12c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800614c:	d027      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a32      	ldr	r2, [pc, #200]	@ (800621c <TIM_Base_SetConfig+0x130>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d023      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a31      	ldr	r2, [pc, #196]	@ (8006220 <TIM_Base_SetConfig+0x134>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a30      	ldr	r2, [pc, #192]	@ (8006224 <TIM_Base_SetConfig+0x138>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2f      	ldr	r2, [pc, #188]	@ (8006228 <TIM_Base_SetConfig+0x13c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d017      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2e      	ldr	r2, [pc, #184]	@ (800622c <TIM_Base_SetConfig+0x140>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2d      	ldr	r2, [pc, #180]	@ (8006230 <TIM_Base_SetConfig+0x144>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2c      	ldr	r2, [pc, #176]	@ (8006234 <TIM_Base_SetConfig+0x148>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2b      	ldr	r2, [pc, #172]	@ (8006238 <TIM_Base_SetConfig+0x14c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d007      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a2a      	ldr	r2, [pc, #168]	@ (800623c <TIM_Base_SetConfig+0x150>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a29      	ldr	r2, [pc, #164]	@ (8006240 <TIM_Base_SetConfig+0x154>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d108      	bne.n	80061b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a10      	ldr	r2, [pc, #64]	@ (8006218 <TIM_Base_SetConfig+0x12c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_Base_SetConfig+0xf8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a12      	ldr	r2, [pc, #72]	@ (8006228 <TIM_Base_SetConfig+0x13c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d103      	bne.n	80061ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	611a      	str	r2, [r3, #16]
  }
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40010000 	.word	0x40010000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40010400 	.word	0x40010400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800
 8006238:	40001800 	.word	0x40001800
 800623c:	40001c00 	.word	0x40001c00
 8006240:	40002000 	.word	0x40002000

08006244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 0201 	bic.w	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0302 	bic.w	r3, r3, #2
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a20      	ldr	r2, [pc, #128]	@ (800631c <TIM_OC1_SetConfig+0xd8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC1_SetConfig+0x64>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006320 <TIM_OC1_SetConfig+0xdc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10c      	bne.n	80062c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0308 	bic.w	r3, r3, #8
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a15      	ldr	r2, [pc, #84]	@ (800631c <TIM_OC1_SetConfig+0xd8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d003      	beq.n	80062d2 <TIM_OC1_SetConfig+0x8e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a14      	ldr	r2, [pc, #80]	@ (8006320 <TIM_OC1_SetConfig+0xdc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d111      	bne.n	80062f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400

08006324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f023 0210 	bic.w	r2, r3, #16
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0320 	bic.w	r3, r3, #32
 800636e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a22      	ldr	r2, [pc, #136]	@ (8006408 <TIM_OC2_SetConfig+0xe4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC2_SetConfig+0x68>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a21      	ldr	r2, [pc, #132]	@ (800640c <TIM_OC2_SetConfig+0xe8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d10d      	bne.n	80063a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a17      	ldr	r2, [pc, #92]	@ (8006408 <TIM_OC2_SetConfig+0xe4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_OC2_SetConfig+0x94>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a16      	ldr	r2, [pc, #88]	@ (800640c <TIM_OC2_SetConfig+0xe8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d113      	bne.n	80063e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40010000 	.word	0x40010000
 800640c:	40010400 	.word	0x40010400

08006410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a21      	ldr	r2, [pc, #132]	@ (80064f0 <TIM_OC3_SetConfig+0xe0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_OC3_SetConfig+0x66>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a20      	ldr	r2, [pc, #128]	@ (80064f4 <TIM_OC3_SetConfig+0xe4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10d      	bne.n	8006492 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800647c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a16      	ldr	r2, [pc, #88]	@ (80064f0 <TIM_OC3_SetConfig+0xe0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <TIM_OC3_SetConfig+0x92>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a15      	ldr	r2, [pc, #84]	@ (80064f4 <TIM_OC3_SetConfig+0xe4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d113      	bne.n	80064ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40010400 	.word	0x40010400

080064f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800652e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	031b      	lsls	r3, r3, #12
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a12      	ldr	r2, [pc, #72]	@ (800659c <TIM_OC4_SetConfig+0xa4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC4_SetConfig+0x68>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a11      	ldr	r2, [pc, #68]	@ (80065a0 <TIM_OC4_SetConfig+0xa8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d109      	bne.n	8006574 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	019b      	lsls	r3, r3, #6
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40010400 	.word	0x40010400

080065a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2201      	movs	r2, #1
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	401a      	ands	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006604:	2302      	movs	r3, #2
 8006606:	e05a      	b.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a21      	ldr	r2, [pc, #132]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006654:	d01d      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1d      	ldr	r2, [pc, #116]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1b      	ldr	r2, [pc, #108]	@ (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1a      	ldr	r2, [pc, #104]	@ (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a15      	ldr	r2, [pc, #84]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10c      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40001800 	.word	0x40001800

080066e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e042      	b.n	8006780 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fc f81c 	bl	800274c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2224      	movs	r2, #36	@ 0x24
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800672a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fd0d 	bl	800714c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695a      	ldr	r2, [r3, #20]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e024      	b.n	80067e4 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	@ 0x24
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067b0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fc f850 	bl	8002858 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b20      	cmp	r3, #32
 8006804:	d112      	bne.n	800682c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HAL_UART_Receive_IT+0x26>
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e00b      	b.n	800682e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	461a      	mov	r2, r3
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 faba 	bl	8006d9c <UART_Start_Receive_IT>
 8006828:	4603      	mov	r3, r0
 800682a:	e000      	b.n	800682e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800682c:	2302      	movs	r3, #2
  }
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b0ba      	sub	sp, #232	@ 0xe8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800685e:	2300      	movs	r3, #0
 8006860:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006864:	2300      	movs	r3, #0
 8006866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10f      	bne.n	800689e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_UART_IRQHandler+0x66>
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fb99 	bl	8006fce <UART_Receive_IT>
      return;
 800689c:	e25b      	b.n	8006d56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800689e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80de 	beq.w	8006a64 <HAL_UART_IRQHandler+0x22c>
 80068a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80d1 	beq.w	8006a64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_UART_IRQHandler+0xae>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	f043 0201 	orr.w	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_UART_IRQHandler+0xd2>
 80068f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f043 0202 	orr.w	r2, r3, #2
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_UART_IRQHandler+0xf6>
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	f043 0204 	orr.w	r2, r3, #4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d011      	beq.n	800695e <HAL_UART_IRQHandler+0x126>
 800693a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d105      	bne.n	8006952 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006956:	f043 0208 	orr.w	r2, r3, #8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 81f2 	beq.w	8006d4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_UART_IRQHandler+0x14e>
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fb24 	bl	8006fce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b40      	cmp	r3, #64	@ 0x40
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <HAL_UART_IRQHandler+0x17a>
 80069aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04f      	beq.n	8006a52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa2c 	bl	8006e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c2:	2b40      	cmp	r3, #64	@ 0x40
 80069c4:	d141      	bne.n	8006a4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3314      	adds	r3, #20
 80069cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1d9      	bne.n	80069c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c18 <HAL_UART_IRQHandler+0x3e0>)
 8006a20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fc fc77 	bl	800331a <HAL_DMA_Abort_IT>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d016      	beq.n	8006a60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	e00e      	b.n	8006a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f994 	bl	8006d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	e00a      	b.n	8006a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f990 	bl	8006d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e006      	b.n	8006a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f98c 	bl	8006d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a5e:	e175      	b.n	8006d4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	bf00      	nop
    return;
 8006a62:	e173      	b.n	8006d4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f040 814f 	bne.w	8006d0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8148 	beq.w	8006d0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8141 	beq.w	8006d0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aaa:	2b40      	cmp	r3, #64	@ 0x40
 8006aac:	f040 80b6 	bne.w	8006c1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006abc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8145 	beq.w	8006d50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f080 813e 	bcs.w	8006d50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ada:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae6:	f000 8088 	beq.w	8006bfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1d9      	bne.n	8006aea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e1      	bne.n	8006b36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e3      	bne.n	8006b72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006be2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e3      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fc fb20 	bl	800323a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8b7 	bl	8006d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c16:	e09b      	b.n	8006d50 <HAL_UART_IRQHandler+0x518>
 8006c18:	08006ed7 	.word	0x08006ed7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 808e 	beq.w	8006d54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8089 	beq.w	8006d54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e3      	bne.n	8006c7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0310 	bic.w	r3, r3, #16
 8006cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ce4:	61fa      	str	r2, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f83d 	bl	8006d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d0a:	e023      	b.n	8006d54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <HAL_UART_IRQHandler+0x4f4>
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8ea 	bl	8006efe <UART_Transmit_IT>
    return;
 8006d2a:	e014      	b.n	8006d56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <HAL_UART_IRQHandler+0x51e>
 8006d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f92a 	bl	8006f9e <UART_EndTransmit_IT>
    return;
 8006d4a:	e004      	b.n	8006d56 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d4c:	bf00      	nop
 8006d4e:	e002      	b.n	8006d56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d50:	bf00      	nop
 8006d52:	e000      	b.n	8006d56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d54:	bf00      	nop
  }
}
 8006d56:	37e8      	adds	r7, #232	@ 0xe8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	88fa      	ldrh	r2, [r7, #6]
 8006db4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	88fa      	ldrh	r2, [r7, #6]
 8006dba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2222      	movs	r2, #34	@ 0x22
 8006dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006de0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695a      	ldr	r2, [r3, #20]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0201 	orr.w	r2, r2, #1
 8006df0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0220 	orr.w	r2, r2, #32
 8006e00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b095      	sub	sp, #84	@ 0x54
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e38:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d119      	bne.n	8006ebc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0310 	bic.w	r3, r3, #16
 8006e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea8:	61ba      	str	r2, [r7, #24]
 8006eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6979      	ldr	r1, [r7, #20]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e5      	bne.n	8006e88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006eca:	bf00      	nop
 8006ecc:	3754      	adds	r7, #84	@ 0x54
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7ff ff3d 	bl	8006d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b085      	sub	sp, #20
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b21      	cmp	r3, #33	@ 0x21
 8006f10:	d13e      	bne.n	8006f90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f1a:	d114      	bne.n	8006f46 <UART_Transmit_IT+0x48>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d110      	bne.n	8006f46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	1c9a      	adds	r2, r3, #2
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	621a      	str	r2, [r3, #32]
 8006f44:	e008      	b.n	8006f58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	1c59      	adds	r1, r3, #1
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6211      	str	r1, [r2, #32]
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4619      	mov	r1, r3
 8006f66:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10f      	bne.n	8006f8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff fecc 	bl	8006d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b08c      	sub	sp, #48	@ 0x30
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b22      	cmp	r3, #34	@ 0x22
 8006fe0:	f040 80ae 	bne.w	8007140 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fec:	d117      	bne.n	800701e <UART_Receive_IT+0x50>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d113      	bne.n	800701e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	b29a      	uxth	r2, r3
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	629a      	str	r2, [r3, #40]	@ 0x28
 800701c:	e026      	b.n	800706c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007030:	d007      	beq.n	8007042 <UART_Receive_IT+0x74>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <UART_Receive_IT+0x82>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	e008      	b.n	8007062 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29b      	uxth	r3, r3
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4619      	mov	r1, r3
 800707a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800707c:	2b00      	cmp	r3, #0
 800707e:	d15d      	bne.n	800713c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0220 	bic.w	r2, r2, #32
 800708e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800709e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d135      	bne.n	8007132 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	613b      	str	r3, [r7, #16]
   return(result);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f023 0310 	bic.w	r3, r3, #16
 80070e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ec:	623a      	str	r2, [r7, #32]
 80070ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69f9      	ldr	r1, [r7, #28]
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	2b10      	cmp	r3, #16
 800710c:	d10a      	bne.n	8007124 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fe2a 	bl	8006d84 <HAL_UARTEx_RxEventCallback>
 8007130:	e002      	b.n	8007138 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fa fe96 	bl	8001e64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e002      	b.n	8007142 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	3730      	adds	r7, #48	@ 0x30
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800714c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007150:	b0c0      	sub	sp, #256	@ 0x100
 8007152:	af00      	add	r7, sp, #0
 8007154:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007168:	68d9      	ldr	r1, [r3, #12]
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	ea40 0301 	orr.w	r3, r0, r1
 8007174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	431a      	orrs	r2, r3
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	431a      	orrs	r2, r3
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071a4:	f021 010c 	bic.w	r1, r1, #12
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071b2:	430b      	orrs	r3, r1
 80071b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c6:	6999      	ldr	r1, [r3, #24]
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	ea40 0301 	orr.w	r3, r0, r1
 80071d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b8f      	ldr	r3, [pc, #572]	@ (8007418 <UART_SetConfig+0x2cc>)
 80071dc:	429a      	cmp	r2, r3
 80071de:	d005      	beq.n	80071ec <UART_SetConfig+0xa0>
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b8d      	ldr	r3, [pc, #564]	@ (800741c <UART_SetConfig+0x2d0>)
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d104      	bne.n	80071f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071ec:	f7fe fb84 	bl	80058f8 <HAL_RCC_GetPCLK2Freq>
 80071f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071f4:	e003      	b.n	80071fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071f6:	f7fe fb6b 	bl	80058d0 <HAL_RCC_GetPCLK1Freq>
 80071fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007208:	f040 810c 	bne.w	8007424 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800720c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007210:	2200      	movs	r2, #0
 8007212:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007216:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800721a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800721e:	4622      	mov	r2, r4
 8007220:	462b      	mov	r3, r5
 8007222:	1891      	adds	r1, r2, r2
 8007224:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007226:	415b      	adcs	r3, r3
 8007228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800722a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800722e:	4621      	mov	r1, r4
 8007230:	eb12 0801 	adds.w	r8, r2, r1
 8007234:	4629      	mov	r1, r5
 8007236:	eb43 0901 	adc.w	r9, r3, r1
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800724a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800724e:	4690      	mov	r8, r2
 8007250:	4699      	mov	r9, r3
 8007252:	4623      	mov	r3, r4
 8007254:	eb18 0303 	adds.w	r3, r8, r3
 8007258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800725c:	462b      	mov	r3, r5
 800725e:	eb49 0303 	adc.w	r3, r9, r3
 8007262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007272:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800727a:	460b      	mov	r3, r1
 800727c:	18db      	adds	r3, r3, r3
 800727e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007280:	4613      	mov	r3, r2
 8007282:	eb42 0303 	adc.w	r3, r2, r3
 8007286:	657b      	str	r3, [r7, #84]	@ 0x54
 8007288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800728c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007290:	f7f9 fc7e 	bl	8000b90 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4b61      	ldr	r3, [pc, #388]	@ (8007420 <UART_SetConfig+0x2d4>)
 800729a:	fba3 2302 	umull	r2, r3, r3, r2
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	011c      	lsls	r4, r3, #4
 80072a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	1891      	adds	r1, r2, r2
 80072ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072bc:	415b      	adcs	r3, r3
 80072be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072c4:	4641      	mov	r1, r8
 80072c6:	eb12 0a01 	adds.w	sl, r2, r1
 80072ca:	4649      	mov	r1, r9
 80072cc:	eb43 0b01 	adc.w	fp, r3, r1
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e4:	4692      	mov	sl, r2
 80072e6:	469b      	mov	fp, r3
 80072e8:	4643      	mov	r3, r8
 80072ea:	eb1a 0303 	adds.w	r3, sl, r3
 80072ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072f2:	464b      	mov	r3, r9
 80072f4:	eb4b 0303 	adc.w	r3, fp, r3
 80072f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007308:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800730c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007310:	460b      	mov	r3, r1
 8007312:	18db      	adds	r3, r3, r3
 8007314:	643b      	str	r3, [r7, #64]	@ 0x40
 8007316:	4613      	mov	r3, r2
 8007318:	eb42 0303 	adc.w	r3, r2, r3
 800731c:	647b      	str	r3, [r7, #68]	@ 0x44
 800731e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007326:	f7f9 fc33 	bl	8000b90 <__aeabi_uldivmod>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4611      	mov	r1, r2
 8007330:	4b3b      	ldr	r3, [pc, #236]	@ (8007420 <UART_SetConfig+0x2d4>)
 8007332:	fba3 2301 	umull	r2, r3, r3, r1
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	2264      	movs	r2, #100	@ 0x64
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	1acb      	subs	r3, r1, r3
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007346:	4b36      	ldr	r3, [pc, #216]	@ (8007420 <UART_SetConfig+0x2d4>)
 8007348:	fba3 2302 	umull	r2, r3, r3, r2
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007354:	441c      	add	r4, r3
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007360:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	1891      	adds	r1, r2, r2
 800736e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007370:	415b      	adcs	r3, r3
 8007372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007378:	4641      	mov	r1, r8
 800737a:	1851      	adds	r1, r2, r1
 800737c:	6339      	str	r1, [r7, #48]	@ 0x30
 800737e:	4649      	mov	r1, r9
 8007380:	414b      	adcs	r3, r1
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007390:	4659      	mov	r1, fp
 8007392:	00cb      	lsls	r3, r1, #3
 8007394:	4651      	mov	r1, sl
 8007396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739a:	4651      	mov	r1, sl
 800739c:	00ca      	lsls	r2, r1, #3
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	4642      	mov	r2, r8
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073ac:	464b      	mov	r3, r9
 80073ae:	460a      	mov	r2, r1
 80073b0:	eb42 0303 	adc.w	r3, r2, r3
 80073b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073cc:	460b      	mov	r3, r1
 80073ce:	18db      	adds	r3, r3, r3
 80073d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073d2:	4613      	mov	r3, r2
 80073d4:	eb42 0303 	adc.w	r3, r2, r3
 80073d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073e2:	f7f9 fbd5 	bl	8000b90 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <UART_SetConfig+0x2d4>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	@ 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	3332      	adds	r3, #50	@ 0x32
 80073fe:	4a08      	ldr	r2, [pc, #32]	@ (8007420 <UART_SetConfig+0x2d4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 0207 	and.w	r2, r3, #7
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4422      	add	r2, r4
 8007412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007414:	e106      	b.n	8007624 <UART_SetConfig+0x4d8>
 8007416:	bf00      	nop
 8007418:	40011000 	.word	0x40011000
 800741c:	40011400 	.word	0x40011400
 8007420:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007428:	2200      	movs	r2, #0
 800742a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800742e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007432:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007436:	4642      	mov	r2, r8
 8007438:	464b      	mov	r3, r9
 800743a:	1891      	adds	r1, r2, r2
 800743c:	6239      	str	r1, [r7, #32]
 800743e:	415b      	adcs	r3, r3
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24
 8007442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007446:	4641      	mov	r1, r8
 8007448:	1854      	adds	r4, r2, r1
 800744a:	4649      	mov	r1, r9
 800744c:	eb43 0501 	adc.w	r5, r3, r1
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	00eb      	lsls	r3, r5, #3
 800745a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800745e:	00e2      	lsls	r2, r4, #3
 8007460:	4614      	mov	r4, r2
 8007462:	461d      	mov	r5, r3
 8007464:	4643      	mov	r3, r8
 8007466:	18e3      	adds	r3, r4, r3
 8007468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800746c:	464b      	mov	r3, r9
 800746e:	eb45 0303 	adc.w	r3, r5, r3
 8007472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007482:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007492:	4629      	mov	r1, r5
 8007494:	008b      	lsls	r3, r1, #2
 8007496:	4621      	mov	r1, r4
 8007498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800749c:	4621      	mov	r1, r4
 800749e:	008a      	lsls	r2, r1, #2
 80074a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074a4:	f7f9 fb74 	bl	8000b90 <__aeabi_uldivmod>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4b60      	ldr	r3, [pc, #384]	@ (8007630 <UART_SetConfig+0x4e4>)
 80074ae:	fba3 2302 	umull	r2, r3, r3, r2
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	011c      	lsls	r4, r3, #4
 80074b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	1891      	adds	r1, r2, r2
 80074ce:	61b9      	str	r1, [r7, #24]
 80074d0:	415b      	adcs	r3, r3
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d8:	4641      	mov	r1, r8
 80074da:	1851      	adds	r1, r2, r1
 80074dc:	6139      	str	r1, [r7, #16]
 80074de:	4649      	mov	r1, r9
 80074e0:	414b      	adcs	r3, r1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074f0:	4659      	mov	r1, fp
 80074f2:	00cb      	lsls	r3, r1, #3
 80074f4:	4651      	mov	r1, sl
 80074f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fa:	4651      	mov	r1, sl
 80074fc:	00ca      	lsls	r2, r1, #3
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	4603      	mov	r3, r0
 8007504:	4642      	mov	r2, r8
 8007506:	189b      	adds	r3, r3, r2
 8007508:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800750c:	464b      	mov	r3, r9
 800750e:	460a      	mov	r2, r1
 8007510:	eb42 0303 	adc.w	r3, r2, r3
 8007514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007522:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007530:	4649      	mov	r1, r9
 8007532:	008b      	lsls	r3, r1, #2
 8007534:	4641      	mov	r1, r8
 8007536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800753a:	4641      	mov	r1, r8
 800753c:	008a      	lsls	r2, r1, #2
 800753e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007542:	f7f9 fb25 	bl	8000b90 <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4611      	mov	r1, r2
 800754c:	4b38      	ldr	r3, [pc, #224]	@ (8007630 <UART_SetConfig+0x4e4>)
 800754e:	fba3 2301 	umull	r2, r3, r3, r1
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	2264      	movs	r2, #100	@ 0x64
 8007556:	fb02 f303 	mul.w	r3, r2, r3
 800755a:	1acb      	subs	r3, r1, r3
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	3332      	adds	r3, #50	@ 0x32
 8007560:	4a33      	ldr	r2, [pc, #204]	@ (8007630 <UART_SetConfig+0x4e4>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800756c:	441c      	add	r4, r3
 800756e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007572:	2200      	movs	r2, #0
 8007574:	673b      	str	r3, [r7, #112]	@ 0x70
 8007576:	677a      	str	r2, [r7, #116]	@ 0x74
 8007578:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800757c:	4642      	mov	r2, r8
 800757e:	464b      	mov	r3, r9
 8007580:	1891      	adds	r1, r2, r2
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	415b      	adcs	r3, r3
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800758c:	4641      	mov	r1, r8
 800758e:	1851      	adds	r1, r2, r1
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	4649      	mov	r1, r9
 8007594:	414b      	adcs	r3, r1
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075a4:	4659      	mov	r1, fp
 80075a6:	00cb      	lsls	r3, r1, #3
 80075a8:	4651      	mov	r1, sl
 80075aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ae:	4651      	mov	r1, sl
 80075b0:	00ca      	lsls	r2, r1, #3
 80075b2:	4610      	mov	r0, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	4642      	mov	r2, r8
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075be:	464b      	mov	r3, r9
 80075c0:	460a      	mov	r2, r1
 80075c2:	eb42 0303 	adc.w	r3, r2, r3
 80075c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80075d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075e0:	4649      	mov	r1, r9
 80075e2:	008b      	lsls	r3, r1, #2
 80075e4:	4641      	mov	r1, r8
 80075e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ea:	4641      	mov	r1, r8
 80075ec:	008a      	lsls	r2, r1, #2
 80075ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075f2:	f7f9 facd 	bl	8000b90 <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <UART_SetConfig+0x4e4>)
 80075fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	2164      	movs	r1, #100	@ 0x64
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	3332      	adds	r3, #50	@ 0x32
 800760e:	4a08      	ldr	r2, [pc, #32]	@ (8007630 <UART_SetConfig+0x4e4>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4422      	add	r2, r4
 8007622:	609a      	str	r2, [r3, #8]
}
 8007624:	bf00      	nop
 8007626:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800762a:	46bd      	mov	sp, r7
 800762c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007630:	51eb851f 	.word	0x51eb851f

08007634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007634:	b084      	sub	sp, #16
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	f107 001c 	add.w	r0, r7, #28
 8007642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007646:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800764a:	2b01      	cmp	r3, #1
 800764c:	d123      	bne.n	8007696 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007676:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800767a:	2b01      	cmp	r3, #1
 800767c:	d105      	bne.n	800768a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fae8 	bl	8008c60 <USB_CoreReset>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e01b      	b.n	80076ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fadc 	bl	8008c60 <USB_CoreReset>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38
 80076c0:	e005      	b.n	80076ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076ce:	7fbb      	ldrb	r3, [r7, #30]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10b      	bne.n	80076ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f043 0206 	orr.w	r2, r3, #6
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f8:	b004      	add	sp, #16
 80076fa:	4770      	bx	lr

080076fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800770a:	79fb      	ldrb	r3, [r7, #7]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d165      	bne.n	80077dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4a41      	ldr	r2, [pc, #260]	@ (8007818 <USB_SetTurnaroundTime+0x11c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d906      	bls.n	8007726 <USB_SetTurnaroundTime+0x2a>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4a40      	ldr	r2, [pc, #256]	@ (800781c <USB_SetTurnaroundTime+0x120>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d202      	bcs.n	8007726 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007720:	230f      	movs	r3, #15
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	e062      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4a3c      	ldr	r2, [pc, #240]	@ (800781c <USB_SetTurnaroundTime+0x120>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d306      	bcc.n	800773c <USB_SetTurnaroundTime+0x40>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4a3b      	ldr	r2, [pc, #236]	@ (8007820 <USB_SetTurnaroundTime+0x124>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d202      	bcs.n	800773c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007736:	230e      	movs	r3, #14
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	e057      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4a38      	ldr	r2, [pc, #224]	@ (8007820 <USB_SetTurnaroundTime+0x124>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d306      	bcc.n	8007752 <USB_SetTurnaroundTime+0x56>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4a37      	ldr	r2, [pc, #220]	@ (8007824 <USB_SetTurnaroundTime+0x128>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d202      	bcs.n	8007752 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800774c:	230d      	movs	r3, #13
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	e04c      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4a33      	ldr	r2, [pc, #204]	@ (8007824 <USB_SetTurnaroundTime+0x128>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d306      	bcc.n	8007768 <USB_SetTurnaroundTime+0x6c>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a32      	ldr	r2, [pc, #200]	@ (8007828 <USB_SetTurnaroundTime+0x12c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d802      	bhi.n	8007768 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007762:	230c      	movs	r3, #12
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	e041      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a2f      	ldr	r2, [pc, #188]	@ (8007828 <USB_SetTurnaroundTime+0x12c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d906      	bls.n	800777e <USB_SetTurnaroundTime+0x82>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4a2e      	ldr	r2, [pc, #184]	@ (800782c <USB_SetTurnaroundTime+0x130>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d802      	bhi.n	800777e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007778:	230b      	movs	r3, #11
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e036      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a2a      	ldr	r2, [pc, #168]	@ (800782c <USB_SetTurnaroundTime+0x130>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d906      	bls.n	8007794 <USB_SetTurnaroundTime+0x98>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4a29      	ldr	r2, [pc, #164]	@ (8007830 <USB_SetTurnaroundTime+0x134>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d802      	bhi.n	8007794 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800778e:	230a      	movs	r3, #10
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e02b      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a26      	ldr	r2, [pc, #152]	@ (8007830 <USB_SetTurnaroundTime+0x134>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d906      	bls.n	80077aa <USB_SetTurnaroundTime+0xae>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4a25      	ldr	r2, [pc, #148]	@ (8007834 <USB_SetTurnaroundTime+0x138>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d202      	bcs.n	80077aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077a4:	2309      	movs	r3, #9
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e020      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a21      	ldr	r2, [pc, #132]	@ (8007834 <USB_SetTurnaroundTime+0x138>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d306      	bcc.n	80077c0 <USB_SetTurnaroundTime+0xc4>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4a20      	ldr	r2, [pc, #128]	@ (8007838 <USB_SetTurnaroundTime+0x13c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d802      	bhi.n	80077c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077ba:	2308      	movs	r3, #8
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	e015      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a1d      	ldr	r2, [pc, #116]	@ (8007838 <USB_SetTurnaroundTime+0x13c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d906      	bls.n	80077d6 <USB_SetTurnaroundTime+0xda>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4a1c      	ldr	r2, [pc, #112]	@ (800783c <USB_SetTurnaroundTime+0x140>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d202      	bcs.n	80077d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077d0:	2307      	movs	r3, #7
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	e00a      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077d6:	2306      	movs	r3, #6
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	e007      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077e2:	2309      	movs	r3, #9
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	e001      	b.n	80077ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077e8:	2309      	movs	r3, #9
 80077ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	029b      	lsls	r3, r3, #10
 8007800:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007804:	431a      	orrs	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	00d8acbf 	.word	0x00d8acbf
 800781c:	00e4e1c0 	.word	0x00e4e1c0
 8007820:	00f42400 	.word	0x00f42400
 8007824:	01067380 	.word	0x01067380
 8007828:	011a499f 	.word	0x011a499f
 800782c:	01312cff 	.word	0x01312cff
 8007830:	014ca43f 	.word	0x014ca43f
 8007834:	016e3600 	.word	0x016e3600
 8007838:	01a6ab1f 	.word	0x01a6ab1f
 800783c:	01e84800 	.word	0x01e84800

08007840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f043 0201 	orr.w	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d115      	bne.n	80078d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078b2:	200a      	movs	r0, #10
 80078b4:	f7fb f8f8 	bl	8002aa8 <HAL_Delay>
      ms += 10U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	330a      	adds	r3, #10
 80078bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 f93f 	bl	8008b42 <USB_GetMode>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d01e      	beq.n	8007908 <USB_SetCurrentMode+0x84>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80078ce:	d9f0      	bls.n	80078b2 <USB_SetCurrentMode+0x2e>
 80078d0:	e01a      	b.n	8007908 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d115      	bne.n	8007904 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078e4:	200a      	movs	r0, #10
 80078e6:	f7fb f8df 	bl	8002aa8 <HAL_Delay>
      ms += 10U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	330a      	adds	r3, #10
 80078ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 f926 	bl	8008b42 <USB_GetMode>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <USB_SetCurrentMode+0x84>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007900:	d9f0      	bls.n	80078e4 <USB_SetCurrentMode+0x60>
 8007902:	e001      	b.n	8007908 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e005      	b.n	8007914 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2bc8      	cmp	r3, #200	@ 0xc8
 800790c:	d101      	bne.n	8007912 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800791c:	b084      	sub	sp, #16
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800792a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007936:	2300      	movs	r3, #0
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	e009      	b.n	8007950 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	3340      	adds	r3, #64	@ 0x40
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	2200      	movs	r2, #0
 8007948:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	3301      	adds	r3, #1
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2b0e      	cmp	r3, #14
 8007954:	d9f2      	bls.n	800793c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007956:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800795a:	2b00      	cmp	r3, #0
 800795c:	d11c      	bne.n	8007998 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800796c:	f043 0302 	orr.w	r3, r3, #2
 8007970:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007982:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	639a      	str	r2, [r3, #56]	@ 0x38
 8007996:	e00b      	b.n	80079b0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079b6:	461a      	mov	r2, r3
 80079b8:	2300      	movs	r3, #0
 80079ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d10d      	bne.n	80079e0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d104      	bne.n	80079d6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079cc:	2100      	movs	r1, #0
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f968 	bl	8007ca4 <USB_SetDevSpeed>
 80079d4:	e008      	b.n	80079e8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079d6:	2101      	movs	r1, #1
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f963 	bl	8007ca4 <USB_SetDevSpeed>
 80079de:	e003      	b.n	80079e8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079e0:	2103      	movs	r1, #3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f95e 	bl	8007ca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079e8:	2110      	movs	r1, #16
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f8fa 	bl	8007be4 <USB_FlushTxFifo>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f924 	bl	8007c48 <USB_FlushRxFifo>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a10:	461a      	mov	r2, r3
 8007a12:	2300      	movs	r3, #0
 8007a14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	e043      	b.n	8007abc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a4a:	d118      	bne.n	8007a7e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	e013      	b.n	8007a90 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a74:	461a      	mov	r2, r3
 8007a76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e008      	b.n	8007a90 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ab4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d3b5      	bcc.n	8007a34 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	e043      	b.n	8007b56 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ae4:	d118      	bne.n	8007b18 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af8:	461a      	mov	r2, r3
 8007afa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	e013      	b.n	8007b2a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	e008      	b.n	8007b2a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b24:	461a      	mov	r2, r3
 8007b26:	2300      	movs	r3, #0
 8007b28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b36:	461a      	mov	r2, r3
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3301      	adds	r3, #1
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d3b5      	bcc.n	8007ace <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f043 0210 	orr.w	r2, r3, #16
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	4b10      	ldr	r3, [pc, #64]	@ (8007be0 <USB_DevInit+0x2c4>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ba4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f043 0208 	orr.w	r2, r3, #8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d107      	bne.n	8007bd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bc8:	f043 0304 	orr.w	r3, r3, #4
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bdc:	b004      	add	sp, #16
 8007bde:	4770      	bx	lr
 8007be0:	803c3800 	.word	0x803c3800

08007be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bfe:	d901      	bls.n	8007c04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e01b      	b.n	8007c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	daf2      	bge.n	8007bf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	019b      	lsls	r3, r3, #6
 8007c14:	f043 0220 	orr.w	r2, r3, #32
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c28:	d901      	bls.n	8007c2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e006      	b.n	8007c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d0f0      	beq.n	8007c1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c60:	d901      	bls.n	8007c66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e018      	b.n	8007c98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	daf2      	bge.n	8007c54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2210      	movs	r2, #16
 8007c76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c84:	d901      	bls.n	8007c8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e006      	b.n	8007c98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b10      	cmp	r3, #16
 8007c94:	d0f0      	beq.n	8007c78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b087      	sub	sp, #28
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 0306 	and.w	r3, r3, #6
 8007cee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d102      	bne.n	8007cfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
 8007cfa:	e00a      	b.n	8007d12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d002      	beq.n	8007d08 <USB_GetDevSpeed+0x32>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b06      	cmp	r3, #6
 8007d06:	d102      	bne.n	8007d0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	75fb      	strb	r3, [r7, #23]
 8007d0c:	e001      	b.n	8007d12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d0e:	230f      	movs	r3, #15
 8007d10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d13a      	bne.n	8007db2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	68f9      	ldr	r1, [r7, #12]
 8007d56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d155      	bne.n	8007e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	791b      	ldrb	r3, [r3, #4]
 8007d8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	059b      	lsls	r3, r3, #22
 8007d96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	e036      	b.n	8007e20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db8:	69da      	ldr	r2, [r3, #28]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d11a      	bne.n	8007e20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	791b      	ldrb	r3, [r3, #4]
 8007e04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e06:	430b      	orrs	r3, r1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	0151      	lsls	r1, r2, #5
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	440a      	add	r2, r1
 8007e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d161      	bne.n	8007f10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e62:	d11f      	bne.n	8007ea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	0151      	lsls	r1, r2, #5
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	440a      	add	r2, r1
 8007e7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	68f9      	ldr	r1, [r7, #12]
 8007ec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	2101      	movs	r1, #1
 8007eda:	fa01 f303 	lsl.w	r3, r1, r3
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ee8:	4013      	ands	r3, r2
 8007eea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	0159      	lsls	r1, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	440b      	add	r3, r1
 8007f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f06:	4619      	mov	r1, r3
 8007f08:	4b35      	ldr	r3, [pc, #212]	@ (8007fe0 <USB_DeactivateEndpoint+0x1b0>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	600b      	str	r3, [r1, #0]
 8007f0e:	e060      	b.n	8007fd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f26:	d11f      	bne.n	8007f68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	2101      	movs	r1, #1
 8007f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7e:	041b      	lsls	r3, r3, #16
 8007f80:	43db      	mvns	r3, r3
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f88:	4013      	ands	r3, r2
 8007f8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f92:	69da      	ldr	r2, [r3, #28]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa2:	041b      	lsls	r3, r3, #16
 8007fa4:	43db      	mvns	r3, r3
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fac:	4013      	ands	r3, r2
 8007fae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	0159      	lsls	r1, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4b05      	ldr	r3, [pc, #20]	@ (8007fe4 <USB_DeactivateEndpoint+0x1b4>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	ec337800 	.word	0xec337800
 8007fe4:	eff37800 	.word	0xeff37800

08007fe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	@ 0x28
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	2b01      	cmp	r3, #1
 8008006:	f040 817f 	bne.w	8008308 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d132      	bne.n	8008078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800802c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008030:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008050:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	0151      	lsls	r1, r2, #5
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	440a      	add	r2, r1
 800806c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008070:	0cdb      	lsrs	r3, r3, #19
 8008072:	04db      	lsls	r3, r3, #19
 8008074:	6113      	str	r3, [r2, #16]
 8008076:	e097      	b.n	80081a8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008092:	0cdb      	lsrs	r3, r3, #19
 8008094:	04db      	lsls	r3, r3, #19
 8008096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080ba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d11a      	bne.n	80080f8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d903      	bls.n	80080d6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	69fa      	ldr	r2, [r7, #28]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080f4:	6113      	str	r3, [r2, #16]
 80080f6:	e044      	b.n	8008182 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691a      	ldr	r2, [r3, #16]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	4413      	add	r3, r2
 8008102:	1e5a      	subs	r2, r3, #1
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	8afb      	ldrh	r3, [r7, #22]
 800811e:	04d9      	lsls	r1, r3, #19
 8008120:	4ba4      	ldr	r3, [pc, #656]	@ (80083b4 <USB_EPStartXfer+0x3cc>)
 8008122:	400b      	ands	r3, r1
 8008124:	69b9      	ldr	r1, [r7, #24]
 8008126:	0148      	lsls	r0, r1, #5
 8008128:	69f9      	ldr	r1, [r7, #28]
 800812a:	4401      	add	r1, r0
 800812c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008130:	4313      	orrs	r3, r2
 8008132:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	791b      	ldrb	r3, [r3, #4]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d122      	bne.n	8008182 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	440a      	add	r2, r1
 8008152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008156:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800815a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	8afb      	ldrh	r3, [r7, #22]
 800816c:	075b      	lsls	r3, r3, #29
 800816e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008172:	69b9      	ldr	r1, [r7, #24]
 8008174:	0148      	lsls	r0, r1, #5
 8008176:	69f9      	ldr	r1, [r7, #28]
 8008178:	4401      	add	r1, r0
 800817a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800817e:	4313      	orrs	r3, r2
 8008180:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008198:	69b9      	ldr	r1, [r7, #24]
 800819a:	0148      	lsls	r0, r1, #5
 800819c:	69f9      	ldr	r1, [r7, #28]
 800819e:	4401      	add	r1, r0
 80081a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80081a4:	4313      	orrs	r3, r2
 80081a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d14b      	bne.n	8008246 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c2:	461a      	mov	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	791b      	ldrb	r3, [r3, #4]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d128      	bne.n	8008224 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d110      	bne.n	8008204 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	0151      	lsls	r1, r2, #5
 80081f4:	69fa      	ldr	r2, [r7, #28]
 80081f6:	440a      	add	r2, r1
 80081f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	e00f      	b.n	8008224 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800821e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008222:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800823e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e166      	b.n	8008514 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008260:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008264:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	791b      	ldrb	r3, [r3, #4]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d015      	beq.n	800829a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 814e 	beq.w	8008514 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800827e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	2101      	movs	r1, #1
 800828a:	fa01 f303 	lsl.w	r3, r1, r3
 800828e:	69f9      	ldr	r1, [r7, #28]
 8008290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008294:	4313      	orrs	r3, r2
 8008296:	634b      	str	r3, [r1, #52]	@ 0x34
 8008298:	e13c      	b.n	8008514 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d110      	bne.n	80082cc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	e00f      	b.n	80082ec <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ea:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	68d9      	ldr	r1, [r3, #12]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	b298      	uxth	r0, r3
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	4603      	mov	r3, r0
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f9b9 	bl	8008678 <USB_WritePacket>
 8008306:	e105      	b.n	8008514 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	440a      	add	r2, r1
 800831e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008322:	0cdb      	lsrs	r3, r3, #19
 8008324:	04db      	lsls	r3, r3, #19
 8008326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	440a      	add	r2, r1
 800833e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008342:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008346:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800834a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d132      	bne.n	80083b8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008380:	69b9      	ldr	r1, [r7, #24]
 8008382:	0148      	lsls	r0, r1, #5
 8008384:	69f9      	ldr	r1, [r7, #28]
 8008386:	4401      	add	r1, r0
 8008388:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800838c:	4313      	orrs	r3, r2
 800838e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	0151      	lsls	r1, r2, #5
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	440a      	add	r2, r1
 80083a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083ae:	6113      	str	r3, [r2, #16]
 80083b0:	e062      	b.n	8008478 <USB_EPStartXfer+0x490>
 80083b2:	bf00      	nop
 80083b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d123      	bne.n	8008408 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083d6:	69b9      	ldr	r1, [r7, #24]
 80083d8:	0148      	lsls	r0, r1, #5
 80083da:	69f9      	ldr	r1, [r7, #28]
 80083dc:	4401      	add	r1, r0
 80083de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083e2:	4313      	orrs	r3, r2
 80083e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008400:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008404:	6113      	str	r3, [r2, #16]
 8008406:	e037      	b.n	8008478 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	4413      	add	r3, r2
 8008412:	1e5a      	subs	r2, r3, #1
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	fbb2 f3f3 	udiv	r3, r2, r3
 800841c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	8afa      	ldrh	r2, [r7, #22]
 8008424:	fb03 f202 	mul.w	r2, r3, r2
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	8afb      	ldrh	r3, [r7, #22]
 800843c:	04d9      	lsls	r1, r3, #19
 800843e:	4b38      	ldr	r3, [pc, #224]	@ (8008520 <USB_EPStartXfer+0x538>)
 8008440:	400b      	ands	r3, r1
 8008442:	69b9      	ldr	r1, [r7, #24]
 8008444:	0148      	lsls	r0, r1, #5
 8008446:	69f9      	ldr	r1, [r7, #28]
 8008448:	4401      	add	r1, r0
 800844a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800844e:	4313      	orrs	r3, r2
 8008450:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008468:	69b9      	ldr	r1, [r7, #24]
 800846a:	0148      	lsls	r0, r1, #5
 800846c:	69f9      	ldr	r1, [r7, #28]
 800846e:	4401      	add	r1, r0
 8008470:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008474:	4313      	orrs	r3, r2
 8008476:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d10d      	bne.n	800849a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d009      	beq.n	800849a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	68d9      	ldr	r1, [r3, #12]
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008496:	460a      	mov	r2, r1
 8008498:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	791b      	ldrb	r3, [r3, #4]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d128      	bne.n	80084f4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d110      	bne.n	80084d4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	69fa      	ldr	r2, [r7, #28]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	e00f      	b.n	80084f4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	440a      	add	r2, r1
 800850a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800850e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008512:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	1ff80000 	.word	0x1ff80000

08008524 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d14a      	bne.n	80085d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800855a:	f040 8086 	bne.w	800866a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	440a      	add	r2, r1
 8008578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800857c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008580:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3301      	adds	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d902      	bls.n	80085bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	75fb      	strb	r3, [r7, #23]
          break;
 80085ba:	e056      	b.n	800866a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085d4:	d0e7      	beq.n	80085a6 <USB_EPStopXfer+0x82>
 80085d6:	e048      	b.n	800866a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085f0:	d13b      	bne.n	800866a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	7812      	ldrb	r2, [r2, #0]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008610:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008614:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	7812      	ldrb	r2, [r2, #0]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008646:	4293      	cmp	r3, r2
 8008648:	d902      	bls.n	8008650 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
          break;
 800864e:	e00c      	b.n	800866a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008668:	d0e7      	beq.n	800863a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008678:	b480      	push	{r7}
 800867a:	b089      	sub	sp, #36	@ 0x24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	4611      	mov	r1, r2
 8008684:	461a      	mov	r2, r3
 8008686:	460b      	mov	r3, r1
 8008688:	71fb      	strb	r3, [r7, #7]
 800868a:	4613      	mov	r3, r2
 800868c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008696:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	d123      	bne.n	80086e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800869e:	88bb      	ldrh	r3, [r7, #4]
 80086a0:	3303      	adds	r3, #3
 80086a2:	089b      	lsrs	r3, r3, #2
 80086a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	e018      	b.n	80086de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	031a      	lsls	r2, r3, #12
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086b8:	461a      	mov	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3301      	adds	r3, #1
 80086c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	3301      	adds	r3, #1
 80086ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	3301      	adds	r3, #1
 80086d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	3301      	adds	r3, #1
 80086d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	3301      	adds	r3, #1
 80086dc:	61bb      	str	r3, [r7, #24]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d3e2      	bcc.n	80086ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3724      	adds	r7, #36	@ 0x24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b08b      	sub	sp, #44	@ 0x2c
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	089b      	lsrs	r3, r3, #2
 800870e:	b29b      	uxth	r3, r3
 8008710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800871a:	2300      	movs	r3, #0
 800871c:	623b      	str	r3, [r7, #32]
 800871e:	e014      	b.n	800874a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	601a      	str	r2, [r3, #0]
    pDest++;
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	3301      	adds	r3, #1
 8008730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	3301      	adds	r3, #1
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	3301      	adds	r3, #1
 800873c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008740:	3301      	adds	r3, #1
 8008742:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	3301      	adds	r3, #1
 8008748:	623b      	str	r3, [r7, #32]
 800874a:	6a3a      	ldr	r2, [r7, #32]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	429a      	cmp	r2, r3
 8008750:	d3e6      	bcc.n	8008720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008752:	8bfb      	ldrh	r3, [r7, #30]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01e      	beq.n	8008796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008762:	461a      	mov	r2, r3
 8008764:	f107 0310 	add.w	r3, r7, #16
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	b2da      	uxtb	r2, r3
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	701a      	strb	r2, [r3, #0]
      i++;
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	3301      	adds	r3, #1
 8008782:	623b      	str	r3, [r7, #32]
      pDest++;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	3301      	adds	r3, #1
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800878a:	8bfb      	ldrh	r3, [r7, #30]
 800878c:	3b01      	subs	r3, #1
 800878e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008790:	8bfb      	ldrh	r3, [r7, #30]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1ea      	bne.n	800876c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008798:	4618      	mov	r0, r3
 800879a:	372c      	adds	r7, #44	@ 0x2c
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d12c      	bne.n	800881a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	db12      	blt.n	80087f8 <USB_EPSetStall+0x54>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00f      	beq.n	80087f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	440a      	add	r2, r1
 800880e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008812:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e02b      	b.n	8008872 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	db12      	blt.n	8008852 <USB_EPSetStall+0xae>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00f      	beq.n	8008852 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	0151      	lsls	r1, r2, #5
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	440a      	add	r2, r1
 8008848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800884c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008850:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	440a      	add	r2, r1
 8008868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800886c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d128      	bne.n	80088ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	791b      	ldrb	r3, [r3, #4]
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d003      	beq.n	80088cc <USB_EPClearStall+0x4c>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	791b      	ldrb	r3, [r3, #4]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d138      	bne.n	800893e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	0151      	lsls	r1, r2, #5
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	440a      	add	r2, r1
 80088e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	e027      	b.n	800893e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008908:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800890c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	791b      	ldrb	r3, [r3, #4]
 8008912:	2b03      	cmp	r3, #3
 8008914:	d003      	beq.n	800891e <USB_EPClearStall+0x9e>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	791b      	ldrb	r3, [r3, #4]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d10f      	bne.n	800893e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	440a      	add	r2, r1
 8008934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800893c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800896a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800896e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008980:	68f9      	ldr	r1, [r7, #12]
 8008982:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008986:	4313      	orrs	r3, r2
 8008988:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089b2:	f023 0303 	bic.w	r3, r3, #3
 80089b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089c6:	f023 0302 	bic.w	r3, r3, #2
 80089ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089f4:	f023 0303 	bic.w	r3, r3, #3
 80089f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a08:	f043 0302 	orr.w	r3, r3, #2
 8008a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4013      	ands	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a34:	68fb      	ldr	r3, [r7, #12]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	4013      	ands	r3, r2
 8008a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	0c1b      	lsrs	r3, r3, #16
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	4013      	ands	r3, r2
 8008a98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	b29b      	uxth	r3, r3
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b085      	sub	sp, #20
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b087      	sub	sp, #28
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	f003 030f 	and.w	r3, r3, #15
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	fa22 f303 	lsr.w	r3, r2, r3
 8008b16:	01db      	lsls	r3, r3, #7
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	4013      	ands	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b34:	68bb      	ldr	r3, [r7, #8]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008b7c:	f023 0307 	bic.w	r3, r3, #7
 8008b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	460b      	mov	r3, r1
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	333c      	adds	r3, #60	@ 0x3c
 8008bba:	3304      	adds	r3, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	4a26      	ldr	r2, [pc, #152]	@ (8008c5c <USB_EP0_OutStart+0xb8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d90a      	bls.n	8008bde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bd8:	d101      	bne.n	8008bde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e037      	b.n	8008c4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be4:	461a      	mov	r2, r3
 8008be6:	2300      	movs	r3, #0
 8008be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c0c:	f043 0318 	orr.w	r3, r3, #24
 8008c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c20:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008c24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c26:	7afb      	ldrb	r3, [r7, #11]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d10f      	bne.n	8008c4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c46:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	4f54300a 	.word	0x4f54300a

08008c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c78:	d901      	bls.n	8008c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e01b      	b.n	8008cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	daf2      	bge.n	8008c6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	f043 0201 	orr.w	r2, r3, #1
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ca2:	d901      	bls.n	8008ca8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e006      	b.n	8008cb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d0f0      	beq.n	8008c96 <USB_CoreReset+0x36>

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <digitalWrite>:
 *  Created on: May 22, 2025
 *      Author: Knnn
 */
#include "Arduino.h"

void digitalWrite(char* _PIN , uint8_t vlue){
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	3b30      	subs	r3, #48	@ 0x30
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	0092      	lsls	r2, r2, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3303      	adds	r3, #3
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	4413      	add	r3, r2
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	3b30      	subs	r3, #48	@ 0x30
 8008cf0:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b41      	cmp	r3, #65	@ 0x41
 8008cfa:	f040 809f 	bne.w	8008e3c <digitalWrite+0x178>
	        switch (PIN) {
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	2b0f      	cmp	r3, #15
 8008d02:	f200 833f 	bhi.w	8009384 <digitalWrite+0x6c0>
 8008d06:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <digitalWrite+0x48>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d4d 	.word	0x08008d4d
 8008d10:	08008d5b 	.word	0x08008d5b
 8008d14:	08008d69 	.word	0x08008d69
 8008d18:	08008d77 	.word	0x08008d77
 8008d1c:	08008d85 	.word	0x08008d85
 8008d20:	08008d93 	.word	0x08008d93
 8008d24:	08008da1 	.word	0x08008da1
 8008d28:	08008daf 	.word	0x08008daf
 8008d2c:	08008dbd 	.word	0x08008dbd
 8008d30:	08008dcd 	.word	0x08008dcd
 8008d34:	08008ddd 	.word	0x08008ddd
 8008d38:	08008ded 	.word	0x08008ded
 8008d3c:	08008dfd 	.word	0x08008dfd
 8008d40:	08008e0d 	.word	0x08008e0d
 8008d44:	08008e1d 	.word	0x08008e1d
 8008d48:	08008e2d 	.word	0x08008e2d
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	2101      	movs	r1, #1
 8008d52:	48bd      	ldr	r0, [pc, #756]	@ (8009048 <digitalWrite+0x384>)
 8008d54:	f7fa fd9c 	bl	8003890 <HAL_GPIO_WritePin>
 8008d58:	e314      	b.n	8009384 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	2102      	movs	r1, #2
 8008d60:	48b9      	ldr	r0, [pc, #740]	@ (8009048 <digitalWrite+0x384>)
 8008d62:	f7fa fd95 	bl	8003890 <HAL_GPIO_WritePin>
 8008d66:	e30d      	b.n	8009384 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	2104      	movs	r1, #4
 8008d6e:	48b6      	ldr	r0, [pc, #728]	@ (8009048 <digitalWrite+0x384>)
 8008d70:	f7fa fd8e 	bl	8003890 <HAL_GPIO_WritePin>
 8008d74:	e306      	b.n	8009384 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2108      	movs	r1, #8
 8008d7c:	48b2      	ldr	r0, [pc, #712]	@ (8009048 <digitalWrite+0x384>)
 8008d7e:	f7fa fd87 	bl	8003890 <HAL_GPIO_WritePin>
 8008d82:	e2ff      	b.n	8009384 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	461a      	mov	r2, r3
 8008d88:	2110      	movs	r1, #16
 8008d8a:	48af      	ldr	r0, [pc, #700]	@ (8009048 <digitalWrite+0x384>)
 8008d8c:	f7fa fd80 	bl	8003890 <HAL_GPIO_WritePin>
 8008d90:	e2f8      	b.n	8009384 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	461a      	mov	r2, r3
 8008d96:	2120      	movs	r1, #32
 8008d98:	48ab      	ldr	r0, [pc, #684]	@ (8009048 <digitalWrite+0x384>)
 8008d9a:	f7fa fd79 	bl	8003890 <HAL_GPIO_WritePin>
 8008d9e:	e2f1      	b.n	8009384 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	461a      	mov	r2, r3
 8008da4:	2140      	movs	r1, #64	@ 0x40
 8008da6:	48a8      	ldr	r0, [pc, #672]	@ (8009048 <digitalWrite+0x384>)
 8008da8:	f7fa fd72 	bl	8003890 <HAL_GPIO_WritePin>
 8008dac:	e2ea      	b.n	8009384 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	461a      	mov	r2, r3
 8008db2:	2180      	movs	r1, #128	@ 0x80
 8008db4:	48a4      	ldr	r0, [pc, #656]	@ (8009048 <digitalWrite+0x384>)
 8008db6:	f7fa fd6b 	bl	8003890 <HAL_GPIO_WritePin>
 8008dba:	e2e3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008dc4:	48a0      	ldr	r0, [pc, #640]	@ (8009048 <digitalWrite+0x384>)
 8008dc6:	f7fa fd63 	bl	8003890 <HAL_GPIO_WritePin>
 8008dca:	e2db      	b.n	8009384 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008dd4:	489c      	ldr	r0, [pc, #624]	@ (8009048 <digitalWrite+0x384>)
 8008dd6:	f7fa fd5b 	bl	8003890 <HAL_GPIO_WritePin>
 8008dda:	e2d3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	461a      	mov	r2, r3
 8008de0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008de4:	4898      	ldr	r0, [pc, #608]	@ (8009048 <digitalWrite+0x384>)
 8008de6:	f7fa fd53 	bl	8003890 <HAL_GPIO_WritePin>
 8008dea:	e2cb      	b.n	8009384 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8008dec:	78fb      	ldrb	r3, [r7, #3]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008df4:	4894      	ldr	r0, [pc, #592]	@ (8009048 <digitalWrite+0x384>)
 8008df6:	f7fa fd4b 	bl	8003890 <HAL_GPIO_WritePin>
 8008dfa:	e2c3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008e04:	4890      	ldr	r0, [pc, #576]	@ (8009048 <digitalWrite+0x384>)
 8008e06:	f7fa fd43 	bl	8003890 <HAL_GPIO_WritePin>
 8008e0a:	e2bb      	b.n	8009384 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008e14:	488c      	ldr	r0, [pc, #560]	@ (8009048 <digitalWrite+0x384>)
 8008e16:	f7fa fd3b 	bl	8003890 <HAL_GPIO_WritePin>
 8008e1a:	e2b3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008e24:	4888      	ldr	r0, [pc, #544]	@ (8009048 <digitalWrite+0x384>)
 8008e26:	f7fa fd33 	bl	8003890 <HAL_GPIO_WritePin>
 8008e2a:	e2ab      	b.n	8009384 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e34:	4884      	ldr	r0, [pc, #528]	@ (8009048 <digitalWrite+0x384>)
 8008e36:	f7fa fd2b 	bl	8003890 <HAL_GPIO_WritePin>
 8008e3a:	e2a3      	b.n	8009384 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2b42      	cmp	r3, #66	@ 0x42
 8008e44:	f040 80a0 	bne.w	8008f88 <digitalWrite+0x2c4>
	        switch (PIN) {
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b0f      	cmp	r3, #15
 8008e4c:	f200 829a 	bhi.w	8009384 <digitalWrite+0x6c0>
 8008e50:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <digitalWrite+0x194>)
 8008e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e56:	bf00      	nop
 8008e58:	08008e99 	.word	0x08008e99
 8008e5c:	08008ea7 	.word	0x08008ea7
 8008e60:	08008eb5 	.word	0x08008eb5
 8008e64:	08008ec3 	.word	0x08008ec3
 8008e68:	08008ed1 	.word	0x08008ed1
 8008e6c:	08008edf 	.word	0x08008edf
 8008e70:	08008eed 	.word	0x08008eed
 8008e74:	08008efb 	.word	0x08008efb
 8008e78:	08008f09 	.word	0x08008f09
 8008e7c:	08008f19 	.word	0x08008f19
 8008e80:	08008f29 	.word	0x08008f29
 8008e84:	08008f39 	.word	0x08008f39
 8008e88:	08008f49 	.word	0x08008f49
 8008e8c:	08008f59 	.word	0x08008f59
 8008e90:	08008f69 	.word	0x08008f69
 8008e94:	08008f79 	.word	0x08008f79
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	486b      	ldr	r0, [pc, #428]	@ (800904c <digitalWrite+0x388>)
 8008ea0:	f7fa fcf6 	bl	8003890 <HAL_GPIO_WritePin>
 8008ea4:	e26e      	b.n	8009384 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	2102      	movs	r1, #2
 8008eac:	4867      	ldr	r0, [pc, #412]	@ (800904c <digitalWrite+0x388>)
 8008eae:	f7fa fcef 	bl	8003890 <HAL_GPIO_WritePin>
 8008eb2:	e267      	b.n	8009384 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	2104      	movs	r1, #4
 8008eba:	4864      	ldr	r0, [pc, #400]	@ (800904c <digitalWrite+0x388>)
 8008ebc:	f7fa fce8 	bl	8003890 <HAL_GPIO_WritePin>
 8008ec0:	e260      	b.n	8009384 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	2108      	movs	r1, #8
 8008ec8:	4860      	ldr	r0, [pc, #384]	@ (800904c <digitalWrite+0x388>)
 8008eca:	f7fa fce1 	bl	8003890 <HAL_GPIO_WritePin>
 8008ece:	e259      	b.n	8009384 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	2110      	movs	r1, #16
 8008ed6:	485d      	ldr	r0, [pc, #372]	@ (800904c <digitalWrite+0x388>)
 8008ed8:	f7fa fcda 	bl	8003890 <HAL_GPIO_WritePin>
 8008edc:	e252      	b.n	8009384 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2120      	movs	r1, #32
 8008ee4:	4859      	ldr	r0, [pc, #356]	@ (800904c <digitalWrite+0x388>)
 8008ee6:	f7fa fcd3 	bl	8003890 <HAL_GPIO_WritePin>
 8008eea:	e24b      	b.n	8009384 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	2140      	movs	r1, #64	@ 0x40
 8008ef2:	4856      	ldr	r0, [pc, #344]	@ (800904c <digitalWrite+0x388>)
 8008ef4:	f7fa fccc 	bl	8003890 <HAL_GPIO_WritePin>
 8008ef8:	e244      	b.n	8009384 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	461a      	mov	r2, r3
 8008efe:	2180      	movs	r1, #128	@ 0x80
 8008f00:	4852      	ldr	r0, [pc, #328]	@ (800904c <digitalWrite+0x388>)
 8008f02:	f7fa fcc5 	bl	8003890 <HAL_GPIO_WritePin>
 8008f06:	e23d      	b.n	8009384 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f10:	484e      	ldr	r0, [pc, #312]	@ (800904c <digitalWrite+0x388>)
 8008f12:	f7fa fcbd 	bl	8003890 <HAL_GPIO_WritePin>
 8008f16:	e235      	b.n	8009384 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8008f18:	78fb      	ldrb	r3, [r7, #3]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f20:	484a      	ldr	r0, [pc, #296]	@ (800904c <digitalWrite+0x388>)
 8008f22:	f7fa fcb5 	bl	8003890 <HAL_GPIO_WritePin>
 8008f26:	e22d      	b.n	8009384 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008f30:	4846      	ldr	r0, [pc, #280]	@ (800904c <digitalWrite+0x388>)
 8008f32:	f7fa fcad 	bl	8003890 <HAL_GPIO_WritePin>
 8008f36:	e225      	b.n	8009384 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008f40:	4842      	ldr	r0, [pc, #264]	@ (800904c <digitalWrite+0x388>)
 8008f42:	f7fa fca5 	bl	8003890 <HAL_GPIO_WritePin>
 8008f46:	e21d      	b.n	8009384 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008f50:	483e      	ldr	r0, [pc, #248]	@ (800904c <digitalWrite+0x388>)
 8008f52:	f7fa fc9d 	bl	8003890 <HAL_GPIO_WritePin>
 8008f56:	e215      	b.n	8009384 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008f60:	483a      	ldr	r0, [pc, #232]	@ (800904c <digitalWrite+0x388>)
 8008f62:	f7fa fc95 	bl	8003890 <HAL_GPIO_WritePin>
 8008f66:	e20d      	b.n	8009384 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008f70:	4836      	ldr	r0, [pc, #216]	@ (800904c <digitalWrite+0x388>)
 8008f72:	f7fa fc8d 	bl	8003890 <HAL_GPIO_WritePin>
 8008f76:	e205      	b.n	8009384 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008f80:	4832      	ldr	r0, [pc, #200]	@ (800904c <digitalWrite+0x388>)
 8008f82:	f7fa fc85 	bl	8003890 <HAL_GPIO_WritePin>
 8008f86:	e1fd      	b.n	8009384 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b43      	cmp	r3, #67	@ 0x43
 8008f90:	f040 80a7 	bne.w	80090e2 <digitalWrite+0x41e>
	        switch (PIN) {
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b0f      	cmp	r3, #15
 8008f98:	f200 81f4 	bhi.w	8009384 <digitalWrite+0x6c0>
 8008f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa4 <digitalWrite+0x2e0>)
 8008f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa2:	bf00      	nop
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008ff3 	.word	0x08008ff3
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	0800900f 	.word	0x0800900f
 8008fb4:	0800901d 	.word	0x0800901d
 8008fb8:	0800902b 	.word	0x0800902b
 8008fbc:	08009039 	.word	0x08009039
 8008fc0:	08009055 	.word	0x08009055
 8008fc4:	08009063 	.word	0x08009063
 8008fc8:	08009073 	.word	0x08009073
 8008fcc:	08009083 	.word	0x08009083
 8008fd0:	08009093 	.word	0x08009093
 8008fd4:	080090a3 	.word	0x080090a3
 8008fd8:	080090b3 	.word	0x080090b3
 8008fdc:	080090c3 	.word	0x080090c3
 8008fe0:	080090d3 	.word	0x080090d3
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4819      	ldr	r0, [pc, #100]	@ (8009050 <digitalWrite+0x38c>)
 8008fec:	f7fa fc50 	bl	8003890 <HAL_GPIO_WritePin>
 8008ff0:	e1c8      	b.n	8009384 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	4815      	ldr	r0, [pc, #84]	@ (8009050 <digitalWrite+0x38c>)
 8008ffa:	f7fa fc49 	bl	8003890 <HAL_GPIO_WritePin>
 8008ffe:	e1c1      	b.n	8009384 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	461a      	mov	r2, r3
 8009004:	2104      	movs	r1, #4
 8009006:	4812      	ldr	r0, [pc, #72]	@ (8009050 <digitalWrite+0x38c>)
 8009008:	f7fa fc42 	bl	8003890 <HAL_GPIO_WritePin>
 800900c:	e1ba      	b.n	8009384 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	461a      	mov	r2, r3
 8009012:	2108      	movs	r1, #8
 8009014:	480e      	ldr	r0, [pc, #56]	@ (8009050 <digitalWrite+0x38c>)
 8009016:	f7fa fc3b 	bl	8003890 <HAL_GPIO_WritePin>
 800901a:	e1b3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	461a      	mov	r2, r3
 8009020:	2110      	movs	r1, #16
 8009022:	480b      	ldr	r0, [pc, #44]	@ (8009050 <digitalWrite+0x38c>)
 8009024:	f7fa fc34 	bl	8003890 <HAL_GPIO_WritePin>
 8009028:	e1ac      	b.n	8009384 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	461a      	mov	r2, r3
 800902e:	2120      	movs	r1, #32
 8009030:	4807      	ldr	r0, [pc, #28]	@ (8009050 <digitalWrite+0x38c>)
 8009032:	f7fa fc2d 	bl	8003890 <HAL_GPIO_WritePin>
 8009036:	e1a5      	b.n	8009384 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	461a      	mov	r2, r3
 800903c:	2140      	movs	r1, #64	@ 0x40
 800903e:	4804      	ldr	r0, [pc, #16]	@ (8009050 <digitalWrite+0x38c>)
 8009040:	f7fa fc26 	bl	8003890 <HAL_GPIO_WritePin>
 8009044:	e19e      	b.n	8009384 <digitalWrite+0x6c0>
 8009046:	bf00      	nop
 8009048:	40020000 	.word	0x40020000
 800904c:	40020400 	.word	0x40020400
 8009050:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	461a      	mov	r2, r3
 8009058:	2180      	movs	r1, #128	@ 0x80
 800905a:	48bb      	ldr	r0, [pc, #748]	@ (8009348 <digitalWrite+0x684>)
 800905c:	f7fa fc18 	bl	8003890 <HAL_GPIO_WritePin>
 8009060:	e190      	b.n	8009384 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	461a      	mov	r2, r3
 8009066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800906a:	48b7      	ldr	r0, [pc, #732]	@ (8009348 <digitalWrite+0x684>)
 800906c:	f7fa fc10 	bl	8003890 <HAL_GPIO_WritePin>
 8009070:	e188      	b.n	8009384 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	461a      	mov	r2, r3
 8009076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800907a:	48b3      	ldr	r0, [pc, #716]	@ (8009348 <digitalWrite+0x684>)
 800907c:	f7fa fc08 	bl	8003890 <HAL_GPIO_WritePin>
 8009080:	e180      	b.n	8009384 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 8009082:	78fb      	ldrb	r3, [r7, #3]
 8009084:	461a      	mov	r2, r3
 8009086:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800908a:	48af      	ldr	r0, [pc, #700]	@ (8009348 <digitalWrite+0x684>)
 800908c:	f7fa fc00 	bl	8003890 <HAL_GPIO_WritePin>
 8009090:	e178      	b.n	8009384 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	461a      	mov	r2, r3
 8009096:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800909a:	48ab      	ldr	r0, [pc, #684]	@ (8009348 <digitalWrite+0x684>)
 800909c:	f7fa fbf8 	bl	8003890 <HAL_GPIO_WritePin>
 80090a0:	e170      	b.n	8009384 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	461a      	mov	r2, r3
 80090a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80090aa:	48a7      	ldr	r0, [pc, #668]	@ (8009348 <digitalWrite+0x684>)
 80090ac:	f7fa fbf0 	bl	8003890 <HAL_GPIO_WritePin>
 80090b0:	e168      	b.n	8009384 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	461a      	mov	r2, r3
 80090b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80090ba:	48a3      	ldr	r0, [pc, #652]	@ (8009348 <digitalWrite+0x684>)
 80090bc:	f7fa fbe8 	bl	8003890 <HAL_GPIO_WritePin>
 80090c0:	e160      	b.n	8009384 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	461a      	mov	r2, r3
 80090c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80090ca:	489f      	ldr	r0, [pc, #636]	@ (8009348 <digitalWrite+0x684>)
 80090cc:	f7fa fbe0 	bl	8003890 <HAL_GPIO_WritePin>
 80090d0:	e158      	b.n	8009384 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	461a      	mov	r2, r3
 80090d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090da:	489b      	ldr	r0, [pc, #620]	@ (8009348 <digitalWrite+0x684>)
 80090dc:	f7fa fbd8 	bl	8003890 <HAL_GPIO_WritePin>
 80090e0:	e150      	b.n	8009384 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3301      	adds	r3, #1
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b44      	cmp	r3, #68	@ 0x44
 80090ea:	f040 809f 	bne.w	800922c <digitalWrite+0x568>
	        switch (PIN) {
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	2b0f      	cmp	r3, #15
 80090f2:	f200 8147 	bhi.w	8009384 <digitalWrite+0x6c0>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <digitalWrite+0x438>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	0800913d 	.word	0x0800913d
 8009100:	0800914b 	.word	0x0800914b
 8009104:	08009159 	.word	0x08009159
 8009108:	08009167 	.word	0x08009167
 800910c:	08009175 	.word	0x08009175
 8009110:	08009183 	.word	0x08009183
 8009114:	08009191 	.word	0x08009191
 8009118:	0800919f 	.word	0x0800919f
 800911c:	080091ad 	.word	0x080091ad
 8009120:	080091bd 	.word	0x080091bd
 8009124:	080091cd 	.word	0x080091cd
 8009128:	080091dd 	.word	0x080091dd
 800912c:	080091ed 	.word	0x080091ed
 8009130:	080091fd 	.word	0x080091fd
 8009134:	0800920d 	.word	0x0800920d
 8009138:	0800921d 	.word	0x0800921d
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	461a      	mov	r2, r3
 8009140:	2101      	movs	r1, #1
 8009142:	4882      	ldr	r0, [pc, #520]	@ (800934c <digitalWrite+0x688>)
 8009144:	f7fa fba4 	bl	8003890 <HAL_GPIO_WritePin>
 8009148:	e11c      	b.n	8009384 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	461a      	mov	r2, r3
 800914e:	2102      	movs	r1, #2
 8009150:	487e      	ldr	r0, [pc, #504]	@ (800934c <digitalWrite+0x688>)
 8009152:	f7fa fb9d 	bl	8003890 <HAL_GPIO_WritePin>
 8009156:	e115      	b.n	8009384 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	461a      	mov	r2, r3
 800915c:	2104      	movs	r1, #4
 800915e:	487b      	ldr	r0, [pc, #492]	@ (800934c <digitalWrite+0x688>)
 8009160:	f7fa fb96 	bl	8003890 <HAL_GPIO_WritePin>
 8009164:	e10e      	b.n	8009384 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 8009166:	78fb      	ldrb	r3, [r7, #3]
 8009168:	461a      	mov	r2, r3
 800916a:	2108      	movs	r1, #8
 800916c:	4877      	ldr	r0, [pc, #476]	@ (800934c <digitalWrite+0x688>)
 800916e:	f7fa fb8f 	bl	8003890 <HAL_GPIO_WritePin>
 8009172:	e107      	b.n	8009384 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	461a      	mov	r2, r3
 8009178:	2110      	movs	r1, #16
 800917a:	4874      	ldr	r0, [pc, #464]	@ (800934c <digitalWrite+0x688>)
 800917c:	f7fa fb88 	bl	8003890 <HAL_GPIO_WritePin>
 8009180:	e100      	b.n	8009384 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	461a      	mov	r2, r3
 8009186:	2120      	movs	r1, #32
 8009188:	4870      	ldr	r0, [pc, #448]	@ (800934c <digitalWrite+0x688>)
 800918a:	f7fa fb81 	bl	8003890 <HAL_GPIO_WritePin>
 800918e:	e0f9      	b.n	8009384 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	461a      	mov	r2, r3
 8009194:	2140      	movs	r1, #64	@ 0x40
 8009196:	486d      	ldr	r0, [pc, #436]	@ (800934c <digitalWrite+0x688>)
 8009198:	f7fa fb7a 	bl	8003890 <HAL_GPIO_WritePin>
 800919c:	e0f2      	b.n	8009384 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	461a      	mov	r2, r3
 80091a2:	2180      	movs	r1, #128	@ 0x80
 80091a4:	4869      	ldr	r0, [pc, #420]	@ (800934c <digitalWrite+0x688>)
 80091a6:	f7fa fb73 	bl	8003890 <HAL_GPIO_WritePin>
 80091aa:	e0eb      	b.n	8009384 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091b4:	4865      	ldr	r0, [pc, #404]	@ (800934c <digitalWrite+0x688>)
 80091b6:	f7fa fb6b 	bl	8003890 <HAL_GPIO_WritePin>
 80091ba:	e0e3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	461a      	mov	r2, r3
 80091c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80091c4:	4861      	ldr	r0, [pc, #388]	@ (800934c <digitalWrite+0x688>)
 80091c6:	f7fa fb63 	bl	8003890 <HAL_GPIO_WritePin>
 80091ca:	e0db      	b.n	8009384 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	461a      	mov	r2, r3
 80091d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80091d4:	485d      	ldr	r0, [pc, #372]	@ (800934c <digitalWrite+0x688>)
 80091d6:	f7fa fb5b 	bl	8003890 <HAL_GPIO_WritePin>
 80091da:	e0d3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	461a      	mov	r2, r3
 80091e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80091e4:	4859      	ldr	r0, [pc, #356]	@ (800934c <digitalWrite+0x688>)
 80091e6:	f7fa fb53 	bl	8003890 <HAL_GPIO_WritePin>
 80091ea:	e0cb      	b.n	8009384 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091f4:	4855      	ldr	r0, [pc, #340]	@ (800934c <digitalWrite+0x688>)
 80091f6:	f7fa fb4b 	bl	8003890 <HAL_GPIO_WritePin>
 80091fa:	e0c3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	461a      	mov	r2, r3
 8009200:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009204:	4851      	ldr	r0, [pc, #324]	@ (800934c <digitalWrite+0x688>)
 8009206:	f7fa fb43 	bl	8003890 <HAL_GPIO_WritePin>
 800920a:	e0bb      	b.n	8009384 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	461a      	mov	r2, r3
 8009210:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009214:	484d      	ldr	r0, [pc, #308]	@ (800934c <digitalWrite+0x688>)
 8009216:	f7fa fb3b 	bl	8003890 <HAL_GPIO_WritePin>
 800921a:	e0b3      	b.n	8009384 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	461a      	mov	r2, r3
 8009220:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009224:	4849      	ldr	r0, [pc, #292]	@ (800934c <digitalWrite+0x688>)
 8009226:	f7fa fb33 	bl	8003890 <HAL_GPIO_WritePin>
 800922a:	e0ab      	b.n	8009384 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3301      	adds	r3, #1
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b45      	cmp	r3, #69	@ 0x45
 8009234:	f040 80a6 	bne.w	8009384 <digitalWrite+0x6c0>
	        switch (PIN) {
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b0f      	cmp	r3, #15
 800923c:	f200 80a2 	bhi.w	8009384 <digitalWrite+0x6c0>
 8009240:	a201      	add	r2, pc, #4	@ (adr r2, 8009248 <digitalWrite+0x584>)
 8009242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009246:	bf00      	nop
 8009248:	08009289 	.word	0x08009289
 800924c:	08009297 	.word	0x08009297
 8009250:	080092a5 	.word	0x080092a5
 8009254:	080092b3 	.word	0x080092b3
 8009258:	080092c1 	.word	0x080092c1
 800925c:	080092cf 	.word	0x080092cf
 8009260:	080092dd 	.word	0x080092dd
 8009264:	080092eb 	.word	0x080092eb
 8009268:	080092f9 	.word	0x080092f9
 800926c:	08009309 	.word	0x08009309
 8009270:	08009319 	.word	0x08009319
 8009274:	08009329 	.word	0x08009329
 8009278:	08009339 	.word	0x08009339
 800927c:	08009355 	.word	0x08009355
 8009280:	08009365 	.word	0x08009365
 8009284:	08009375 	.word	0x08009375
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	461a      	mov	r2, r3
 800928c:	2101      	movs	r1, #1
 800928e:	4830      	ldr	r0, [pc, #192]	@ (8009350 <digitalWrite+0x68c>)
 8009290:	f7fa fafe 	bl	8003890 <HAL_GPIO_WritePin>
 8009294:	e076      	b.n	8009384 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 8009296:	78fb      	ldrb	r3, [r7, #3]
 8009298:	461a      	mov	r2, r3
 800929a:	2102      	movs	r1, #2
 800929c:	482c      	ldr	r0, [pc, #176]	@ (8009350 <digitalWrite+0x68c>)
 800929e:	f7fa faf7 	bl	8003890 <HAL_GPIO_WritePin>
 80092a2:	e06f      	b.n	8009384 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	461a      	mov	r2, r3
 80092a8:	2104      	movs	r1, #4
 80092aa:	4829      	ldr	r0, [pc, #164]	@ (8009350 <digitalWrite+0x68c>)
 80092ac:	f7fa faf0 	bl	8003890 <HAL_GPIO_WritePin>
 80092b0:	e068      	b.n	8009384 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 80092b2:	78fb      	ldrb	r3, [r7, #3]
 80092b4:	461a      	mov	r2, r3
 80092b6:	2108      	movs	r1, #8
 80092b8:	4825      	ldr	r0, [pc, #148]	@ (8009350 <digitalWrite+0x68c>)
 80092ba:	f7fa fae9 	bl	8003890 <HAL_GPIO_WritePin>
 80092be:	e061      	b.n	8009384 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	461a      	mov	r2, r3
 80092c4:	2110      	movs	r1, #16
 80092c6:	4822      	ldr	r0, [pc, #136]	@ (8009350 <digitalWrite+0x68c>)
 80092c8:	f7fa fae2 	bl	8003890 <HAL_GPIO_WritePin>
 80092cc:	e05a      	b.n	8009384 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	461a      	mov	r2, r3
 80092d2:	2120      	movs	r1, #32
 80092d4:	481e      	ldr	r0, [pc, #120]	@ (8009350 <digitalWrite+0x68c>)
 80092d6:	f7fa fadb 	bl	8003890 <HAL_GPIO_WritePin>
 80092da:	e053      	b.n	8009384 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	461a      	mov	r2, r3
 80092e0:	2140      	movs	r1, #64	@ 0x40
 80092e2:	481b      	ldr	r0, [pc, #108]	@ (8009350 <digitalWrite+0x68c>)
 80092e4:	f7fa fad4 	bl	8003890 <HAL_GPIO_WritePin>
 80092e8:	e04c      	b.n	8009384 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	461a      	mov	r2, r3
 80092ee:	2180      	movs	r1, #128	@ 0x80
 80092f0:	4817      	ldr	r0, [pc, #92]	@ (8009350 <digitalWrite+0x68c>)
 80092f2:	f7fa facd 	bl	8003890 <HAL_GPIO_WritePin>
 80092f6:	e045      	b.n	8009384 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009300:	4813      	ldr	r0, [pc, #76]	@ (8009350 <digitalWrite+0x68c>)
 8009302:	f7fa fac5 	bl	8003890 <HAL_GPIO_WritePin>
 8009306:	e03d      	b.n	8009384 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	461a      	mov	r2, r3
 800930c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009310:	480f      	ldr	r0, [pc, #60]	@ (8009350 <digitalWrite+0x68c>)
 8009312:	f7fa fabd 	bl	8003890 <HAL_GPIO_WritePin>
 8009316:	e035      	b.n	8009384 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	461a      	mov	r2, r3
 800931c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009320:	480b      	ldr	r0, [pc, #44]	@ (8009350 <digitalWrite+0x68c>)
 8009322:	f7fa fab5 	bl	8003890 <HAL_GPIO_WritePin>
 8009326:	e02d      	b.n	8009384 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 8009328:	78fb      	ldrb	r3, [r7, #3]
 800932a:	461a      	mov	r2, r3
 800932c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009330:	4807      	ldr	r0, [pc, #28]	@ (8009350 <digitalWrite+0x68c>)
 8009332:	f7fa faad 	bl	8003890 <HAL_GPIO_WritePin>
 8009336:	e025      	b.n	8009384 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	461a      	mov	r2, r3
 800933c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009340:	4803      	ldr	r0, [pc, #12]	@ (8009350 <digitalWrite+0x68c>)
 8009342:	f7fa faa5 	bl	8003890 <HAL_GPIO_WritePin>
 8009346:	e01d      	b.n	8009384 <digitalWrite+0x6c0>
 8009348:	40020800 	.word	0x40020800
 800934c:	40020c00 	.word	0x40020c00
 8009350:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	461a      	mov	r2, r3
 8009358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800935c:	480b      	ldr	r0, [pc, #44]	@ (800938c <digitalWrite+0x6c8>)
 800935e:	f7fa fa97 	bl	8003890 <HAL_GPIO_WritePin>
 8009362:	e00f      	b.n	8009384 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	461a      	mov	r2, r3
 8009368:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800936c:	4807      	ldr	r0, [pc, #28]	@ (800938c <digitalWrite+0x6c8>)
 800936e:	f7fa fa8f 	bl	8003890 <HAL_GPIO_WritePin>
 8009372:	e007      	b.n	8009384 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	461a      	mov	r2, r3
 8009378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800937c:	4803      	ldr	r0, [pc, #12]	@ (800938c <digitalWrite+0x6c8>)
 800937e:	f7fa fa87 	bl	8003890 <HAL_GPIO_WritePin>
 8009382:	bf00      	nop
	        }
	    }
}
 8009384:	bf00      	nop
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	40021000 	.word	0x40021000

08009390 <map>:
		}
	}
	return value;
}

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	ed87 0a05 	vstr	s0, [r7, #20]
 800939a:	edc7 0a04 	vstr	s1, [r7, #16]
 800939e:	ed87 1a03 	vstr	s2, [r7, #12]
 80093a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80093a6:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 80093aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80093ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80093b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80093ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80093be:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80093c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80093c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80093ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80093ce:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80093d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80093da:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80093de:	eeb0 0a67 	vmov.f32	s0, s15
 80093e2:	371c      	adds	r7, #28
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 80093f8:	4a0f      	ldr	r2, [pc, #60]	@ (8009438 <Motor_setup_LF+0x4c>)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 80093fe:	4a0f      	ldr	r2, [pc, #60]	@ (800943c <Motor_setup_LF+0x50>)
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8009404:	4b0c      	ldr	r3, [pc, #48]	@ (8009438 <Motor_setup_LF+0x4c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2100      	movs	r1, #0
 800940a:	4618      	mov	r0, r3
 800940c:	f7fc fbb0 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8009410:	4b0a      	ldr	r3, [pc, #40]	@ (800943c <Motor_setup_LF+0x50>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	213c      	movs	r1, #60	@ 0x3c
 8009416:	4618      	mov	r0, r3
 8009418:	f7fc fd18 	bl	8005e4c <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 800941c:	4a08      	ldr	r2, [pc, #32]	@ (8009440 <Motor_setup_LF+0x54>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8009422:	4b05      	ldr	r3, [pc, #20]	@ (8009438 <Motor_setup_LF+0x4c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	b21a      	sxth	r2, r3
 800942a:	4b06      	ldr	r3, [pc, #24]	@ (8009444 <Motor_setup_LF+0x58>)
 800942c:	801a      	strh	r2, [r3, #0]

}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	200006a4 	.word	0x200006a4
 800943c:	2000068c 	.word	0x2000068c
 8009440:	20000704 	.word	0x20000704
 8009444:	200006f8 	.word	0x200006f8

08009448 <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8009454:	4a0f      	ldr	r2, [pc, #60]	@ (8009494 <Motor_setup_LB+0x4c>)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 800945a:	4a0f      	ldr	r2, [pc, #60]	@ (8009498 <Motor_setup_LB+0x50>)
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8009460:	4b0c      	ldr	r3, [pc, #48]	@ (8009494 <Motor_setup_LB+0x4c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f7fc fb82 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 800946c:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <Motor_setup_LB+0x50>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	213c      	movs	r1, #60	@ 0x3c
 8009472:	4618      	mov	r0, r3
 8009474:	f7fc fcea 	bl	8005e4c <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 8009478:	4a08      	ldr	r2, [pc, #32]	@ (800949c <Motor_setup_LB+0x54>)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 800947e:	4b05      	ldr	r3, [pc, #20]	@ (8009494 <Motor_setup_LB+0x4c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	b21a      	sxth	r2, r3
 8009486:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <Motor_setup_LB+0x58>)
 8009488:	801a      	strh	r2, [r3, #0]

}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	200006a8 	.word	0x200006a8
 8009498:	20000690 	.word	0x20000690
 800949c:	20000708 	.word	0x20000708
 80094a0:	200006fa 	.word	0x200006fa

080094a4 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80094b0:	4a0f      	ldr	r2, [pc, #60]	@ (80094f0 <Motor_setup_RF+0x4c>)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80094b6:	4a0f      	ldr	r2, [pc, #60]	@ (80094f4 <Motor_setup_RF+0x50>)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80094bc:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <Motor_setup_RF+0x4c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fc fb54 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80094c8:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <Motor_setup_RF+0x50>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	213c      	movs	r1, #60	@ 0x3c
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fc fcbc 	bl	8005e4c <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80094d4:	4a08      	ldr	r2, [pc, #32]	@ (80094f8 <Motor_setup_RF+0x54>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80094da:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <Motor_setup_RF+0x4c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	b21a      	sxth	r2, r3
 80094e2:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <Motor_setup_RF+0x58>)
 80094e4:	801a      	strh	r2, [r3, #0]

}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	200006ac 	.word	0x200006ac
 80094f4:	20000694 	.word	0x20000694
 80094f8:	2000070c 	.word	0x2000070c
 80094fc:	200006fc 	.word	0x200006fc

08009500 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 800950c:	4a0f      	ldr	r2, [pc, #60]	@ (800954c <Motor_setup_RB+0x4c>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8009512:	4a0f      	ldr	r2, [pc, #60]	@ (8009550 <Motor_setup_RB+0x50>)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 8009518:	4b0c      	ldr	r3, [pc, #48]	@ (800954c <Motor_setup_RB+0x4c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2104      	movs	r1, #4
 800951e:	4618      	mov	r0, r3
 8009520:	f7fc fb26 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8009524:	4b0a      	ldr	r3, [pc, #40]	@ (8009550 <Motor_setup_RB+0x50>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	213c      	movs	r1, #60	@ 0x3c
 800952a:	4618      	mov	r0, r3
 800952c:	f7fc fc8e 	bl	8005e4c <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8009530:	4a08      	ldr	r2, [pc, #32]	@ (8009554 <Motor_setup_RB+0x54>)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 8009536:	4b05      	ldr	r3, [pc, #20]	@ (800954c <Motor_setup_RB+0x4c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	b21a      	sxth	r2, r3
 800953e:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <Motor_setup_RB+0x58>)
 8009540:	801a      	strh	r2, [r3, #0]

}
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	200006b0 	.word	0x200006b0
 8009550:	20000698 	.word	0x20000698
 8009554:	20000710 	.word	0x20000710
 8009558:	200006fe 	.word	0x200006fe

0800955c <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 8009568:	4a0f      	ldr	r2, [pc, #60]	@ (80095a8 <Motor_setup_EXTRA1+0x4c>)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 800956e:	4a0f      	ldr	r2, [pc, #60]	@ (80095ac <Motor_setup_EXTRA1+0x50>)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8009574:	4b0c      	ldr	r3, [pc, #48]	@ (80095a8 <Motor_setup_EXTRA1+0x4c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2100      	movs	r1, #0
 800957a:	4618      	mov	r0, r3
 800957c:	f7fc faf8 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8009580:	4b0a      	ldr	r3, [pc, #40]	@ (80095ac <Motor_setup_EXTRA1+0x50>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	213c      	movs	r1, #60	@ 0x3c
 8009586:	4618      	mov	r0, r3
 8009588:	f7fc fc60 	bl	8005e4c <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 800958c:	4a08      	ldr	r2, [pc, #32]	@ (80095b0 <Motor_setup_EXTRA1+0x54>)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 8009592:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <Motor_setup_EXTRA1+0x4c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	b21a      	sxth	r2, r3
 800959a:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <Motor_setup_EXTRA1+0x58>)
 800959c:	801a      	strh	r2, [r3, #0]

}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200006b4 	.word	0x200006b4
 80095ac:	2000069c 	.word	0x2000069c
 80095b0:	20000714 	.word	0x20000714
 80095b4:	20000700 	.word	0x20000700

080095b8 <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80095c4:	4a0f      	ldr	r2, [pc, #60]	@ (8009604 <Motor_setup_EXTRA2+0x4c>)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80095ca:	4a0f      	ldr	r2, [pc, #60]	@ (8009608 <Motor_setup_EXTRA2+0x50>)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80095d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009604 <Motor_setup_EXTRA2+0x4c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2100      	movs	r1, #0
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fc faca 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80095dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009608 <Motor_setup_EXTRA2+0x50>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	213c      	movs	r1, #60	@ 0x3c
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fc fc32 	bl	8005e4c <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80095e8:	4a08      	ldr	r2, [pc, #32]	@ (800960c <Motor_setup_EXTRA2+0x54>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 80095ee:	4b05      	ldr	r3, [pc, #20]	@ (8009604 <Motor_setup_EXTRA2+0x4c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	b21a      	sxth	r2, r3
 80095f6:	4b06      	ldr	r3, [pc, #24]	@ (8009610 <Motor_setup_EXTRA2+0x58>)
 80095f8:	801a      	strh	r2, [r3, #0]

}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	200006b8 	.word	0x200006b8
 8009608:	200006a0 	.word	0x200006a0
 800960c:	20000718 	.word	0x20000718
 8009610:	20000702 	.word	0x20000702

08009614 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////RPM///////////////////////////////////////////////////////////////

int32_t getCount(TIM_HandleTypeDef *TIM ,motor_Wheel _Wheel){
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
	Motor_feedback._Count[_Wheel] = ((int32_t)(TIM->Instance->CNT));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	b211      	sxth	r1, r2
 800962a:	4a06      	ldr	r2, [pc, #24]	@ (8009644 <getCount+0x30>)
 800962c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return Motor_feedback._Count[_Wheel];
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	4a04      	ldr	r2, [pc, #16]	@ (8009644 <getCount+0x30>)
 8009634:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	200006bc 	.word	0x200006bc

08009648 <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	80fb      	strh	r3, [r7, #6]
	_Setup._freq = freq;
 8009652:	4a04      	ldr	r2, [pc, #16]	@ (8009664 <Setup_frequency_Motor+0x1c>)
 8009654:	88fb      	ldrh	r3, [r7, #6]
 8009656:	8013      	strh	r3, [r2, #0]
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	20000010 	.word	0x20000010

08009668 <Setup_CPR>:

void Setup_CPR(uint16_t _CPR){
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	80fb      	strh	r3, [r7, #6]
	_Setup.CPR = _CPR;
 8009672:	4a04      	ldr	r2, [pc, #16]	@ (8009684 <Setup_CPR+0x1c>)
 8009674:	88fb      	ldrh	r3, [r7, #6]
 8009676:	8053      	strh	r3, [r2, #2]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20000010 	.word	0x20000010

08009688 <Setup_Gear_Ratio>:

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	80fb      	strh	r3, [r7, #6]
	_Setup.Gear_Ratio = _Gear_Ratio;
 8009692:	4a04      	ldr	r2, [pc, #16]	@ (80096a4 <Setup_Gear_Ratio+0x1c>)
 8009694:	88fb      	ldrh	r3, [r7, #6]
 8009696:	8093      	strh	r3, [r2, #4]
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	20000010 	.word	0x20000010

080096a8 <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 80096b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80096b6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80096d8 <getRad_s_to_RPM+0x30>
 80096ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096be:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	ee07 3a90 	vmov	s15, r3
}
 80096c8:	eeb0 0a67 	vmov.f32	s0, s15
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	4118c9ec 	.word	0x4118c9ec

080096dc <getRPM_TIM_Wheel>:


int16_t Present_Count[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
int16_t Past_Count[6] = {0 ,0 ,0 ,0 ,0 ,0};    //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,motor_Wheel _Wheel){
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
	if(_Wheel == 1){
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d10e      	bne.n	800970c <getRPM_TIM_Wheel+0x30>
		Present_Count[_Wheel] = (int16_t)-getCount(TIM ,_Wheel);
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff ff8e 	bl	8009614 <getCount>
 80096f8:	4603      	mov	r3, r0
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	425b      	negs	r3, r3
 80096fe:	b29a      	uxth	r2, r3
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	b211      	sxth	r1, r2
 8009704:	4a33      	ldr	r2, [pc, #204]	@ (80097d4 <getRPM_TIM_Wheel+0xf8>)
 8009706:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800970a:	e00a      	b.n	8009722 <getRPM_TIM_Wheel+0x46>
	}else{
		Present_Count[_Wheel] = (int16_t)getCount(TIM ,_Wheel);
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff ff7f 	bl	8009614 <getCount>
 8009716:	4602      	mov	r2, r0
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	b211      	sxth	r1, r2
 800971c:	4a2d      	ldr	r2, [pc, #180]	@ (80097d4 <getRPM_TIM_Wheel+0xf8>)
 800971e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// V = count/t = count*freq
	Motor_feedback._RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _Setup._freq);
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	4a2b      	ldr	r2, [pc, #172]	@ (80097d4 <getRPM_TIM_Wheel+0xf8>)
 8009726:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800972a:	b29a      	uxth	r2, r3
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	492a      	ldr	r1, [pc, #168]	@ (80097d8 <getRPM_TIM_Wheel+0xfc>)
 8009730:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8009734:	b29b      	uxth	r3, r3
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	b29b      	uxth	r3, r3
 800973a:	b21b      	sxth	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	4b27      	ldr	r3, [pc, #156]	@ (80097dc <getRPM_TIM_Wheel+0x100>)
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	fb03 f202 	mul.w	r2, r3, r2
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	ee07 2a90 	vmov	s15, r2
 800974c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009750:	4a23      	ldr	r2, [pc, #140]	@ (80097e0 <getRPM_TIM_Wheel+0x104>)
 8009752:	3302      	adds	r3, #2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	3304      	adds	r3, #4
 800975a:	edc3 7a00 	vstr	s15, [r3]
	Motor_feedback._RPM[_Wheel] = (float)(((Motor_feedback._RPM[_Wheel]* 60.0f)/_Setup.CPR )/_Setup.Gear_Ratio);
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	4a1f      	ldr	r2, [pc, #124]	@ (80097e0 <getRPM_TIM_Wheel+0x104>)
 8009762:	3302      	adds	r3, #2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	3304      	adds	r3, #4
 800976a:	edd3 7a00 	vldr	s15, [r3]
 800976e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80097e4 <getRPM_TIM_Wheel+0x108>
 8009772:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009776:	4b19      	ldr	r3, [pc, #100]	@ (80097dc <getRPM_TIM_Wheel+0x100>)
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009782:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009786:	4b15      	ldr	r3, [pc, #84]	@ (80097dc <getRPM_TIM_Wheel+0x100>)
 8009788:	889b      	ldrh	r3, [r3, #4]
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009798:	4a11      	ldr	r2, [pc, #68]	@ (80097e0 <getRPM_TIM_Wheel+0x104>)
 800979a:	3302      	adds	r3, #2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	3304      	adds	r3, #4
 80097a2:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	490a      	ldr	r1, [pc, #40]	@ (80097d4 <getRPM_TIM_Wheel+0xf8>)
 80097ac:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80097b0:	4a09      	ldr	r2, [pc, #36]	@ (80097d8 <getRPM_TIM_Wheel+0xfc>)
 80097b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return Motor_feedback._RPM[_Wheel];
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	4a09      	ldr	r2, [pc, #36]	@ (80097e0 <getRPM_TIM_Wheel+0x104>)
 80097ba:	3302      	adds	r3, #2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	3304      	adds	r3, #4
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	ee07 3a90 	vmov	s15, r3
}
 80097c8:	eeb0 0a67 	vmov.f32	s0, s15
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	2000071c 	.word	0x2000071c
 80097d8:	20000728 	.word	0x20000728
 80097dc:	20000010 	.word	0x20000010
 80097e0:	200006bc 	.word	0x200006bc
 80097e4:	42700000 	.word	0x42700000

080097e8 <Setup_PID_Wheel>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_Wheel(float Kp ,float Ki ,float Kd ,float _min_speed ,float _max_speed ,motor_Wheel _Wheel){
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80097f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80097f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80097fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80097fe:	ed87 2a01 	vstr	s4, [r7, #4]
 8009802:	4603      	mov	r3, r0
 8009804:	70fb      	strb	r3, [r7, #3]
	Kp_Wheel[_Wheel] = Kp;
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	4a11      	ldr	r2, [pc, #68]	@ (8009850 <Setup_PID_Wheel+0x68>)
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	601a      	str	r2, [r3, #0]
	Ki_Wheel[_Wheel] = Ki;
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	4a0f      	ldr	r2, [pc, #60]	@ (8009854 <Setup_PID_Wheel+0x6c>)
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	601a      	str	r2, [r3, #0]
	Kd_Wheel[_Wheel] = Kd;
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	4a0d      	ldr	r2, [pc, #52]	@ (8009858 <Setup_PID_Wheel+0x70>)
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]

	min_speed[_Wheel] = _min_speed;
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	4a0b      	ldr	r2, [pc, #44]	@ (800985c <Setup_PID_Wheel+0x74>)
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	601a      	str	r2, [r3, #0]
	max_speed[_Wheel] = _max_speed;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	4a09      	ldr	r2, [pc, #36]	@ (8009860 <Setup_PID_Wheel+0x78>)
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	601a      	str	r2, [r3, #0]
}
 8009842:	bf00      	nop
 8009844:	371c      	adds	r7, #28
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	20000734 	.word	0x20000734
 8009854:	2000074c 	.word	0x2000074c
 8009858:	20000764 	.word	0x20000764
 800985c:	2000077c 	.word	0x2000077c
 8009860:	20000794 	.word	0x20000794

08009864 <PID_Speed>:
float Integnator[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float Derivative[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,float RPM ,motor_Wheel _Wheel){
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	ed87 0a03 	vstr	s0, [r7, #12]
 800986e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009872:	4603      	mov	r3, r0
 8009874:	71fb      	strb	r3, [r7, #7]
	Error_Speed[_Wheel] = _Setpoint-RPM;
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	ed97 7a03 	vldr	s14, [r7, #12]
 800987c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009884:	4a80      	ldr	r2, [pc, #512]	@ (8009a88 <PID_Speed+0x224>)
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 800988e:	79fa      	ldrb	r2, [r7, #7]
 8009890:	79fb      	ldrb	r3, [r7, #7]
 8009892:	497d      	ldr	r1, [pc, #500]	@ (8009a88 <PID_Speed+0x224>)
 8009894:	0092      	lsls	r2, r2, #2
 8009896:	440a      	add	r2, r1
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	497c      	ldr	r1, [pc, #496]	@ (8009a8c <PID_Speed+0x228>)
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel] += Error_Speed[_Wheel];
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	4a7a      	ldr	r2, [pc, #488]	@ (8009a90 <PID_Speed+0x22c>)
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	ed93 7a00 	vldr	s14, [r3]
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	4a75      	ldr	r2, [pc, #468]	@ (8009a88 <PID_Speed+0x224>)
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	edd3 7a00 	vldr	s15, [r3]
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098c0:	4a73      	ldr	r2, [pc, #460]	@ (8009a90 <PID_Speed+0x22c>)
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	edc3 7a00 	vstr	s15, [r3]
	if (Integnator[_Wheel] > 25000) {
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	4a70      	ldr	r2, [pc, #448]	@ (8009a90 <PID_Speed+0x22c>)
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	edd3 7a00 	vldr	s15, [r3]
 80098d6:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8009a94 <PID_Speed+0x230>
 80098da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e2:	dd06      	ble.n	80098f2 <PID_Speed+0x8e>
		Integnator[_Wheel] = 25000;
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	4a6a      	ldr	r2, [pc, #424]	@ (8009a90 <PID_Speed+0x22c>)
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	4a6a      	ldr	r2, [pc, #424]	@ (8009a98 <PID_Speed+0x234>)
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	e021      	b.n	8009936 <PID_Speed+0xd2>
	} else if (Integnator[_Wheel] < -25000) {
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	4a66      	ldr	r2, [pc, #408]	@ (8009a90 <PID_Speed+0x22c>)
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	edd3 7a00 	vldr	s15, [r3]
 80098fe:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8009a9c <PID_Speed+0x238>
 8009902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990a:	d506      	bpl.n	800991a <PID_Speed+0xb6>
		Integnator[_Wheel] = -25000;
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	4a60      	ldr	r2, [pc, #384]	@ (8009a90 <PID_Speed+0x22c>)
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	4a62      	ldr	r2, [pc, #392]	@ (8009aa0 <PID_Speed+0x23c>)
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	e00d      	b.n	8009936 <PID_Speed+0xd2>
	} else if (_Setpoint == 0) {
 800991a:	edd7 7a03 	vldr	s15, [r7, #12]
 800991e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009926:	d106      	bne.n	8009936 <PID_Speed+0xd2>
		Integnator[_Wheel] = 0;
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	4a59      	ldr	r2, [pc, #356]	@ (8009a90 <PID_Speed+0x22c>)
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
	}

	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	4a53      	ldr	r2, [pc, #332]	@ (8009a88 <PID_Speed+0x224>)
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	ed93 7a00 	vldr	s14, [r3]
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	4a57      	ldr	r2, [pc, #348]	@ (8009aa4 <PID_Speed+0x240>)
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	edd3 7a00 	vldr	s15, [r3]
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009954:	4a54      	ldr	r2, [pc, #336]	@ (8009aa8 <PID_Speed+0x244>)
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 800995e:	79fa      	ldrb	r2, [r7, #7]
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	4949      	ldr	r1, [pc, #292]	@ (8009a88 <PID_Speed+0x224>)
 8009964:	0092      	lsls	r2, r2, #2
 8009966:	440a      	add	r2, r1
 8009968:	6812      	ldr	r2, [r2, #0]
 800996a:	494e      	ldr	r1, [pc, #312]	@ (8009aa4 <PID_Speed+0x240>)
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	440b      	add	r3, r1
 8009970:	601a      	str	r2, [r3, #0]

	Motor_feedback._PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	4a45      	ldr	r2, [pc, #276]	@ (8009a8c <PID_Speed+0x228>)
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	ed93 7a00 	vldr	s14, [r3]
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	4a4a      	ldr	r2, [pc, #296]	@ (8009aac <PID_Speed+0x248>)
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	edd3 7a00 	vldr	s15, [r3]
 800998a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	4a3f      	ldr	r2, [pc, #252]	@ (8009a90 <PID_Speed+0x22c>)
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	edd3 6a00 	vldr	s13, [r3]
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	4a44      	ldr	r2, [pc, #272]	@ (8009ab0 <PID_Speed+0x24c>)
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	edd3 7a00 	vldr	s15, [r3]
 80099a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	4a3d      	ldr	r2, [pc, #244]	@ (8009aa8 <PID_Speed+0x244>)
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	edd3 6a00 	vldr	s13, [r3]
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	4a3d      	ldr	r2, [pc, #244]	@ (8009ab4 <PID_Speed+0x250>)
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	edd3 7a00 	vldr	s15, [r3]
 80099c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099d0:	4a39      	ldr	r2, [pc, #228]	@ (8009ab8 <PID_Speed+0x254>)
 80099d2:	3308      	adds	r3, #8
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	3304      	adds	r3, #4
 80099da:	edc3 7a00 	vstr	s15, [r3]

	if (Motor_feedback._PID[_Wheel] > max_speed[_Wheel]) {
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	4a35      	ldr	r2, [pc, #212]	@ (8009ab8 <PID_Speed+0x254>)
 80099e2:	3308      	adds	r3, #8
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	3304      	adds	r3, #4
 80099ea:	ed93 7a00 	vldr	s14, [r3]
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	4a32      	ldr	r2, [pc, #200]	@ (8009abc <PID_Speed+0x258>)
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	edd3 7a00 	vldr	s15, [r3]
 80099fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a02:	dd0c      	ble.n	8009a1e <PID_Speed+0x1ba>
		Motor_feedback._PID[_Wheel] = max_speed[_Wheel];
 8009a04:	79fa      	ldrb	r2, [r7, #7]
 8009a06:	79fb      	ldrb	r3, [r7, #7]
 8009a08:	492c      	ldr	r1, [pc, #176]	@ (8009abc <PID_Speed+0x258>)
 8009a0a:	0092      	lsls	r2, r2, #2
 8009a0c:	440a      	add	r2, r1
 8009a0e:	6812      	ldr	r2, [r2, #0]
 8009a10:	4929      	ldr	r1, [pc, #164]	@ (8009ab8 <PID_Speed+0x254>)
 8009a12:	3308      	adds	r3, #8
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	440b      	add	r3, r1
 8009a18:	3304      	adds	r3, #4
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	e024      	b.n	8009a68 <PID_Speed+0x204>
	} else if (Motor_feedback._PID[_Wheel] < -max_speed[_Wheel]) {
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	4a25      	ldr	r2, [pc, #148]	@ (8009ab8 <PID_Speed+0x254>)
 8009a22:	3308      	adds	r3, #8
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	3304      	adds	r3, #4
 8009a2a:	ed93 7a00 	vldr	s14, [r3]
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	4a22      	ldr	r2, [pc, #136]	@ (8009abc <PID_Speed+0x258>)
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	edd3 7a00 	vldr	s15, [r3]
 8009a3a:	eef1 7a67 	vneg.f32	s15, s15
 8009a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a46:	d50f      	bpl.n	8009a68 <PID_Speed+0x204>
		Motor_feedback._PID[_Wheel] = -max_speed[_Wheel];
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8009abc <PID_Speed+0x258>)
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	edd3 7a00 	vldr	s15, [r3]
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	eef1 7a67 	vneg.f32	s15, s15
 8009a5a:	4a17      	ldr	r2, [pc, #92]	@ (8009ab8 <PID_Speed+0x254>)
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	3304      	adds	r3, #4
 8009a64:	edc3 7a00 	vstr	s15, [r3]
	}

	return Motor_feedback._PID[_Wheel];
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	4a13      	ldr	r2, [pc, #76]	@ (8009ab8 <PID_Speed+0x254>)
 8009a6c:	3308      	adds	r3, #8
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	3304      	adds	r3, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	ee07 3a90 	vmov	s15, r3
}
 8009a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	200007ac 	.word	0x200007ac
 8009a8c:	200007c4 	.word	0x200007c4
 8009a90:	200007dc 	.word	0x200007dc
 8009a94:	46c35000 	.word	0x46c35000
 8009a98:	46c35000 	.word	0x46c35000
 8009a9c:	c6c35000 	.word	0xc6c35000
 8009aa0:	c6c35000 	.word	0xc6c35000
 8009aa4:	2000080c 	.word	0x2000080c
 8009aa8:	200007f4 	.word	0x200007f4
 8009aac:	20000734 	.word	0x20000734
 8009ab0:	2000074c 	.word	0x2000074c
 8009ab4:	20000764 	.word	0x20000764
 8009ab8:	200006bc 	.word	0x200006bc
 8009abc:	20000794 	.word	0x20000794

08009ac0 <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8009aca:	4b26      	ldr	r3, [pc, #152]	@ (8009b64 <Motor_DutyCycle_LF+0xa4>)
 8009acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ad0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	dd03      	ble.n	8009ae0 <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8009ad8:	4b22      	ldr	r3, [pc, #136]	@ (8009b64 <Motor_DutyCycle_LF+0xa4>)
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	80fb      	strh	r3, [r7, #6]
 8009ade:	e00e      	b.n	8009afe <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 8009ae0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8009b64 <Motor_DutyCycle_LF+0xa4>)
 8009ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009aea:	425b      	negs	r3, r3
 8009aec:	429a      	cmp	r2, r3
 8009aee:	da06      	bge.n	8009afe <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 8009af0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b64 <Motor_DutyCycle_LF+0xa4>)
 8009af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	425b      	negs	r3, r3
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 8009afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dd02      	ble.n	8009b0c <Motor_DutyCycle_LF+0x4c>
 8009b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b0a:	e006      	b.n	8009b1a <Motor_DutyCycle_LF+0x5a>
 8009b0c:	4b15      	ldr	r3, [pc, #84]	@ (8009b64 <Motor_DutyCycle_LF+0xa4>)
 8009b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b18:	4413      	add	r3, r2
 8009b1a:	4a13      	ldr	r2, [pc, #76]	@ (8009b68 <Motor_DutyCycle_LF+0xa8>)
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	6812      	ldr	r2, [r2, #0]
 8009b20:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 8009b22:	4b12      	ldr	r3, [pc, #72]	@ (8009b6c <Motor_DutyCycle_LF+0xac>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b2a:	13db      	asrs	r3, r3, #15
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	4610      	mov	r0, r2
 8009b3a:	f7ff f8c3 	bl	8008cc4 <digitalWrite>

	if(DutyCycle_LF == 0){
 8009b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 8009b46:	4b08      	ldr	r3, [pc, #32]	@ (8009b68 <Motor_DutyCycle_LF+0xa8>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 8009b50:	4b06      	ldr	r3, [pc, #24]	@ (8009b6c <Motor_DutyCycle_LF+0xac>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff f8b4 	bl	8008cc4 <digitalWrite>
	}
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200006f8 	.word	0x200006f8
 8009b68:	200006a4 	.word	0x200006a4
 8009b6c:	20000704 	.word	0x20000704

08009b70 <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	425b      	negs	r3, r3
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 8009b82:	4b26      	ldr	r3, [pc, #152]	@ (8009c1c <Motor_DutyCycle_LB+0xac>)
 8009b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	dd03      	ble.n	8009b98 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 8009b90:	4b22      	ldr	r3, [pc, #136]	@ (8009c1c <Motor_DutyCycle_LB+0xac>)
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	80fb      	strh	r3, [r7, #6]
 8009b96:	e00e      	b.n	8009bb6 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8009b98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8009c1c <Motor_DutyCycle_LB+0xac>)
 8009b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba2:	425b      	negs	r3, r3
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	da06      	bge.n	8009bb6 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8009ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c1c <Motor_DutyCycle_LB+0xac>)
 8009baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	425b      	negs	r3, r3
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8009bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dd02      	ble.n	8009bc4 <Motor_DutyCycle_LB+0x54>
 8009bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bc2:	e006      	b.n	8009bd2 <Motor_DutyCycle_LB+0x62>
 8009bc4:	4b15      	ldr	r3, [pc, #84]	@ (8009c1c <Motor_DutyCycle_LB+0xac>)
 8009bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	4a13      	ldr	r2, [pc, #76]	@ (8009c20 <Motor_DutyCycle_LB+0xb0>)
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	6812      	ldr	r2, [r2, #0]
 8009bd8:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8009bda:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <Motor_DutyCycle_LB+0xb4>)
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009be2:	13db      	asrs	r3, r3, #15
 8009be4:	b21b      	sxth	r3, r3
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f7ff f867 	bl	8008cc4 <digitalWrite>

	if(DutyCycle_LB == 0){
 8009bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 8009bfe:	4b08      	ldr	r3, [pc, #32]	@ (8009c20 <Motor_DutyCycle_LB+0xb0>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2200      	movs	r2, #0
 8009c06:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8009c08:	4b06      	ldr	r3, [pc, #24]	@ (8009c24 <Motor_DutyCycle_LB+0xb4>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff f858 	bl	8008cc4 <digitalWrite>
	}
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	200006fa 	.word	0x200006fa
 8009c20:	200006a8 	.word	0x200006a8
 8009c24:	20000708 	.word	0x20000708

08009c28 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	425b      	negs	r3, r3
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 8009c3a:	4b26      	ldr	r3, [pc, #152]	@ (8009cd4 <Motor_DutyCycle_RF+0xac>)
 8009c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	dd03      	ble.n	8009c50 <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 8009c48:	4b22      	ldr	r3, [pc, #136]	@ (8009cd4 <Motor_DutyCycle_RF+0xac>)
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	80fb      	strh	r3, [r7, #6]
 8009c4e:	e00e      	b.n	8009c6e <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 8009c50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c54:	4b1f      	ldr	r3, [pc, #124]	@ (8009cd4 <Motor_DutyCycle_RF+0xac>)
 8009c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c5a:	425b      	negs	r3, r3
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	da06      	bge.n	8009c6e <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 8009c60:	4b1c      	ldr	r3, [pc, #112]	@ (8009cd4 <Motor_DutyCycle_RF+0xac>)
 8009c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	425b      	negs	r3, r3
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 8009c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	dd02      	ble.n	8009c7c <Motor_DutyCycle_RF+0x54>
 8009c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c7a:	e006      	b.n	8009c8a <Motor_DutyCycle_RF+0x62>
 8009c7c:	4b15      	ldr	r3, [pc, #84]	@ (8009cd4 <Motor_DutyCycle_RF+0xac>)
 8009c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c82:	461a      	mov	r2, r3
 8009c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c88:	4413      	add	r3, r2
 8009c8a:	4a13      	ldr	r2, [pc, #76]	@ (8009cd8 <Motor_DutyCycle_RF+0xb0>)
 8009c8c:	6812      	ldr	r2, [r2, #0]
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 8009c92:	4b12      	ldr	r3, [pc, #72]	@ (8009cdc <Motor_DutyCycle_RF+0xb4>)
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c9a:	13db      	asrs	r3, r3, #15
 8009c9c:	b21b      	sxth	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f7ff f80b 	bl	8008cc4 <digitalWrite>

	if(DutyCycle_RF == 0){
 8009cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10a      	bne.n	8009ccc <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8009cb6:	4b08      	ldr	r3, [pc, #32]	@ (8009cd8 <Motor_DutyCycle_RF+0xb0>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 8009cc0:	4b06      	ldr	r3, [pc, #24]	@ (8009cdc <Motor_DutyCycle_RF+0xb4>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fffc 	bl	8008cc4 <digitalWrite>
	}
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200006fc 	.word	0x200006fc
 8009cd8:	200006ac 	.word	0x200006ac
 8009cdc:	2000070c 	.word	0x2000070c

08009ce0 <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8009cea:	4b26      	ldr	r3, [pc, #152]	@ (8009d84 <Motor_DutyCycle_RB+0xa4>)
 8009cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cf0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	dd03      	ble.n	8009d00 <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8009cf8:	4b22      	ldr	r3, [pc, #136]	@ (8009d84 <Motor_DutyCycle_RB+0xa4>)
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	80fb      	strh	r3, [r7, #6]
 8009cfe:	e00e      	b.n	8009d1e <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 8009d00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d04:	4b1f      	ldr	r3, [pc, #124]	@ (8009d84 <Motor_DutyCycle_RB+0xa4>)
 8009d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d0a:	425b      	negs	r3, r3
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	da06      	bge.n	8009d1e <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 8009d10:	4b1c      	ldr	r3, [pc, #112]	@ (8009d84 <Motor_DutyCycle_RB+0xa4>)
 8009d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	425b      	negs	r3, r3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 8009d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dd02      	ble.n	8009d2c <Motor_DutyCycle_RB+0x4c>
 8009d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d2a:	e006      	b.n	8009d3a <Motor_DutyCycle_RB+0x5a>
 8009d2c:	4b15      	ldr	r3, [pc, #84]	@ (8009d84 <Motor_DutyCycle_RB+0xa4>)
 8009d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d32:	461a      	mov	r2, r3
 8009d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d38:	4413      	add	r3, r2
 8009d3a:	4a13      	ldr	r2, [pc, #76]	@ (8009d88 <Motor_DutyCycle_RB+0xa8>)
 8009d3c:	6812      	ldr	r2, [r2, #0]
 8009d3e:	6812      	ldr	r2, [r2, #0]
 8009d40:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 8009d42:	4b12      	ldr	r3, [pc, #72]	@ (8009d8c <Motor_DutyCycle_RB+0xac>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d4a:	13db      	asrs	r3, r3, #15
 8009d4c:	b21b      	sxth	r3, r3
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	4619      	mov	r1, r3
 8009d58:	4610      	mov	r0, r2
 8009d5a:	f7fe ffb3 	bl	8008cc4 <digitalWrite>

	if(DutyCycle_RB == 0){
 8009d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 8009d66:	4b08      	ldr	r3, [pc, #32]	@ (8009d88 <Motor_DutyCycle_RB+0xa8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8009d70:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <Motor_DutyCycle_RB+0xac>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2100      	movs	r1, #0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe ffa4 	bl	8008cc4 <digitalWrite>
	}
}
 8009d7c:	bf00      	nop
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200006fe 	.word	0x200006fe
 8009d88:	200006b0 	.word	0x200006b0
 8009d8c:	20000710 	.word	0x20000710

08009d90 <Motor_Speed_LF>:
	}
}

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	ed87 0a00 	vstr	s0, [r7]
 8009d9c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 8009d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8009e54 <Motor_Speed_LF+0xc4>)
 8009da0:	edd3 7a00 	vldr	s15, [r3]
 8009da4:	ed97 7a00 	vldr	s14, [r7]
 8009da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db0:	dd03      	ble.n	8009dba <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 8009db2:	4b28      	ldr	r3, [pc, #160]	@ (8009e54 <Motor_Speed_LF+0xc4>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	e012      	b.n	8009de0 <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8009dba:	4b26      	ldr	r3, [pc, #152]	@ (8009e54 <Motor_Speed_LF+0xc4>)
 8009dbc:	edd3 7a00 	vldr	s15, [r3]
 8009dc0:	eef1 7a67 	vneg.f32	s15, s15
 8009dc4:	ed97 7a00 	vldr	s14, [r7]
 8009dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd0:	d506      	bpl.n	8009de0 <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 8009dd2:	4b20      	ldr	r3, [pc, #128]	@ (8009e54 <Motor_Speed_LF+0xc4>)
 8009dd4:	edd3 7a00 	vldr	s15, [r3]
 8009dd8:	eef1 7a67 	vneg.f32	s15, s15
 8009ddc:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 8009de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009de4:	ee07 3a90 	vmov	s15, r3
 8009de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dec:	2000      	movs	r0, #0
 8009dee:	edd7 0a00 	vldr	s1, [r7]
 8009df2:	eeb0 0a67 	vmov.f32	s0, s15
 8009df6:	f7ff fd35 	bl	8009864 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Motor_feedback._PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8009dfa:	4b17      	ldr	r3, [pc, #92]	@ (8009e58 <Motor_Speed_LF+0xc8>)
 8009dfc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8009e00:	4b14      	ldr	r3, [pc, #80]	@ (8009e54 <Motor_Speed_LF+0xc4>)
 8009e02:	ed93 7a00 	vldr	s14, [r3]
 8009e06:	4b15      	ldr	r3, [pc, #84]	@ (8009e5c <Motor_Speed_LF+0xcc>)
 8009e08:	edd3 7a00 	vldr	s15, [r3]
 8009e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e14:	4b12      	ldr	r3, [pc, #72]	@ (8009e60 <Motor_Speed_LF+0xd0>)
 8009e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e1a:	ee07 3a90 	vmov	s15, r3
 8009e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e2a:	ee17 3a90 	vmov	r3, s15
 8009e2e:	b21a      	sxth	r2, r3
 8009e30:	4b0c      	ldr	r3, [pc, #48]	@ (8009e64 <Motor_Speed_LF+0xd4>)
 8009e32:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8009e34:	4b0b      	ldr	r3, [pc, #44]	@ (8009e64 <Motor_Speed_LF+0xd4>)
 8009e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff fe40 	bl	8009ac0 <Motor_DutyCycle_LF>

	return Motor_feedback._PID[0];
 8009e40:	4b05      	ldr	r3, [pc, #20]	@ (8009e58 <Motor_Speed_LF+0xc8>)
 8009e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e44:	ee07 3a90 	vmov	s15, r3
}
 8009e48:	eeb0 0a67 	vmov.f32	s0, s15
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000794 	.word	0x20000794
 8009e58:	200006bc 	.word	0x200006bc
 8009e5c:	2000077c 	.word	0x2000077c
 8009e60:	200006f8 	.word	0x200006f8
 8009e64:	20000824 	.word	0x20000824

08009e68 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	ed87 0a00 	vstr	s0, [r7]
 8009e74:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8009e76:	4b2d      	ldr	r3, [pc, #180]	@ (8009f2c <Motor_Speed_LB+0xc4>)
 8009e78:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e7c:	ed97 7a00 	vldr	s14, [r7]
 8009e80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	dd03      	ble.n	8009e92 <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8009e8a:	4b28      	ldr	r3, [pc, #160]	@ (8009f2c <Motor_Speed_LB+0xc4>)
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	e012      	b.n	8009eb8 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 8009e92:	4b26      	ldr	r3, [pc, #152]	@ (8009f2c <Motor_Speed_LB+0xc4>)
 8009e94:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e98:	eef1 7a67 	vneg.f32	s15, s15
 8009e9c:	ed97 7a00 	vldr	s14, [r7]
 8009ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea8:	d506      	bpl.n	8009eb8 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8009eaa:	4b20      	ldr	r3, [pc, #128]	@ (8009f2c <Motor_Speed_LB+0xc4>)
 8009eac:	edd3 7a01 	vldr	s15, [r3, #4]
 8009eb0:	eef1 7a67 	vneg.f32	s15, s15
 8009eb4:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8009eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ebc:	ee07 3a90 	vmov	s15, r3
 8009ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ec4:	2001      	movs	r0, #1
 8009ec6:	edd7 0a00 	vldr	s1, [r7]
 8009eca:	eeb0 0a67 	vmov.f32	s0, s15
 8009ece:	f7ff fcc9 	bl	8009864 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Motor_feedback._PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8009ed2:	4b17      	ldr	r3, [pc, #92]	@ (8009f30 <Motor_Speed_LB+0xc8>)
 8009ed4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8009ed8:	4b14      	ldr	r3, [pc, #80]	@ (8009f2c <Motor_Speed_LB+0xc4>)
 8009eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8009ede:	4b15      	ldr	r3, [pc, #84]	@ (8009f34 <Motor_Speed_LB+0xcc>)
 8009ee0:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eec:	4b12      	ldr	r3, [pc, #72]	@ (8009f38 <Motor_Speed_LB+0xd0>)
 8009eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f02:	ee17 3a90 	vmov	r3, s15
 8009f06:	b21a      	sxth	r2, r3
 8009f08:	4b0c      	ldr	r3, [pc, #48]	@ (8009f3c <Motor_Speed_LB+0xd4>)
 8009f0a:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8009f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f3c <Motor_Speed_LB+0xd4>)
 8009f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff fe2c 	bl	8009b70 <Motor_DutyCycle_LB>

	return Motor_feedback._PID[1];
 8009f18:	4b05      	ldr	r3, [pc, #20]	@ (8009f30 <Motor_Speed_LB+0xc8>)
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1c:	ee07 3a90 	vmov	s15, r3
}
 8009f20:	eeb0 0a67 	vmov.f32	s0, s15
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000794 	.word	0x20000794
 8009f30:	200006bc 	.word	0x200006bc
 8009f34:	2000077c 	.word	0x2000077c
 8009f38:	200006fa 	.word	0x200006fa
 8009f3c:	20000824 	.word	0x20000824

08009f40 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	ed87 0a00 	vstr	s0, [r7]
 8009f4c:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8009f4e:	4b2d      	ldr	r3, [pc, #180]	@ (800a004 <Motor_Speed_RF+0xc4>)
 8009f50:	edd3 7a02 	vldr	s15, [r3, #8]
 8009f54:	ed97 7a00 	vldr	s14, [r7]
 8009f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f60:	dd03      	ble.n	8009f6a <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8009f62:	4b28      	ldr	r3, [pc, #160]	@ (800a004 <Motor_Speed_RF+0xc4>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	e012      	b.n	8009f90 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 8009f6a:	4b26      	ldr	r3, [pc, #152]	@ (800a004 <Motor_Speed_RF+0xc4>)
 8009f6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009f70:	eef1 7a67 	vneg.f32	s15, s15
 8009f74:	ed97 7a00 	vldr	s14, [r7]
 8009f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f80:	d506      	bpl.n	8009f90 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 8009f82:	4b20      	ldr	r3, [pc, #128]	@ (800a004 <Motor_Speed_RF+0xc4>)
 8009f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8009f88:	eef1 7a67 	vneg.f32	s15, s15
 8009f8c:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 8009f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f94:	ee07 3a90 	vmov	s15, r3
 8009f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f9c:	2002      	movs	r0, #2
 8009f9e:	edd7 0a00 	vldr	s1, [r7]
 8009fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8009fa6:	f7ff fc5d 	bl	8009864 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Motor_feedback._PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 8009faa:	4b17      	ldr	r3, [pc, #92]	@ (800a008 <Motor_Speed_RF+0xc8>)
 8009fac:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8009fb0:	4b14      	ldr	r3, [pc, #80]	@ (800a004 <Motor_Speed_RF+0xc4>)
 8009fb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8009fb6:	4b15      	ldr	r3, [pc, #84]	@ (800a00c <Motor_Speed_RF+0xcc>)
 8009fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8009fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc4:	4b12      	ldr	r3, [pc, #72]	@ (800a010 <Motor_Speed_RF+0xd0>)
 8009fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fda:	ee17 3a90 	vmov	r3, s15
 8009fde:	b21a      	sxth	r2, r3
 8009fe0:	4b0c      	ldr	r3, [pc, #48]	@ (800a014 <Motor_Speed_RF+0xd4>)
 8009fe2:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8009fe4:	4b0b      	ldr	r3, [pc, #44]	@ (800a014 <Motor_Speed_RF+0xd4>)
 8009fe6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fe1c 	bl	8009c28 <Motor_DutyCycle_RF>

	return Motor_feedback._PID[2];
 8009ff0:	4b05      	ldr	r3, [pc, #20]	@ (800a008 <Motor_Speed_RF+0xc8>)
 8009ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff4:	ee07 3a90 	vmov	s15, r3
}
 8009ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000794 	.word	0x20000794
 800a008:	200006bc 	.word	0x200006bc
 800a00c:	2000077c 	.word	0x2000077c
 800a010:	200006fc 	.word	0x200006fc
 800a014:	20000824 	.word	0x20000824

0800a018 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	ed87 0a00 	vstr	s0, [r7]
 800a024:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 800a026:	4b2d      	ldr	r3, [pc, #180]	@ (800a0dc <Motor_Speed_RB+0xc4>)
 800a028:	edd3 7a03 	vldr	s15, [r3, #12]
 800a02c:	ed97 7a00 	vldr	s14, [r7]
 800a030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	dd03      	ble.n	800a042 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 800a03a:	4b28      	ldr	r3, [pc, #160]	@ (800a0dc <Motor_Speed_RB+0xc4>)
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	603b      	str	r3, [r7, #0]
 800a040:	e012      	b.n	800a068 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 800a042:	4b26      	ldr	r3, [pc, #152]	@ (800a0dc <Motor_Speed_RB+0xc4>)
 800a044:	edd3 7a03 	vldr	s15, [r3, #12]
 800a048:	eef1 7a67 	vneg.f32	s15, s15
 800a04c:	ed97 7a00 	vldr	s14, [r7]
 800a050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a058:	d506      	bpl.n	800a068 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 800a05a:	4b20      	ldr	r3, [pc, #128]	@ (800a0dc <Motor_Speed_RB+0xc4>)
 800a05c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a060:	eef1 7a67 	vneg.f32	s15, s15
 800a064:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 800a068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a06c:	ee07 3a90 	vmov	s15, r3
 800a070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a074:	2003      	movs	r0, #3
 800a076:	edd7 0a00 	vldr	s1, [r7]
 800a07a:	eeb0 0a67 	vmov.f32	s0, s15
 800a07e:	f7ff fbf1 	bl	8009864 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Motor_feedback._PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 800a082:	4b17      	ldr	r3, [pc, #92]	@ (800a0e0 <Motor_Speed_RB+0xc8>)
 800a084:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800a088:	4b14      	ldr	r3, [pc, #80]	@ (800a0dc <Motor_Speed_RB+0xc4>)
 800a08a:	ed93 7a03 	vldr	s14, [r3, #12]
 800a08e:	4b15      	ldr	r3, [pc, #84]	@ (800a0e4 <Motor_Speed_RB+0xcc>)
 800a090:	edd3 7a03 	vldr	s15, [r3, #12]
 800a094:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a09c:	4b12      	ldr	r3, [pc, #72]	@ (800a0e8 <Motor_Speed_RB+0xd0>)
 800a09e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a0b2:	ee17 3a90 	vmov	r3, s15
 800a0b6:	b21a      	sxth	r2, r3
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ec <Motor_Speed_RB+0xd4>)
 800a0ba:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 800a0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a0ec <Motor_Speed_RB+0xd4>)
 800a0be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff fe0c 	bl	8009ce0 <Motor_DutyCycle_RB>

	return Motor_feedback._PID[3];
 800a0c8:	4b05      	ldr	r3, [pc, #20]	@ (800a0e0 <Motor_Speed_RB+0xc8>)
 800a0ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0cc:	ee07 3a90 	vmov	s15, r3
}
 800a0d0:	eeb0 0a67 	vmov.f32	s0, s15
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000794 	.word	0x20000794
 800a0e0:	200006bc 	.word	0x200006bc
 800a0e4:	2000077c 	.word	0x2000077c
 800a0e8:	200006fe 	.word	0x200006fe
 800a0ec:	20000824 	.word	0x20000824

0800a0f0 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a0fa:	edc7 0a02 	vstr	s1, [r7, #8]
 800a0fe:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 800a102:	4a07      	ldr	r2, [pc, #28]	@ (800a120 <Setup_Inverse_Kinematic+0x30>)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800a108:	4a06      	ldr	r2, [pc, #24]	@ (800a124 <Setup_Inverse_Kinematic+0x34>)
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 800a10e:	4a06      	ldr	r2, [pc, #24]	@ (800a128 <Setup_Inverse_Kinematic+0x38>)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6013      	str	r3, [r2, #0]
}
 800a114:	bf00      	nop
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	20000830 	.word	0x20000830
 800a124:	20000834 	.word	0x20000834
 800a128:	20000838 	.word	0x20000838

0800a12c <Inverse_Kinematic_Lock_Direction>:
}




void Inverse_Kinematic_Lock_Direction(float Vx ,float Vy ,float wz ,float head_ing){
 800a12c:	b5b0      	push	{r4, r5, r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	ed87 0a03 	vstr	s0, [r7, #12]
 800a136:	edc7 0a02 	vstr	s1, [r7, #8]
 800a13a:	ed87 1a01 	vstr	s2, [r7, #4]
 800a13e:	edc7 1a00 	vstr	s3, [r7]
	_r = (float)(sqrt((Vx * Vx) + (Vy * Vy)));
 800a142:	edd7 7a03 	vldr	s15, [r7, #12]
 800a146:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a14a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a14e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a152:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a156:	ee17 0a90 	vmov	r0, s15
 800a15a:	f7f6 f999 	bl	8000490 <__aeabi_f2d>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	ec43 2b10 	vmov	d0, r2, r3
 800a166:	f002 fe97 	bl	800ce98 <sqrt>
 800a16a:	ec53 2b10 	vmov	r2, r3, d0
 800a16e:	4610      	mov	r0, r2
 800a170:	4619      	mov	r1, r3
 800a172:	f7f6 fcbd 	bl	8000af0 <__aeabi_d2f>
 800a176:	4603      	mov	r3, r0
 800a178:	4a71      	ldr	r2, [pc, #452]	@ (800a340 <Inverse_Kinematic_Lock_Direction+0x214>)
 800a17a:	6013      	str	r3, [r2, #0]
    _Rad_s = (float)(atan2(Vy, Vx)) + head_ing;
 800a17c:	68b8      	ldr	r0, [r7, #8]
 800a17e:	f7f6 f987 	bl	8000490 <__aeabi_f2d>
 800a182:	4604      	mov	r4, r0
 800a184:	460d      	mov	r5, r1
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7f6 f982 	bl	8000490 <__aeabi_f2d>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	ec43 2b11 	vmov	d1, r2, r3
 800a194:	ec45 4b10 	vmov	d0, r4, r5
 800a198:	f002 fe7c 	bl	800ce94 <atan2>
 800a19c:	ec53 2b10 	vmov	r2, r3, d0
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	f7f6 fca4 	bl	8000af0 <__aeabi_d2f>
 800a1a8:	ee07 0a10 	vmov	s14, r0
 800a1ac:	edd7 7a00 	vldr	s15, [r7]
 800a1b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1b4:	4b63      	ldr	r3, [pc, #396]	@ (800a344 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a1b6:	edc3 7a00 	vstr	s15, [r3]

    __Vx = (_r * cos(_Rad_s));
 800a1ba:	4b61      	ldr	r3, [pc, #388]	@ (800a340 <Inverse_Kinematic_Lock_Direction+0x214>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f6 f966 	bl	8000490 <__aeabi_f2d>
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	4b5e      	ldr	r3, [pc, #376]	@ (800a344 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f6 f95f 	bl	8000490 <__aeabi_f2d>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	ec43 2b10 	vmov	d0, r2, r3
 800a1da:	f002 fe89 	bl	800cef0 <cos>
 800a1de:	ec53 2b10 	vmov	r2, r3, d0
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f6 f9ab 	bl	8000540 <__aeabi_dmul>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f7f6 fc7d 	bl	8000af0 <__aeabi_d2f>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4a53      	ldr	r2, [pc, #332]	@ (800a348 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a1fa:	6013      	str	r3, [r2, #0]
    __Vy = (_r * sin(_Rad_s));
 800a1fc:	4b50      	ldr	r3, [pc, #320]	@ (800a340 <Inverse_Kinematic_Lock_Direction+0x214>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7f6 f945 	bl	8000490 <__aeabi_f2d>
 800a206:	4604      	mov	r4, r0
 800a208:	460d      	mov	r5, r1
 800a20a:	4b4e      	ldr	r3, [pc, #312]	@ (800a344 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f6 f93e 	bl	8000490 <__aeabi_f2d>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	ec43 2b10 	vmov	d0, r2, r3
 800a21c:	f002 febc 	bl	800cf98 <sin>
 800a220:	ec53 2b10 	vmov	r2, r3, d0
 800a224:	4620      	mov	r0, r4
 800a226:	4629      	mov	r1, r5
 800a228:	f7f6 f98a 	bl	8000540 <__aeabi_dmul>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4610      	mov	r0, r2
 800a232:	4619      	mov	r1, r3
 800a234:	f7f6 fc5c 	bl	8000af0 <__aeabi_d2f>
 800a238:	4603      	mov	r3, r0
 800a23a:	4a44      	ldr	r2, [pc, #272]	@ (800a34c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a23c:	6013      	str	r3, [r2, #0]

	w_LF = (__Vx - __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a23e:	4b42      	ldr	r3, [pc, #264]	@ (800a348 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a240:	ed93 7a00 	vldr	s14, [r3]
 800a244:	4b41      	ldr	r3, [pc, #260]	@ (800a34c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a246:	edd3 7a00 	vldr	s15, [r3]
 800a24a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a24e:	4b40      	ldr	r3, [pc, #256]	@ (800a350 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a250:	edd3 6a00 	vldr	s13, [r3]
 800a254:	4b3f      	ldr	r3, [pc, #252]	@ (800a354 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a256:	edd3 7a00 	vldr	s15, [r3]
 800a25a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a25e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a266:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a26a:	4b3b      	ldr	r3, [pc, #236]	@ (800a358 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a26c:	ed93 7a00 	vldr	s14, [r3]
 800a270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a274:	4b39      	ldr	r3, [pc, #228]	@ (800a35c <Inverse_Kinematic_Lock_Direction+0x230>)
 800a276:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(__Vx + __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a27a:	4b33      	ldr	r3, [pc, #204]	@ (800a348 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a27c:	ed93 7a00 	vldr	s14, [r3]
 800a280:	4b32      	ldr	r3, [pc, #200]	@ (800a34c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a282:	edd3 7a00 	vldr	s15, [r3]
 800a286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a28a:	4b31      	ldr	r3, [pc, #196]	@ (800a350 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a28c:	edd3 6a00 	vldr	s13, [r3]
 800a290:	4b30      	ldr	r3, [pc, #192]	@ (800a354 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a292:	edd3 7a00 	vldr	s15, [r3]
 800a296:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a29a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a29e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2a6:	eef1 6a67 	vneg.f32	s13, s15
 800a2aa:	4b2b      	ldr	r3, [pc, #172]	@ (800a358 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a2ac:	ed93 7a00 	vldr	s14, [r3]
 800a2b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b4:	4b2a      	ldr	r3, [pc, #168]	@ (800a360 <Inverse_Kinematic_Lock_Direction+0x234>)
 800a2b6:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (__Vx + __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a2ba:	4b23      	ldr	r3, [pc, #140]	@ (800a348 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a2bc:	ed93 7a00 	vldr	s14, [r3]
 800a2c0:	4b22      	ldr	r3, [pc, #136]	@ (800a34c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a2c2:	edd3 7a00 	vldr	s15, [r3]
 800a2c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2ca:	4b21      	ldr	r3, [pc, #132]	@ (800a350 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a2cc:	edd3 6a00 	vldr	s13, [r3]
 800a2d0:	4b20      	ldr	r3, [pc, #128]	@ (800a354 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a2d2:	edd3 7a00 	vldr	s15, [r3]
 800a2d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a2da:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a2e6:	4b1c      	ldr	r3, [pc, #112]	@ (800a358 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a2e8:	ed93 7a00 	vldr	s14, [r3]
 800a2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a364 <Inverse_Kinematic_Lock_Direction+0x238>)
 800a2f2:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(__Vx - __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a2f6:	4b14      	ldr	r3, [pc, #80]	@ (800a348 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a2f8:	ed93 7a00 	vldr	s14, [r3]
 800a2fc:	4b13      	ldr	r3, [pc, #76]	@ (800a34c <Inverse_Kinematic_Lock_Direction+0x220>)
 800a2fe:	edd3 7a00 	vldr	s15, [r3]
 800a302:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a306:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <Inverse_Kinematic_Lock_Direction+0x224>)
 800a308:	edd3 6a00 	vldr	s13, [r3]
 800a30c:	4b11      	ldr	r3, [pc, #68]	@ (800a354 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a30e:	edd3 7a00 	vldr	s15, [r3]
 800a312:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a316:	edd7 7a01 	vldr	s15, [r7, #4]
 800a31a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a31e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a322:	eef1 6a67 	vneg.f32	s13, s15
 800a326:	4b0c      	ldr	r3, [pc, #48]	@ (800a358 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a328:	ed93 7a00 	vldr	s14, [r3]
 800a32c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a330:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <Inverse_Kinematic_Lock_Direction+0x23c>)
 800a332:	edc3 7a00 	vstr	s15, [r3]
}
 800a336:	bf00      	nop
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bdb0      	pop	{r4, r5, r7, pc}
 800a33e:	bf00      	nop
 800a340:	2000084c 	.word	0x2000084c
 800a344:	20000850 	.word	0x20000850
 800a348:	20000854 	.word	0x20000854
 800a34c:	20000858 	.word	0x20000858
 800a350:	20000830 	.word	0x20000830
 800a354:	20000834 	.word	0x20000834
 800a358:	20000838 	.word	0x20000838
 800a35c:	2000083c 	.word	0x2000083c
 800a360:	20000844 	.word	0x20000844
 800a364:	20000840 	.word	0x20000840
 800a368:	20000848 	.word	0x20000848

0800a36c <get_w_LF>:

float get_w_LF(){
 800a36c:	b480      	push	{r7}
 800a36e:	af00      	add	r7, sp, #0
	return w_LF;
 800a370:	4b04      	ldr	r3, [pc, #16]	@ (800a384 <get_w_LF+0x18>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	ee07 3a90 	vmov	s15, r3
}
 800a378:	eeb0 0a67 	vmov.f32	s0, s15
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	2000083c 	.word	0x2000083c

0800a388 <get_w_LB>:

float get_w_LB(){
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
	return w_LB;
 800a38c:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <get_w_LB+0x18>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	ee07 3a90 	vmov	s15, r3
}
 800a394:	eeb0 0a67 	vmov.f32	s0, s15
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	20000840 	.word	0x20000840

0800a3a4 <get_w_RF>:

float get_w_RF(){
 800a3a4:	b480      	push	{r7}
 800a3a6:	af00      	add	r7, sp, #0
	return w_RF;
 800a3a8:	4b04      	ldr	r3, [pc, #16]	@ (800a3bc <get_w_RF+0x18>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	ee07 3a90 	vmov	s15, r3
}
 800a3b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20000844 	.word	0x20000844

0800a3c0 <get_w_RB>:

float get_w_RB(){
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
	return w_RB;
 800a3c4:	4b04      	ldr	r3, [pc, #16]	@ (800a3d8 <get_w_RB+0x18>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	ee07 3a90 	vmov	s15, r3
}
 800a3cc:	eeb0 0a67 	vmov.f32	s0, s15
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	20000848 	.word	0x20000848

0800a3dc <Setup_Ramp_Count>:
float _Ki_degree;
float _Kd_degree;
float _max_Count;
float _DutyCycle_MAX;

void Setup_Ramp_Count(float Kp_Count ,float Ki_Count ,float Kd_Count,float max_Count ,float DutyCycle_MAX){
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	ed87 0a05 	vstr	s0, [r7, #20]
 800a3e6:	edc7 0a04 	vstr	s1, [r7, #16]
 800a3ea:	ed87 1a03 	vstr	s2, [r7, #12]
 800a3ee:	edc7 1a02 	vstr	s3, [r7, #8]
 800a3f2:	ed87 2a01 	vstr	s4, [r7, #4]
	_Kp_degree = Kp_Count;
 800a3f6:	4a0a      	ldr	r2, [pc, #40]	@ (800a420 <Setup_Ramp_Count+0x44>)
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	6013      	str	r3, [r2, #0]
	_Ki_degree = Ki_Count;
 800a3fc:	4a09      	ldr	r2, [pc, #36]	@ (800a424 <Setup_Ramp_Count+0x48>)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	6013      	str	r3, [r2, #0]
	_Kd_degree = Kd_Count;
 800a402:	4a09      	ldr	r2, [pc, #36]	@ (800a428 <Setup_Ramp_Count+0x4c>)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6013      	str	r3, [r2, #0]
	_max_Count = max_Count;
 800a408:	4a08      	ldr	r2, [pc, #32]	@ (800a42c <Setup_Ramp_Count+0x50>)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	6013      	str	r3, [r2, #0]
	_DutyCycle_MAX = DutyCycle_MAX;
 800a40e:	4a08      	ldr	r2, [pc, #32]	@ (800a430 <Setup_Ramp_Count+0x54>)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6013      	str	r3, [r2, #0]
}
 800a414:	bf00      	nop
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	2000085c 	.word	0x2000085c
 800a424:	20000860 	.word	0x20000860
 800a428:	20000864 	.word	0x20000864
 800a42c:	20000868 	.word	0x20000868
 800a430:	2000086c 	.word	0x2000086c

0800a434 <UART_Runner>:

uint8_t Status_UART;

UART_HandleTypeDef *UART;

uint8_t UART_Runner(UART_HandleTypeDef *UART){
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	if (((uwTick - last_uart_data_time) < UART_TIMEOUT_MS)
 800a43c:	4b32      	ldr	r3, [pc, #200]	@ (800a508 <UART_Runner+0xd4>)
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	4b32      	ldr	r3, [pc, #200]	@ (800a50c <UART_Runner+0xd8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	1ad2      	subs	r2, r2, r3
 800a446:	4b32      	ldr	r3, [pc, #200]	@ (800a510 <UART_Runner+0xdc>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d211      	bcs.n	800a472 <UART_Runner+0x3e>
			&& (Str_PS2.Header[0] == 'R') && (Str_PS2.Header[1] == 'B')) {
 800a44e:	4b31      	ldr	r3, [pc, #196]	@ (800a514 <UART_Runner+0xe0>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b52      	cmp	r3, #82	@ 0x52
 800a454:	d10d      	bne.n	800a472 <UART_Runner+0x3e>
 800a456:	4b2f      	ldr	r3, [pc, #188]	@ (800a514 <UART_Runner+0xe0>)
 800a458:	785b      	ldrb	r3, [r3, #1]
 800a45a:	2b42      	cmp	r3, #66	@ 0x42
 800a45c:	d109      	bne.n	800a472 <UART_Runner+0x3e>
		Status_UART = 1;
 800a45e:	4b2e      	ldr	r3, [pc, #184]	@ (800a518 <UART_Runner+0xe4>)
 800a460:	2201      	movs	r2, #1
 800a462:	701a      	strb	r2, [r3, #0]

		Str_PS2.Header[0] = 0;
 800a464:	4b2b      	ldr	r3, [pc, #172]	@ (800a514 <UART_Runner+0xe0>)
 800a466:	2200      	movs	r2, #0
 800a468:	701a      	strb	r2, [r3, #0]
		Str_PS2.Header[1] = 0;
 800a46a:	4b2a      	ldr	r3, [pc, #168]	@ (800a514 <UART_Runner+0xe0>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	705a      	strb	r2, [r3, #1]
 800a470:	e043      	b.n	800a4fa <UART_Runner+0xc6>
	} else {
		if (!uart_resetting && ((uwTick - last_uart_data_time) > UART_TIMEOUT_MS)) {
 800a472:	4b2a      	ldr	r3, [pc, #168]	@ (800a51c <UART_Runner+0xe8>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d13f      	bne.n	800a4fa <UART_Runner+0xc6>
 800a47a:	4b23      	ldr	r3, [pc, #140]	@ (800a508 <UART_Runner+0xd4>)
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	4b23      	ldr	r3, [pc, #140]	@ (800a50c <UART_Runner+0xd8>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	1ad2      	subs	r2, r2, r3
 800a484:	4b22      	ldr	r3, [pc, #136]	@ (800a510 <UART_Runner+0xdc>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d936      	bls.n	800a4fa <UART_Runner+0xc6>
			uart_resetting = 1;
 800a48c:	4b23      	ldr	r3, [pc, #140]	@ (800a51c <UART_Runner+0xe8>)
 800a48e:	2201      	movs	r2, #1
 800a490:	701a      	strb	r2, [r3, #0]

			HAL_UART_DeInit(UART);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7fc f978 	bl	8006788 <HAL_UART_DeInit>
			HAL_Delay(10);
 800a498:	200a      	movs	r0, #10
 800a49a:	f7f8 fb05 	bl	8002aa8 <HAL_Delay>

			UART->Instance = USART2;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a1f      	ldr	r2, [pc, #124]	@ (800a520 <UART_Runner+0xec>)
 800a4a2:	601a      	str	r2, [r3, #0]
			UART->Init.BaudRate = 115200;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a4aa:	605a      	str	r2, [r3, #4]
			UART->Init.WordLength = UART_WORDLENGTH_8B;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	609a      	str	r2, [r3, #8]
			UART->Init.StopBits = UART_STOPBITS_1;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	60da      	str	r2, [r3, #12]
			UART->Init.Parity = UART_PARITY_NONE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	611a      	str	r2, [r3, #16]
			UART->Init.Mode = UART_MODE_TX_RX;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	220c      	movs	r2, #12
 800a4c2:	615a      	str	r2, [r3, #20]
			UART->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	619a      	str	r2, [r3, #24]
			UART->Init.OverSampling = UART_OVERSAMPLING_16;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	61da      	str	r2, [r3, #28]
			if (HAL_UART_Init(UART) != HAL_OK) {
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7fc f909 	bl	80066e8 <HAL_UART_Init>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <UART_Runner+0xac>
				Error_Handler();
 800a4dc:	f7f7 fce8 	bl	8001eb0 <Error_Handler>
			}

			HAL_UART_Receive_IT(UART, (uint8_t*) &Str_PS2, sizeof(Str_PS2));
 800a4e0:	2208      	movs	r2, #8
 800a4e2:	490c      	ldr	r1, [pc, #48]	@ (800a514 <UART_Runner+0xe0>)
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7fc f981 	bl	80067ec <HAL_UART_Receive_IT>

			memset(&Str_PS2, 0, sizeof(Str_PS2));
 800a4ea:	2208      	movs	r2, #8
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	4809      	ldr	r0, [pc, #36]	@ (800a514 <UART_Runner+0xe0>)
 800a4f0:	f002 fc9e 	bl	800ce30 <memset>

			Status_UART = 0;
 800a4f4:	4b08      	ldr	r3, [pc, #32]	@ (800a518 <UART_Runner+0xe4>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
		}
	}
	return Status_UART;
 800a4fa:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <UART_Runner+0xe4>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000688 	.word	0x20000688
 800a50c:	20000870 	.word	0x20000870
 800a510:	20000018 	.word	0x20000018
 800a514:	20000670 	.word	0x20000670
 800a518:	20000875 	.word	0x20000875
 800a51c:	20000874 	.word	0x20000874
 800a520:	40004400 	.word	0x40004400

0800a524 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a530:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a534:	f002 fc38 	bl	800cda8 <USBD_static_malloc>
 800a538:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d109      	bne.n	800a554 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	32b0      	adds	r2, #176	@ 0xb0
 800a54a:	2100      	movs	r1, #0
 800a54c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a550:	2302      	movs	r3, #2
 800a552:	e0d4      	b.n	800a6fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a554:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a558:	2100      	movs	r1, #0
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f002 fc68 	bl	800ce30 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	32b0      	adds	r2, #176	@ 0xb0
 800a56a:	68f9      	ldr	r1, [r7, #12]
 800a56c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	32b0      	adds	r2, #176	@ 0xb0
 800a57a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	7c1b      	ldrb	r3, [r3, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d138      	bne.n	800a5fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a58c:	4b5e      	ldr	r3, [pc, #376]	@ (800a708 <USBD_CDC_Init+0x1e4>)
 800a58e:	7819      	ldrb	r1, [r3, #0]
 800a590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a594:	2202      	movs	r2, #2
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f002 fae3 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a59c:	4b5a      	ldr	r3, [pc, #360]	@ (800a708 <USBD_CDC_Init+0x1e4>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f003 020f 	and.w	r2, r3, #15
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	440b      	add	r3, r1
 800a5b0:	3324      	adds	r3, #36	@ 0x24
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a5b6:	4b55      	ldr	r3, [pc, #340]	@ (800a70c <USBD_CDC_Init+0x1e8>)
 800a5b8:	7819      	ldrb	r1, [r3, #0]
 800a5ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5be:	2202      	movs	r2, #2
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f002 face 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a5c6:	4b51      	ldr	r3, [pc, #324]	@ (800a70c <USBD_CDC_Init+0x1e8>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	f003 020f 	and.w	r2, r3, #15
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	440b      	add	r3, r1
 800a5da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a5de:	2201      	movs	r2, #1
 800a5e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5e2:	4b4b      	ldr	r3, [pc, #300]	@ (800a710 <USBD_CDC_Init+0x1ec>)
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	f003 020f 	and.w	r2, r3, #15
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	440b      	add	r3, r1
 800a5f6:	3326      	adds	r3, #38	@ 0x26
 800a5f8:	2210      	movs	r2, #16
 800a5fa:	801a      	strh	r2, [r3, #0]
 800a5fc:	e035      	b.n	800a66a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a5fe:	4b42      	ldr	r3, [pc, #264]	@ (800a708 <USBD_CDC_Init+0x1e4>)
 800a600:	7819      	ldrb	r1, [r3, #0]
 800a602:	2340      	movs	r3, #64	@ 0x40
 800a604:	2202      	movs	r2, #2
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f002 faab 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a60c:	4b3e      	ldr	r3, [pc, #248]	@ (800a708 <USBD_CDC_Init+0x1e4>)
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	f003 020f 	and.w	r2, r3, #15
 800a614:	6879      	ldr	r1, [r7, #4]
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	440b      	add	r3, r1
 800a620:	3324      	adds	r3, #36	@ 0x24
 800a622:	2201      	movs	r2, #1
 800a624:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a626:	4b39      	ldr	r3, [pc, #228]	@ (800a70c <USBD_CDC_Init+0x1e8>)
 800a628:	7819      	ldrb	r1, [r3, #0]
 800a62a:	2340      	movs	r3, #64	@ 0x40
 800a62c:	2202      	movs	r2, #2
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f002 fa97 	bl	800cb62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a634:	4b35      	ldr	r3, [pc, #212]	@ (800a70c <USBD_CDC_Init+0x1e8>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f003 020f 	and.w	r2, r3, #15
 800a63c:	6879      	ldr	r1, [r7, #4]
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	440b      	add	r3, r1
 800a648:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a64c:	2201      	movs	r2, #1
 800a64e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a650:	4b2f      	ldr	r3, [pc, #188]	@ (800a710 <USBD_CDC_Init+0x1ec>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	f003 020f 	and.w	r2, r3, #15
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	3326      	adds	r3, #38	@ 0x26
 800a666:	2210      	movs	r2, #16
 800a668:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a66a:	4b29      	ldr	r3, [pc, #164]	@ (800a710 <USBD_CDC_Init+0x1ec>)
 800a66c:	7819      	ldrb	r1, [r3, #0]
 800a66e:	2308      	movs	r3, #8
 800a670:	2203      	movs	r2, #3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f002 fa75 	bl	800cb62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a678:	4b25      	ldr	r3, [pc, #148]	@ (800a710 <USBD_CDC_Init+0x1ec>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	f003 020f 	and.w	r2, r3, #15
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	3324      	adds	r3, #36	@ 0x24
 800a68e:	2201      	movs	r2, #1
 800a690:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	33b0      	adds	r3, #176	@ 0xb0
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	e018      	b.n	800a6fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7c1b      	ldrb	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10a      	bne.n	800a6ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a70c <USBD_CDC_Init+0x1e8>)
 800a6d6:	7819      	ldrb	r1, [r3, #0]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f002 fb2c 	bl	800cd40 <USBD_LL_PrepareReceive>
 800a6e8:	e008      	b.n	800a6fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6ea:	4b08      	ldr	r3, [pc, #32]	@ (800a70c <USBD_CDC_Init+0x1e8>)
 800a6ec:	7819      	ldrb	r1, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6f4:	2340      	movs	r3, #64	@ 0x40
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f002 fb22 	bl	800cd40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200000a3 	.word	0x200000a3
 800a70c:	200000a4 	.word	0x200000a4
 800a710:	200000a5 	.word	0x200000a5

0800a714 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a720:	4b3a      	ldr	r3, [pc, #232]	@ (800a80c <USBD_CDC_DeInit+0xf8>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f002 fa41 	bl	800cbae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a72c:	4b37      	ldr	r3, [pc, #220]	@ (800a80c <USBD_CDC_DeInit+0xf8>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 020f 	and.w	r2, r3, #15
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	3324      	adds	r3, #36	@ 0x24
 800a742:	2200      	movs	r2, #0
 800a744:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a746:	4b32      	ldr	r3, [pc, #200]	@ (800a810 <USBD_CDC_DeInit+0xfc>)
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f002 fa2e 	bl	800cbae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a752:	4b2f      	ldr	r3, [pc, #188]	@ (800a810 <USBD_CDC_DeInit+0xfc>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	f003 020f 	and.w	r2, r3, #15
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	440b      	add	r3, r1
 800a766:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a76a:	2200      	movs	r2, #0
 800a76c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a76e:	4b29      	ldr	r3, [pc, #164]	@ (800a814 <USBD_CDC_DeInit+0x100>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 fa1a 	bl	800cbae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a77a:	4b26      	ldr	r3, [pc, #152]	@ (800a814 <USBD_CDC_DeInit+0x100>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	f003 020f 	and.w	r2, r3, #15
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	3324      	adds	r3, #36	@ 0x24
 800a790:	2200      	movs	r2, #0
 800a792:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a794:	4b1f      	ldr	r3, [pc, #124]	@ (800a814 <USBD_CDC_DeInit+0x100>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f003 020f 	and.w	r2, r3, #15
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	440b      	add	r3, r1
 800a7a8:	3326      	adds	r3, #38	@ 0x26
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	32b0      	adds	r2, #176	@ 0xb0
 800a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01f      	beq.n	800a800 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	33b0      	adds	r3, #176	@ 0xb0
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	32b0      	adds	r2, #176	@ 0xb0
 800a7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f002 faee 	bl	800cdc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	32b0      	adds	r2, #176	@ 0xb0
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	200000a3 	.word	0x200000a3
 800a810:	200000a4 	.word	0x200000a4
 800a814:	200000a5 	.word	0x200000a5

0800a818 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	32b0      	adds	r2, #176	@ 0xb0
 800a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a830:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a836:	2300      	movs	r3, #0
 800a838:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a844:	2303      	movs	r3, #3
 800a846:	e0bf      	b.n	800a9c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a850:	2b00      	cmp	r3, #0
 800a852:	d050      	beq.n	800a8f6 <USBD_CDC_Setup+0xde>
 800a854:	2b20      	cmp	r3, #32
 800a856:	f040 80af 	bne.w	800a9b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	88db      	ldrh	r3, [r3, #6]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d03a      	beq.n	800a8d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	b25b      	sxtb	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da1b      	bge.n	800a8a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	33b0      	adds	r3, #176	@ 0xb0
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a882:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	88d2      	ldrh	r2, [r2, #6]
 800a888:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	88db      	ldrh	r3, [r3, #6]
 800a88e:	2b07      	cmp	r3, #7
 800a890:	bf28      	it	cs
 800a892:	2307      	movcs	r3, #7
 800a894:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	89fa      	ldrh	r2, [r7, #14]
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 fd53 	bl	800c348 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a8a2:	e090      	b.n	800a9c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	785a      	ldrb	r2, [r3, #1]
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	88db      	ldrh	r3, [r3, #6]
 800a8b2:	2b3f      	cmp	r3, #63	@ 0x3f
 800a8b4:	d803      	bhi.n	800a8be <USBD_CDC_Setup+0xa6>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	88db      	ldrh	r3, [r3, #6]
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	e000      	b.n	800a8c0 <USBD_CDC_Setup+0xa8>
 800a8be:	2240      	movs	r2, #64	@ 0x40
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a8c6:	6939      	ldr	r1, [r7, #16]
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fd65 	bl	800c3a0 <USBD_CtlPrepareRx>
      break;
 800a8d6:	e076      	b.n	800a9c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	33b0      	adds	r3, #176	@ 0xb0
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	7850      	ldrb	r0, [r2, #1]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	4798      	blx	r3
      break;
 800a8f4:	e067      	b.n	800a9c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	785b      	ldrb	r3, [r3, #1]
 800a8fa:	2b0b      	cmp	r3, #11
 800a8fc:	d851      	bhi.n	800a9a2 <USBD_CDC_Setup+0x18a>
 800a8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a904 <USBD_CDC_Setup+0xec>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a935 	.word	0x0800a935
 800a908:	0800a9b1 	.word	0x0800a9b1
 800a90c:	0800a9a3 	.word	0x0800a9a3
 800a910:	0800a9a3 	.word	0x0800a9a3
 800a914:	0800a9a3 	.word	0x0800a9a3
 800a918:	0800a9a3 	.word	0x0800a9a3
 800a91c:	0800a9a3 	.word	0x0800a9a3
 800a920:	0800a9a3 	.word	0x0800a9a3
 800a924:	0800a9a3 	.word	0x0800a9a3
 800a928:	0800a9a3 	.word	0x0800a9a3
 800a92c:	0800a95f 	.word	0x0800a95f
 800a930:	0800a989 	.word	0x0800a989
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d107      	bne.n	800a950 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a940:	f107 030a 	add.w	r3, r7, #10
 800a944:	2202      	movs	r2, #2
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 fcfd 	bl	800c348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a94e:	e032      	b.n	800a9b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 fc7b 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	75fb      	strb	r3, [r7, #23]
          break;
 800a95c:	e02b      	b.n	800a9b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b03      	cmp	r3, #3
 800a968:	d107      	bne.n	800a97a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a96a:	f107 030d 	add.w	r3, r7, #13
 800a96e:	2201      	movs	r2, #1
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 fce8 	bl	800c348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a978:	e01d      	b.n	800a9b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 fc66 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a982:	2303      	movs	r3, #3
 800a984:	75fb      	strb	r3, [r7, #23]
          break;
 800a986:	e016      	b.n	800a9b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b03      	cmp	r3, #3
 800a992:	d00f      	beq.n	800a9b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 fc59 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a99c:	2303      	movs	r3, #3
 800a99e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a9a0:	e008      	b.n	800a9b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 fc52 	bl	800c24e <USBD_CtlError>
          ret = USBD_FAIL;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a9ae:	e002      	b.n	800a9b6 <USBD_CDC_Setup+0x19e>
          break;
 800a9b0:	bf00      	nop
 800a9b2:	e008      	b.n	800a9c6 <USBD_CDC_Setup+0x1ae>
          break;
 800a9b4:	bf00      	nop
      }
      break;
 800a9b6:	e006      	b.n	800a9c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 fc47 	bl	800c24e <USBD_CtlError>
      ret = USBD_FAIL;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	32b0      	adds	r2, #176	@ 0xb0
 800a9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e065      	b.n	800aac6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	32b0      	adds	r2, #176	@ 0xb0
 800aa04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa0a:	78fb      	ldrb	r3, [r7, #3]
 800aa0c:	f003 020f 	and.w	r2, r3, #15
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	440b      	add	r3, r1
 800aa1c:	3318      	adds	r3, #24
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d02f      	beq.n	800aa84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	f003 020f 	and.w	r2, r3, #15
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	3318      	adds	r3, #24
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	78fb      	ldrb	r3, [r7, #3]
 800aa3c:	f003 010f 	and.w	r1, r3, #15
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	460b      	mov	r3, r1
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	440b      	add	r3, r1
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4403      	add	r3, r0
 800aa4c:	331c      	adds	r3, #28
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa54:	fb01 f303 	mul.w	r3, r1, r3
 800aa58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d112      	bne.n	800aa84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	f003 020f 	and.w	r2, r3, #15
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	440b      	add	r3, r1
 800aa70:	3318      	adds	r3, #24
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa76:	78f9      	ldrb	r1, [r7, #3]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f002 f93e 	bl	800ccfe <USBD_LL_Transmit>
 800aa82:	e01f      	b.n	800aac4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	33b0      	adds	r3, #176	@ 0xb0
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d010      	beq.n	800aac4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	33b0      	adds	r3, #176	@ 0xb0
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800aac0:	78fa      	ldrb	r2, [r7, #3]
 800aac2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	32b0      	adds	r2, #176	@ 0xb0
 800aae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	32b0      	adds	r2, #176	@ 0xb0
 800aaf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e01a      	b.n	800ab36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f002 f93c 	bl	800cd82 <USBD_LL_GetRxDataSize>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	33b0      	adds	r3, #176	@ 0xb0
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab30:	4611      	mov	r1, r2
 800ab32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	32b0      	adds	r2, #176	@ 0xb0
 800ab50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e024      	b.n	800abaa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	33b0      	adds	r3, #176	@ 0xb0
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d019      	beq.n	800aba8 <USBD_CDC_EP0_RxReady+0x6a>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ab7a:	2bff      	cmp	r3, #255	@ 0xff
 800ab7c:	d014      	beq.n	800aba8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	33b0      	adds	r3, #176	@ 0xb0
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ab96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	22ff      	movs	r2, #255	@ 0xff
 800aba4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abbc:	2182      	movs	r1, #130	@ 0x82
 800abbe:	4818      	ldr	r0, [pc, #96]	@ (800ac20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abc0:	f000 fd0f 	bl	800b5e2 <USBD_GetEpDesc>
 800abc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abc6:	2101      	movs	r1, #1
 800abc8:	4815      	ldr	r0, [pc, #84]	@ (800ac20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abca:	f000 fd0a 	bl	800b5e2 <USBD_GetEpDesc>
 800abce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abd0:	2181      	movs	r1, #129	@ 0x81
 800abd2:	4813      	ldr	r0, [pc, #76]	@ (800ac20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abd4:	f000 fd05 	bl	800b5e2 <USBD_GetEpDesc>
 800abd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2210      	movs	r2, #16
 800abe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2200      	movs	r2, #0
 800abf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abf4:	711a      	strb	r2, [r3, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac08:	711a      	strb	r2, [r3, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2243      	movs	r2, #67	@ 0x43
 800ac12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac14:	4b02      	ldr	r3, [pc, #8]	@ (800ac20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000060 	.word	0x20000060

0800ac24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac2c:	2182      	movs	r1, #130	@ 0x82
 800ac2e:	4818      	ldr	r0, [pc, #96]	@ (800ac90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac30:	f000 fcd7 	bl	800b5e2 <USBD_GetEpDesc>
 800ac34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac36:	2101      	movs	r1, #1
 800ac38:	4815      	ldr	r0, [pc, #84]	@ (800ac90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac3a:	f000 fcd2 	bl	800b5e2 <USBD_GetEpDesc>
 800ac3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac40:	2181      	movs	r1, #129	@ 0x81
 800ac42:	4813      	ldr	r0, [pc, #76]	@ (800ac90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac44:	f000 fccd 	bl	800b5e2 <USBD_GetEpDesc>
 800ac48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2210      	movs	r2, #16
 800ac54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d006      	beq.n	800ac6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	711a      	strb	r2, [r3, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f042 0202 	orr.w	r2, r2, #2
 800ac68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d006      	beq.n	800ac7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	711a      	strb	r2, [r3, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f042 0202 	orr.w	r2, r2, #2
 800ac7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2243      	movs	r2, #67	@ 0x43
 800ac82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac84:	4b02      	ldr	r3, [pc, #8]	@ (800ac90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000060 	.word	0x20000060

0800ac94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac9c:	2182      	movs	r1, #130	@ 0x82
 800ac9e:	4818      	ldr	r0, [pc, #96]	@ (800ad00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aca0:	f000 fc9f 	bl	800b5e2 <USBD_GetEpDesc>
 800aca4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aca6:	2101      	movs	r1, #1
 800aca8:	4815      	ldr	r0, [pc, #84]	@ (800ad00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acaa:	f000 fc9a 	bl	800b5e2 <USBD_GetEpDesc>
 800acae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acb0:	2181      	movs	r1, #129	@ 0x81
 800acb2:	4813      	ldr	r0, [pc, #76]	@ (800ad00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acb4:	f000 fc95 	bl	800b5e2 <USBD_GetEpDesc>
 800acb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2210      	movs	r2, #16
 800acc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d006      	beq.n	800acda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2200      	movs	r2, #0
 800acd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acd4:	711a      	strb	r2, [r3, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d006      	beq.n	800acee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ace8:	711a      	strb	r2, [r3, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2243      	movs	r2, #67	@ 0x43
 800acf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acf4:	4b02      	ldr	r3, [pc, #8]	@ (800ad00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20000060 	.word	0x20000060

0800ad04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	220a      	movs	r2, #10
 800ad10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad12:	4b03      	ldr	r3, [pc, #12]	@ (800ad20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	2000001c 	.word	0x2000001c

0800ad24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e009      	b.n	800ad4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	33b0      	adds	r3, #176	@ 0xb0
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	32b0      	adds	r2, #176	@ 0xb0
 800ad6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e008      	b.n	800ad90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	371c      	adds	r7, #28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	32b0      	adds	r2, #176	@ 0xb0
 800adb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e004      	b.n	800adca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	683a      	ldr	r2, [r7, #0]
 800adc4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
	...

0800add8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	32b0      	adds	r2, #176	@ 0xb0
 800adea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	32b0      	adds	r2, #176	@ 0xb0
 800adfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e018      	b.n	800ae38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	7c1b      	ldrb	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10a      	bne.n	800ae24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae40 <USBD_CDC_ReceivePacket+0x68>)
 800ae10:	7819      	ldrb	r1, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 ff8f 	bl	800cd40 <USBD_LL_PrepareReceive>
 800ae22:	e008      	b.n	800ae36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae24:	4b06      	ldr	r3, [pc, #24]	@ (800ae40 <USBD_CDC_ReceivePacket+0x68>)
 800ae26:	7819      	ldrb	r1, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae2e:	2340      	movs	r3, #64	@ 0x40
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f001 ff85 	bl	800cd40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	200000a4 	.word	0x200000a4

0800ae44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e01f      	b.n	800ae9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	79fa      	ldrb	r2, [r7, #7]
 800ae8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f001 fdff 	bl	800ca94 <USBD_LL_Init>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e025      	b.n	800af08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	32ae      	adds	r2, #174	@ 0xae
 800aece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00f      	beq.n	800aef8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32ae      	adds	r2, #174	@ 0xae
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	f107 020e 	add.w	r2, r7, #14
 800aeec:	4610      	mov	r0, r2
 800aeee:	4798      	blx	r3
 800aef0:	4602      	mov	r2, r0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aefe:	1c5a      	adds	r2, r3, #1
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 fe07 	bl	800cb2c <USBD_LL_Start>
 800af1e:	4603      	mov	r3, r0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	460b      	mov	r3, r1
 800af48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af54:	2b00      	cmp	r3, #0
 800af56:	d009      	beq.n	800af6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	78fa      	ldrb	r2, [r7, #3]
 800af62:	4611      	mov	r1, r2
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4798      	blx	r3
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	78fa      	ldrb	r2, [r7, #3]
 800af90:	4611      	mov	r1, r2
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	4798      	blx	r3
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800af9c:	2303      	movs	r3, #3
 800af9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f001 f90c 	bl	800c1da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800afd0:	461a      	mov	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800afde:	f003 031f 	and.w	r3, r3, #31
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d01a      	beq.n	800b01c <USBD_LL_SetupStage+0x72>
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d822      	bhi.n	800b030 <USBD_LL_SetupStage+0x86>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <USBD_LL_SetupStage+0x4a>
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d00a      	beq.n	800b008 <USBD_LL_SetupStage+0x5e>
 800aff2:	e01d      	b.n	800b030 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fb63 	bl	800b6c8 <USBD_StdDevReq>
 800b002:	4603      	mov	r3, r0
 800b004:	73fb      	strb	r3, [r7, #15]
      break;
 800b006:	e020      	b.n	800b04a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fbcb 	bl	800b7ac <USBD_StdItfReq>
 800b016:	4603      	mov	r3, r0
 800b018:	73fb      	strb	r3, [r7, #15]
      break;
 800b01a:	e016      	b.n	800b04a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fc2d 	bl	800b884 <USBD_StdEPReq>
 800b02a:	4603      	mov	r3, r0
 800b02c:	73fb      	strb	r3, [r7, #15]
      break;
 800b02e:	e00c      	b.n	800b04a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b036:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 fdd4 	bl	800cbec <USBD_LL_StallEP>
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]
      break;
 800b048:	bf00      	nop
  }

  return ret;
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	460b      	mov	r3, r1
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b066:	7afb      	ldrb	r3, [r7, #11]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d16e      	bne.n	800b14a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	f040 8098 	bne.w	800b1b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d913      	bls.n	800b0b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	1ad2      	subs	r2, r2, r3
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	68da      	ldr	r2, [r3, #12]
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	bf28      	it	cs
 800b0a6:	4613      	movcs	r3, r2
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f001 f994 	bl	800c3da <USBD_CtlContinueRx>
 800b0b2:	e07d      	b.n	800b1b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b0ba:	f003 031f 	and.w	r3, r3, #31
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d014      	beq.n	800b0ec <USBD_LL_DataOutStage+0x98>
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d81d      	bhi.n	800b102 <USBD_LL_DataOutStage+0xae>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <USBD_LL_DataOutStage+0x7c>
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d003      	beq.n	800b0d6 <USBD_LL_DataOutStage+0x82>
 800b0ce:	e018      	b.n	800b102 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	75bb      	strb	r3, [r7, #22]
            break;
 800b0d4:	e018      	b.n	800b108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 fa64 	bl	800b5ae <USBD_CoreFindIF>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	75bb      	strb	r3, [r7, #22]
            break;
 800b0ea:	e00d      	b.n	800b108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 fa66 	bl	800b5c8 <USBD_CoreFindEP>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75bb      	strb	r3, [r7, #22]
            break;
 800b100:	e002      	b.n	800b108 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	75bb      	strb	r3, [r7, #22]
            break;
 800b106:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b108:	7dbb      	ldrb	r3, [r7, #22]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d119      	bne.n	800b142 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b03      	cmp	r3, #3
 800b118:	d113      	bne.n	800b142 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b11a:	7dba      	ldrb	r2, [r7, #22]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	32ae      	adds	r2, #174	@ 0xae
 800b120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00b      	beq.n	800b142 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b12a:	7dba      	ldrb	r2, [r7, #22]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b132:	7dba      	ldrb	r2, [r7, #22]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	32ae      	adds	r2, #174	@ 0xae
 800b138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f001 f95a 	bl	800c3fc <USBD_CtlSendStatus>
 800b148:	e032      	b.n	800b1b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b14a:	7afb      	ldrb	r3, [r7, #11]
 800b14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b150:	b2db      	uxtb	r3, r3
 800b152:	4619      	mov	r1, r3
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 fa37 	bl	800b5c8 <USBD_CoreFindEP>
 800b15a:	4603      	mov	r3, r0
 800b15c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b15e:	7dbb      	ldrb	r3, [r7, #22]
 800b160:	2bff      	cmp	r3, #255	@ 0xff
 800b162:	d025      	beq.n	800b1b0 <USBD_LL_DataOutStage+0x15c>
 800b164:	7dbb      	ldrb	r3, [r7, #22]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d122      	bne.n	800b1b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b03      	cmp	r3, #3
 800b174:	d117      	bne.n	800b1a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b176:	7dba      	ldrb	r2, [r7, #22]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	32ae      	adds	r2, #174	@ 0xae
 800b17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00f      	beq.n	800b1a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b186:	7dba      	ldrb	r2, [r7, #22]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b18e:	7dba      	ldrb	r2, [r7, #22]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	32ae      	adds	r2, #174	@ 0xae
 800b194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	7afa      	ldrb	r2, [r7, #11]
 800b19c:	4611      	mov	r1, r2
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	4798      	blx	r3
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	e000      	b.n	800b1b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b086      	sub	sp, #24
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	607a      	str	r2, [r7, #4]
 800b1c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b1c8:	7afb      	ldrb	r3, [r7, #11]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d16f      	bne.n	800b2ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3314      	adds	r3, #20
 800b1d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d15a      	bne.n	800b294 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d914      	bls.n	800b214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	689a      	ldr	r2, [r3, #8]
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	1ad2      	subs	r2, r2, r3
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f001 f8bc 	bl	800c37e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b206:	2300      	movs	r3, #0
 800b208:	2200      	movs	r2, #0
 800b20a:	2100      	movs	r1, #0
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f001 fd97 	bl	800cd40 <USBD_LL_PrepareReceive>
 800b212:	e03f      	b.n	800b294 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d11c      	bne.n	800b25a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b228:	429a      	cmp	r2, r3
 800b22a:	d316      	bcc.n	800b25a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b236:	429a      	cmp	r2, r3
 800b238:	d20f      	bcs.n	800b25a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b23a:	2200      	movs	r2, #0
 800b23c:	2100      	movs	r1, #0
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f001 f89d 	bl	800c37e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b24c:	2300      	movs	r3, #0
 800b24e:	2200      	movs	r2, #0
 800b250:	2100      	movs	r1, #0
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f001 fd74 	bl	800cd40 <USBD_LL_PrepareReceive>
 800b258:	e01c      	b.n	800b294 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b03      	cmp	r3, #3
 800b264:	d10f      	bne.n	800b286 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d009      	beq.n	800b286 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b286:	2180      	movs	r1, #128	@ 0x80
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f001 fcaf 	bl	800cbec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f001 f8c7 	bl	800c422 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d03a      	beq.n	800b314 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f7ff fe42 	bl	800af28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b2ac:	e032      	b.n	800b314 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 f985 	bl	800b5c8 <USBD_CoreFindEP>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	2bff      	cmp	r3, #255	@ 0xff
 800b2c6:	d025      	beq.n	800b314 <USBD_LL_DataInStage+0x15a>
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d122      	bne.n	800b314 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d11c      	bne.n	800b314 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b2da:	7dfa      	ldrb	r2, [r7, #23]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	32ae      	adds	r2, #174	@ 0xae
 800b2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d014      	beq.n	800b314 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b2ea:	7dfa      	ldrb	r2, [r7, #23]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2f2:	7dfa      	ldrb	r2, [r7, #23]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	32ae      	adds	r2, #174	@ 0xae
 800b2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	7afa      	ldrb	r2, [r7, #11]
 800b300:	4611      	mov	r1, r2
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	4798      	blx	r3
 800b306:	4603      	mov	r3, r0
 800b308:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b30a:	7dbb      	ldrb	r3, [r7, #22]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b310:	7dbb      	ldrb	r3, [r7, #22]
 800b312:	e000      	b.n	800b316 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b084      	sub	sp, #16
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b356:	2b00      	cmp	r3, #0
 800b358:	d014      	beq.n	800b384 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00e      	beq.n	800b384 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	6852      	ldr	r2, [r2, #4]
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	4611      	mov	r1, r2
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b380:	2303      	movs	r3, #3
 800b382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b384:	2340      	movs	r3, #64	@ 0x40
 800b386:	2200      	movs	r2, #0
 800b388:	2100      	movs	r1, #0
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f001 fbe9 	bl	800cb62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2240      	movs	r2, #64	@ 0x40
 800b39c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3a0:	2340      	movs	r3, #64	@ 0x40
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2180      	movs	r1, #128	@ 0x80
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 fbdb 	bl	800cb62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2240      	movs	r2, #64	@ 0x40
 800b3b6:	621a      	str	r2, [r3, #32]

  return ret;
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b083      	sub	sp, #12
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	78fa      	ldrb	r2, [r7, #3]
 800b3d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b04      	cmp	r3, #4
 800b3f4:	d006      	beq.n	800b404 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2204      	movs	r2, #4
 800b408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b083      	sub	sp, #12
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	d106      	bne.n	800b43c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b434:	b2da      	uxtb	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b082      	sub	sp, #8
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d110      	bne.n	800b480 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00b      	beq.n	800b480 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b46e:	69db      	ldr	r3, [r3, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d005      	beq.n	800b480 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	32ae      	adds	r2, #174	@ 0xae
 800b4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e01c      	b.n	800b4e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	d115      	bne.n	800b4e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	32ae      	adds	r2, #174	@ 0xae
 800b4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00b      	beq.n	800b4e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	32ae      	adds	r2, #174	@ 0xae
 800b4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	78fa      	ldrb	r2, [r7, #3]
 800b4de:	4611      	mov	r1, r2
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	32ae      	adds	r2, #174	@ 0xae
 800b504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e01c      	b.n	800b54a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d115      	bne.n	800b548 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	32ae      	adds	r2, #174	@ 0xae
 800b526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00b      	beq.n	800b548 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	32ae      	adds	r2, #174	@ 0xae
 800b53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b540:	78fa      	ldrb	r2, [r7, #3]
 800b542:	4611      	mov	r1, r2
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00e      	beq.n	800b5a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	6852      	ldr	r2, [r2, #4]
 800b592:	b2d2      	uxtb	r2, r2
 800b594:	4611      	mov	r1, r2
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	4798      	blx	r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b086      	sub	sp, #24
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	885b      	ldrh	r3, [r3, #2]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	7812      	ldrb	r2, [r2, #0]
 800b604:	4293      	cmp	r3, r2
 800b606:	d91f      	bls.n	800b648 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b60e:	e013      	b.n	800b638 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b610:	f107 030a 	add.w	r3, r7, #10
 800b614:	4619      	mov	r1, r3
 800b616:	6978      	ldr	r0, [r7, #20]
 800b618:	f000 f81b 	bl	800b652 <USBD_GetNextDesc>
 800b61c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	785b      	ldrb	r3, [r3, #1]
 800b622:	2b05      	cmp	r3, #5
 800b624:	d108      	bne.n	800b638 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	789b      	ldrb	r3, [r3, #2]
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	429a      	cmp	r2, r3
 800b632:	d008      	beq.n	800b646 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b634:	2300      	movs	r3, #0
 800b636:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	885b      	ldrh	r3, [r3, #2]
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	897b      	ldrh	r3, [r7, #10]
 800b640:	429a      	cmp	r2, r3
 800b642:	d8e5      	bhi.n	800b610 <USBD_GetEpDesc+0x2e>
 800b644:	e000      	b.n	800b648 <USBD_GetEpDesc+0x66>
          break;
 800b646:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b648:	693b      	ldr	r3, [r7, #16]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	7812      	ldrb	r2, [r2, #0]
 800b668:	4413      	add	r3, r2
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4413      	add	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b67c:	68fb      	ldr	r3, [r7, #12]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b087      	sub	sp, #28
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6a8:	8a3b      	ldrh	r3, [r7, #16]
 800b6aa:	021b      	lsls	r3, r3, #8
 800b6ac:	b21a      	sxth	r2, r3
 800b6ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	b21b      	sxth	r3, r3
 800b6b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b6b8:	89fb      	ldrh	r3, [r7, #14]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	371c      	adds	r7, #28
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
	...

0800b6c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6de:	2b40      	cmp	r3, #64	@ 0x40
 800b6e0:	d005      	beq.n	800b6ee <USBD_StdDevReq+0x26>
 800b6e2:	2b40      	cmp	r3, #64	@ 0x40
 800b6e4:	d857      	bhi.n	800b796 <USBD_StdDevReq+0xce>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00f      	beq.n	800b70a <USBD_StdDevReq+0x42>
 800b6ea:	2b20      	cmp	r3, #32
 800b6ec:	d153      	bne.n	800b796 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	32ae      	adds	r2, #174	@ 0xae
 800b6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]
      break;
 800b708:	e04a      	b.n	800b7a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	785b      	ldrb	r3, [r3, #1]
 800b70e:	2b09      	cmp	r3, #9
 800b710:	d83b      	bhi.n	800b78a <USBD_StdDevReq+0xc2>
 800b712:	a201      	add	r2, pc, #4	@ (adr r2, 800b718 <USBD_StdDevReq+0x50>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b76d 	.word	0x0800b76d
 800b71c:	0800b781 	.word	0x0800b781
 800b720:	0800b78b 	.word	0x0800b78b
 800b724:	0800b777 	.word	0x0800b777
 800b728:	0800b78b 	.word	0x0800b78b
 800b72c:	0800b74b 	.word	0x0800b74b
 800b730:	0800b741 	.word	0x0800b741
 800b734:	0800b78b 	.word	0x0800b78b
 800b738:	0800b763 	.word	0x0800b763
 800b73c:	0800b755 	.word	0x0800b755
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fa3c 	bl	800bbc0 <USBD_GetDescriptor>
          break;
 800b748:	e024      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fba1 	bl	800be94 <USBD_SetAddress>
          break;
 800b752:	e01f      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fbe0 	bl	800bf1c <USBD_SetConfig>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73fb      	strb	r3, [r7, #15]
          break;
 800b760:	e018      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fc83 	bl	800c070 <USBD_GetConfig>
          break;
 800b76a:	e013      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fcb4 	bl	800c0dc <USBD_GetStatus>
          break;
 800b774:	e00e      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fce3 	bl	800c144 <USBD_SetFeature>
          break;
 800b77e:	e009      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fd07 	bl	800c196 <USBD_ClrFeature>
          break;
 800b788:	e004      	b.n	800b794 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fd5e 	bl	800c24e <USBD_CtlError>
          break;
 800b792:	bf00      	nop
      }
      break;
 800b794:	e004      	b.n	800b7a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fd58 	bl	800c24e <USBD_CtlError>
      break;
 800b79e:	bf00      	nop
  }

  return ret;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop

0800b7ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7c2:	2b40      	cmp	r3, #64	@ 0x40
 800b7c4:	d005      	beq.n	800b7d2 <USBD_StdItfReq+0x26>
 800b7c6:	2b40      	cmp	r3, #64	@ 0x40
 800b7c8:	d852      	bhi.n	800b870 <USBD_StdItfReq+0xc4>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <USBD_StdItfReq+0x26>
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d14e      	bne.n	800b870 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d840      	bhi.n	800b862 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	889b      	ldrh	r3, [r3, #4]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d836      	bhi.n	800b858 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	889b      	ldrh	r3, [r3, #4]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fedb 	bl	800b5ae <USBD_CoreFindIF>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	2bff      	cmp	r3, #255	@ 0xff
 800b800:	d01d      	beq.n	800b83e <USBD_StdItfReq+0x92>
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11a      	bne.n	800b83e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b808:	7bba      	ldrb	r2, [r7, #14]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	32ae      	adds	r2, #174	@ 0xae
 800b80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00f      	beq.n	800b838 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b818:	7bba      	ldrb	r2, [r7, #14]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b820:	7bba      	ldrb	r2, [r7, #14]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32ae      	adds	r2, #174	@ 0xae
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b836:	e004      	b.n	800b842 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b838:	2303      	movs	r3, #3
 800b83a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b83c:	e001      	b.n	800b842 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b83e:	2303      	movs	r3, #3
 800b840:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	88db      	ldrh	r3, [r3, #6]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d110      	bne.n	800b86c <USBD_StdItfReq+0xc0>
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fdd3 	bl	800c3fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b856:	e009      	b.n	800b86c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fcf7 	bl	800c24e <USBD_CtlError>
          break;
 800b860:	e004      	b.n	800b86c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fcf2 	bl	800c24e <USBD_CtlError>
          break;
 800b86a:	e000      	b.n	800b86e <USBD_StdItfReq+0xc2>
          break;
 800b86c:	bf00      	nop
      }
      break;
 800b86e:	e004      	b.n	800b87a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fceb 	bl	800c24e <USBD_CtlError>
      break;
 800b878:	bf00      	nop
  }

  return ret;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	889b      	ldrh	r3, [r3, #4]
 800b896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8a0:	2b40      	cmp	r3, #64	@ 0x40
 800b8a2:	d007      	beq.n	800b8b4 <USBD_StdEPReq+0x30>
 800b8a4:	2b40      	cmp	r3, #64	@ 0x40
 800b8a6:	f200 817f 	bhi.w	800bba8 <USBD_StdEPReq+0x324>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d02a      	beq.n	800b904 <USBD_StdEPReq+0x80>
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	f040 817a 	bne.w	800bba8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fe85 	bl	800b5c8 <USBD_CoreFindEP>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8c2:	7b7b      	ldrb	r3, [r7, #13]
 800b8c4:	2bff      	cmp	r3, #255	@ 0xff
 800b8c6:	f000 8174 	beq.w	800bbb2 <USBD_StdEPReq+0x32e>
 800b8ca:	7b7b      	ldrb	r3, [r7, #13]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 8170 	bne.w	800bbb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b8d2:	7b7a      	ldrb	r2, [r7, #13]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b8da:	7b7a      	ldrb	r2, [r7, #13]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	32ae      	adds	r2, #174	@ 0xae
 800b8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 8163 	beq.w	800bbb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b8ec:	7b7a      	ldrb	r2, [r7, #13]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	32ae      	adds	r2, #174	@ 0xae
 800b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	4798      	blx	r3
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b902:	e156      	b.n	800bbb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	785b      	ldrb	r3, [r3, #1]
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d008      	beq.n	800b91e <USBD_StdEPReq+0x9a>
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	f300 8145 	bgt.w	800bb9c <USBD_StdEPReq+0x318>
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 809b 	beq.w	800ba4e <USBD_StdEPReq+0x1ca>
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d03c      	beq.n	800b996 <USBD_StdEPReq+0x112>
 800b91c:	e13e      	b.n	800bb9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b02      	cmp	r3, #2
 800b928:	d002      	beq.n	800b930 <USBD_StdEPReq+0xac>
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d016      	beq.n	800b95c <USBD_StdEPReq+0xd8>
 800b92e:	e02c      	b.n	800b98a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00d      	beq.n	800b952 <USBD_StdEPReq+0xce>
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	2b80      	cmp	r3, #128	@ 0x80
 800b93a:	d00a      	beq.n	800b952 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f001 f953 	bl	800cbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b946:	2180      	movs	r1, #128	@ 0x80
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 f94f 	bl	800cbec <USBD_LL_StallEP>
 800b94e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b950:	e020      	b.n	800b994 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fc7a 	bl	800c24e <USBD_CtlError>
              break;
 800b95a:	e01b      	b.n	800b994 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	885b      	ldrh	r3, [r3, #2]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10e      	bne.n	800b982 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00b      	beq.n	800b982 <USBD_StdEPReq+0xfe>
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	2b80      	cmp	r3, #128	@ 0x80
 800b96e:	d008      	beq.n	800b982 <USBD_StdEPReq+0xfe>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	88db      	ldrh	r3, [r3, #6]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 f935 	bl	800cbec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd3a 	bl	800c3fc <USBD_CtlSendStatus>

              break;
 800b988:	e004      	b.n	800b994 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fc5e 	bl	800c24e <USBD_CtlError>
              break;
 800b992:	bf00      	nop
          }
          break;
 800b994:	e107      	b.n	800bba6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d002      	beq.n	800b9a8 <USBD_StdEPReq+0x124>
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d016      	beq.n	800b9d4 <USBD_StdEPReq+0x150>
 800b9a6:	e04b      	b.n	800ba40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00d      	beq.n	800b9ca <USBD_StdEPReq+0x146>
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	2b80      	cmp	r3, #128	@ 0x80
 800b9b2:	d00a      	beq.n	800b9ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f001 f917 	bl	800cbec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9be:	2180      	movs	r1, #128	@ 0x80
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f001 f913 	bl	800cbec <USBD_LL_StallEP>
 800b9c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9c8:	e040      	b.n	800ba4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fc3e 	bl	800c24e <USBD_CtlError>
              break;
 800b9d2:	e03b      	b.n	800ba4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	885b      	ldrh	r3, [r3, #2]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d136      	bne.n	800ba4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d004      	beq.n	800b9f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 f91d 	bl	800cc2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fd03 	bl	800c3fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff fde4 	bl	800b5c8 <USBD_CoreFindEP>
 800ba00:	4603      	mov	r3, r0
 800ba02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba04:	7b7b      	ldrb	r3, [r7, #13]
 800ba06:	2bff      	cmp	r3, #255	@ 0xff
 800ba08:	d01f      	beq.n	800ba4a <USBD_StdEPReq+0x1c6>
 800ba0a:	7b7b      	ldrb	r3, [r7, #13]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11c      	bne.n	800ba4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba10:	7b7a      	ldrb	r2, [r7, #13]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba18:	7b7a      	ldrb	r2, [r7, #13]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	32ae      	adds	r2, #174	@ 0xae
 800ba1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d010      	beq.n	800ba4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba28:	7b7a      	ldrb	r2, [r7, #13]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	32ae      	adds	r2, #174	@ 0xae
 800ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ba3e:	e004      	b.n	800ba4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fc03 	bl	800c24e <USBD_CtlError>
              break;
 800ba48:	e000      	b.n	800ba4c <USBD_StdEPReq+0x1c8>
              break;
 800ba4a:	bf00      	nop
          }
          break;
 800ba4c:	e0ab      	b.n	800bba6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d002      	beq.n	800ba60 <USBD_StdEPReq+0x1dc>
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d032      	beq.n	800bac4 <USBD_StdEPReq+0x240>
 800ba5e:	e097      	b.n	800bb90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <USBD_StdEPReq+0x1f2>
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b80      	cmp	r3, #128	@ 0x80
 800ba6a:	d004      	beq.n	800ba76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fbed 	bl	800c24e <USBD_CtlError>
                break;
 800ba74:	e091      	b.n	800bb9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da0b      	bge.n	800ba96 <USBD_StdEPReq+0x212>
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	3310      	adds	r3, #16
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	4413      	add	r3, r2
 800ba92:	3304      	adds	r3, #4
 800ba94:	e00b      	b.n	800baae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	4413      	add	r3, r2
 800baac:	3304      	adds	r3, #4
 800baae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2202      	movs	r2, #2
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fc43 	bl	800c348 <USBD_CtlSendData>
              break;
 800bac2:	e06a      	b.n	800bb9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da11      	bge.n	800baf0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	f003 020f 	and.w	r2, r3, #15
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	3324      	adds	r3, #36	@ 0x24
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d117      	bne.n	800bb16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fbb0 	bl	800c24e <USBD_CtlError>
                  break;
 800baee:	e054      	b.n	800bb9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	f003 020f 	and.w	r2, r3, #15
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	4613      	mov	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	440b      	add	r3, r1
 800bb02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d104      	bne.n	800bb16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb9d 	bl	800c24e <USBD_CtlError>
                  break;
 800bb14:	e041      	b.n	800bb9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da0b      	bge.n	800bb36 <USBD_StdEPReq+0x2b2>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	3310      	adds	r3, #16
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	3304      	adds	r3, #4
 800bb34:	e00b      	b.n	800bb4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <USBD_StdEPReq+0x2d8>
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	2b80      	cmp	r3, #128	@ 0x80
 800bb5a:	d103      	bne.n	800bb64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e00e      	b.n	800bb82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 f87d 	bl	800cc68 <USBD_LL_IsStallEP>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d003      	beq.n	800bb7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2201      	movs	r2, #1
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e002      	b.n	800bb82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2202      	movs	r2, #2
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fbdd 	bl	800c348 <USBD_CtlSendData>
              break;
 800bb8e:	e004      	b.n	800bb9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fb5b 	bl	800c24e <USBD_CtlError>
              break;
 800bb98:	bf00      	nop
          }
          break;
 800bb9a:	e004      	b.n	800bba6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fb55 	bl	800c24e <USBD_CtlError>
          break;
 800bba4:	bf00      	nop
      }
      break;
 800bba6:	e005      	b.n	800bbb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fb4f 	bl	800c24e <USBD_CtlError>
      break;
 800bbb0:	e000      	b.n	800bbb4 <USBD_StdEPReq+0x330>
      break;
 800bbb2:	bf00      	nop
  }

  return ret;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	2b06      	cmp	r3, #6
 800bbe2:	f200 8128 	bhi.w	800be36 <USBD_GetDescriptor+0x276>
 800bbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbec <USBD_GetDescriptor+0x2c>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc09 	.word	0x0800bc09
 800bbf0:	0800bc21 	.word	0x0800bc21
 800bbf4:	0800bc61 	.word	0x0800bc61
 800bbf8:	0800be37 	.word	0x0800be37
 800bbfc:	0800be37 	.word	0x0800be37
 800bc00:	0800bdd7 	.word	0x0800bdd7
 800bc04:	0800be03 	.word	0x0800be03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	7c12      	ldrb	r2, [r2, #16]
 800bc14:	f107 0108 	add.w	r1, r7, #8
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4798      	blx	r3
 800bc1c:	60f8      	str	r0, [r7, #12]
      break;
 800bc1e:	e112      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7c1b      	ldrb	r3, [r3, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10d      	bne.n	800bc44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc30:	f107 0208 	add.w	r2, r7, #8
 800bc34:	4610      	mov	r0, r2
 800bc36:	4798      	blx	r3
 800bc38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	2202      	movs	r2, #2
 800bc40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc42:	e100      	b.n	800be46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4c:	f107 0208 	add.w	r2, r7, #8
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	701a      	strb	r2, [r3, #0]
      break;
 800bc5e:	e0f2      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	885b      	ldrh	r3, [r3, #2]
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b05      	cmp	r3, #5
 800bc68:	f200 80ac 	bhi.w	800bdc4 <USBD_GetDescriptor+0x204>
 800bc6c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc74 <USBD_GetDescriptor+0xb4>)
 800bc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc72:	bf00      	nop
 800bc74:	0800bc8d 	.word	0x0800bc8d
 800bc78:	0800bcc1 	.word	0x0800bcc1
 800bc7c:	0800bcf5 	.word	0x0800bcf5
 800bc80:	0800bd29 	.word	0x0800bd29
 800bc84:	0800bd5d 	.word	0x0800bd5d
 800bc88:	0800bd91 	.word	0x0800bd91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcae:	e091      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 facb 	bl	800c24e <USBD_CtlError>
            err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcbe:	e089      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	7c12      	ldrb	r2, [r2, #16]
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce2:	e077      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fab1 	bl	800c24e <USBD_CtlError>
            err++;
 800bcec:	7afb      	ldrb	r3, [r7, #11]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf2:	e06f      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00b      	beq.n	800bd18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c12      	ldrb	r2, [r2, #16]
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd16:	e05d      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fa97 	bl	800c24e <USBD_CtlError>
            err++;
 800bd20:	7afb      	ldrb	r3, [r7, #11]
 800bd22:	3301      	adds	r3, #1
 800bd24:	72fb      	strb	r3, [r7, #11]
          break;
 800bd26:	e055      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00b      	beq.n	800bd4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	7c12      	ldrb	r2, [r2, #16]
 800bd40:	f107 0108 	add.w	r1, r7, #8
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
 800bd48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd4a:	e043      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fa7d 	bl	800c24e <USBD_CtlError>
            err++;
 800bd54:	7afb      	ldrb	r3, [r7, #11]
 800bd56:	3301      	adds	r3, #1
 800bd58:	72fb      	strb	r3, [r7, #11]
          break;
 800bd5a:	e03b      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	7c12      	ldrb	r2, [r2, #16]
 800bd74:	f107 0108 	add.w	r1, r7, #8
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd7e:	e029      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fa63 	bl	800c24e <USBD_CtlError>
            err++;
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd8e:	e021      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00b      	beq.n	800bdb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	7c12      	ldrb	r2, [r2, #16]
 800bda8:	f107 0108 	add.w	r1, r7, #8
 800bdac:	4610      	mov	r0, r2
 800bdae:	4798      	blx	r3
 800bdb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdb2:	e00f      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa49 	bl	800c24e <USBD_CtlError>
            err++;
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdc2:	e007      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa41 	bl	800c24e <USBD_CtlError>
          err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bdd2:	bf00      	nop
      }
      break;
 800bdd4:	e037      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7c1b      	ldrb	r3, [r3, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bde6:	f107 0208 	add.w	r2, r7, #8
 800bdea:	4610      	mov	r0, r2
 800bdec:	4798      	blx	r3
 800bdee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdf0:	e029      	b.n	800be46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fa2a 	bl	800c24e <USBD_CtlError>
        err++;
 800bdfa:	7afb      	ldrb	r3, [r7, #11]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	72fb      	strb	r3, [r7, #11]
      break;
 800be00:	e021      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7c1b      	ldrb	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10d      	bne.n	800be26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be12:	f107 0208 	add.w	r2, r7, #8
 800be16:	4610      	mov	r0, r2
 800be18:	4798      	blx	r3
 800be1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3301      	adds	r3, #1
 800be20:	2207      	movs	r2, #7
 800be22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be24:	e00f      	b.n	800be46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fa10 	bl	800c24e <USBD_CtlError>
        err++;
 800be2e:	7afb      	ldrb	r3, [r7, #11]
 800be30:	3301      	adds	r3, #1
 800be32:	72fb      	strb	r3, [r7, #11]
      break;
 800be34:	e007      	b.n	800be46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fa08 	bl	800c24e <USBD_CtlError>
      err++;
 800be3e:	7afb      	ldrb	r3, [r7, #11]
 800be40:	3301      	adds	r3, #1
 800be42:	72fb      	strb	r3, [r7, #11]
      break;
 800be44:	bf00      	nop
  }

  if (err != 0U)
 800be46:	7afb      	ldrb	r3, [r7, #11]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d11e      	bne.n	800be8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	88db      	ldrh	r3, [r3, #6]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d016      	beq.n	800be82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800be54:	893b      	ldrh	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	88da      	ldrh	r2, [r3, #6]
 800be5e:	893b      	ldrh	r3, [r7, #8]
 800be60:	4293      	cmp	r3, r2
 800be62:	bf28      	it	cs
 800be64:	4613      	movcs	r3, r2
 800be66:	b29b      	uxth	r3, r3
 800be68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be6a:	893b      	ldrh	r3, [r7, #8]
 800be6c:	461a      	mov	r2, r3
 800be6e:	68f9      	ldr	r1, [r7, #12]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa69 	bl	800c348 <USBD_CtlSendData>
 800be76:	e009      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f9e7 	bl	800c24e <USBD_CtlError>
 800be80:	e004      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 faba 	bl	800c3fc <USBD_CtlSendStatus>
 800be88:	e000      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    return;
 800be8a:	bf00      	nop
  }
}
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop

0800be94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	889b      	ldrh	r3, [r3, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d131      	bne.n	800bf0a <USBD_SetAddress+0x76>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	88db      	ldrh	r3, [r3, #6]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d12d      	bne.n	800bf0a <USBD_SetAddress+0x76>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	885b      	ldrh	r3, [r3, #2]
 800beb2:	2b7f      	cmp	r3, #127	@ 0x7f
 800beb4:	d829      	bhi.n	800bf0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	885b      	ldrh	r3, [r3, #2]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b03      	cmp	r3, #3
 800becc:	d104      	bne.n	800bed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f9bc 	bl	800c24e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed6:	e01d      	b.n	800bf14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7bfa      	ldrb	r2, [r7, #15]
 800bedc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 feeb 	bl	800ccc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa86 	bl	800c3fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d004      	beq.n	800bf00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2202      	movs	r2, #2
 800befa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800befe:	e009      	b.n	800bf14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf08:	e004      	b.n	800bf14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f99e 	bl	800c24e <USBD_CtlError>
  }
}
 800bf12:	bf00      	nop
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	4b4e      	ldr	r3, [pc, #312]	@ (800c06c <USBD_SetConfig+0x150>)
 800bf32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf34:	4b4d      	ldr	r3, [pc, #308]	@ (800c06c <USBD_SetConfig+0x150>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d905      	bls.n	800bf48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f985 	bl	800c24e <USBD_CtlError>
    return USBD_FAIL;
 800bf44:	2303      	movs	r3, #3
 800bf46:	e08c      	b.n	800c062 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d002      	beq.n	800bf5a <USBD_SetConfig+0x3e>
 800bf54:	2b03      	cmp	r3, #3
 800bf56:	d029      	beq.n	800bfac <USBD_SetConfig+0x90>
 800bf58:	e075      	b.n	800c046 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf5a:	4b44      	ldr	r3, [pc, #272]	@ (800c06c <USBD_SetConfig+0x150>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d020      	beq.n	800bfa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf62:	4b42      	ldr	r3, [pc, #264]	@ (800c06c <USBD_SetConfig+0x150>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf6c:	4b3f      	ldr	r3, [pc, #252]	@ (800c06c <USBD_SetConfig+0x150>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7fe ffe3 	bl	800af3e <USBD_SetClassConfig>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d008      	beq.n	800bf94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f962 	bl	800c24e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf92:	e065      	b.n	800c060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fa31 	bl	800c3fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2203      	movs	r2, #3
 800bf9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bfa2:	e05d      	b.n	800c060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa29 	bl	800c3fc <USBD_CtlSendStatus>
      break;
 800bfaa:	e059      	b.n	800c060 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bfac:	4b2f      	ldr	r3, [pc, #188]	@ (800c06c <USBD_SetConfig+0x150>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d112      	bne.n	800bfda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bfbc:	4b2b      	ldr	r3, [pc, #172]	@ (800c06c <USBD_SetConfig+0x150>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfc6:	4b29      	ldr	r3, [pc, #164]	@ (800c06c <USBD_SetConfig+0x150>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7fe ffd2 	bl	800af76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fa12 	bl	800c3fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfd8:	e042      	b.n	800c060 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bfda:	4b24      	ldr	r3, [pc, #144]	@ (800c06c <USBD_SetConfig+0x150>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d02a      	beq.n	800c03e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7fe ffc0 	bl	800af76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bff6:	4b1d      	ldr	r3, [pc, #116]	@ (800c06c <USBD_SetConfig+0x150>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c000:	4b1a      	ldr	r3, [pc, #104]	@ (800c06c <USBD_SetConfig+0x150>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7fe ff99 	bl	800af3e <USBD_SetClassConfig>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00f      	beq.n	800c036 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f918 	bl	800c24e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b2db      	uxtb	r3, r3
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7fe ffa5 	bl	800af76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c034:	e014      	b.n	800c060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f9e0 	bl	800c3fc <USBD_CtlSendStatus>
      break;
 800c03c:	e010      	b.n	800c060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9dc 	bl	800c3fc <USBD_CtlSendStatus>
      break;
 800c044:	e00c      	b.n	800c060 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f900 	bl	800c24e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c04e:	4b07      	ldr	r3, [pc, #28]	@ (800c06c <USBD_SetConfig+0x150>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7fe ff8e 	bl	800af76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c05a:	2303      	movs	r3, #3
 800c05c:	73fb      	strb	r3, [r7, #15]
      break;
 800c05e:	bf00      	nop
  }

  return ret;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000876 	.word	0x20000876

0800c070 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	88db      	ldrh	r3, [r3, #6]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d004      	beq.n	800c08c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f8e2 	bl	800c24e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c08a:	e023      	b.n	800c0d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b02      	cmp	r3, #2
 800c096:	dc02      	bgt.n	800c09e <USBD_GetConfig+0x2e>
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dc03      	bgt.n	800c0a4 <USBD_GetConfig+0x34>
 800c09c:	e015      	b.n	800c0ca <USBD_GetConfig+0x5a>
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d00b      	beq.n	800c0ba <USBD_GetConfig+0x4a>
 800c0a2:	e012      	b.n	800c0ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f948 	bl	800c348 <USBD_CtlSendData>
        break;
 800c0b8:	e00c      	b.n	800c0d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	2201      	movs	r2, #1
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f940 	bl	800c348 <USBD_CtlSendData>
        break;
 800c0c8:	e004      	b.n	800c0d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8be 	bl	800c24e <USBD_CtlError>
        break;
 800c0d2:	bf00      	nop
}
 800c0d4:	bf00      	nop
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d81e      	bhi.n	800c132 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	88db      	ldrh	r3, [r3, #6]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d004      	beq.n	800c106 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f8a5 	bl	800c24e <USBD_CtlError>
        break;
 800c104:	e01a      	b.n	800c13c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	f043 0202 	orr.w	r2, r3, #2
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	330c      	adds	r3, #12
 800c126:	2202      	movs	r2, #2
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f90c 	bl	800c348 <USBD_CtlSendData>
      break;
 800c130:	e004      	b.n	800c13c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f88a 	bl	800c24e <USBD_CtlError>
      break;
 800c13a:	bf00      	nop
  }
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	885b      	ldrh	r3, [r3, #2]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d107      	bne.n	800c166 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f94c 	bl	800c3fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c164:	e013      	b.n	800c18e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d10b      	bne.n	800c186 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	889b      	ldrh	r3, [r3, #4]
 800c172:	0a1b      	lsrs	r3, r3, #8
 800c174:	b29b      	uxth	r3, r3
 800c176:	b2da      	uxtb	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f93c 	bl	800c3fc <USBD_CtlSendStatus>
}
 800c184:	e003      	b.n	800c18e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f860 	bl	800c24e <USBD_CtlError>
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d80b      	bhi.n	800c1c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d10c      	bne.n	800c1d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f91c 	bl	800c3fc <USBD_CtlSendStatus>
      }
      break;
 800c1c4:	e004      	b.n	800c1d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f840 	bl	800c24e <USBD_CtlError>
      break;
 800c1ce:	e000      	b.n	800c1d2 <USBD_ClrFeature+0x3c>
      break;
 800c1d0:	bf00      	nop
  }
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	781a      	ldrb	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3301      	adds	r3, #1
 800c202:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7ff fa40 	bl	800b68a <SWAPBYTE>
 800c20a:	4603      	mov	r3, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3301      	adds	r3, #1
 800c216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3301      	adds	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f7ff fa33 	bl	800b68a <SWAPBYTE>
 800c224:	4603      	mov	r3, r0
 800c226:	461a      	mov	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff fa26 	bl	800b68a <SWAPBYTE>
 800c23e:	4603      	mov	r3, r0
 800c240:	461a      	mov	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	80da      	strh	r2, [r3, #6]
}
 800c246:	bf00      	nop
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b082      	sub	sp, #8
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c258:	2180      	movs	r1, #128	@ 0x80
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fcc6 	bl	800cbec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c260:	2100      	movs	r1, #0
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fcc2 	bl	800cbec <USBD_LL_StallEP>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d042      	beq.n	800c30c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f000 f842 	bl	800c314 <USBD_GetLen>
 800c290:	4603      	mov	r3, r0
 800c292:	3301      	adds	r3, #1
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c29a:	d808      	bhi.n	800c2ae <USBD_GetString+0x3e>
 800c29c:	6938      	ldr	r0, [r7, #16]
 800c29e:	f000 f839 	bl	800c314 <USBD_GetLen>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	005b      	lsls	r3, r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	e001      	b.n	800c2b2 <USBD_GetString+0x42>
 800c2ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	7812      	ldrb	r2, [r2, #0]
 800c2c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	2203      	movs	r2, #3
 800c2d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c2d8:	e013      	b.n	800c302 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	4413      	add	r3, r2
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	7812      	ldrb	r2, [r2, #0]
 800c2e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	613b      	str	r3, [r7, #16]
    idx++;
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	4413      	add	r3, r2
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800c2fc:	7dfb      	ldrb	r3, [r7, #23]
 800c2fe:	3301      	adds	r3, #1
 800c300:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e7      	bne.n	800c2da <USBD_GetString+0x6a>
 800c30a:	e000      	b.n	800c30e <USBD_GetString+0x9e>
    return;
 800c30c:	bf00      	nop
  }
}
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c324:	e005      	b.n	800c332 <USBD_GetLen+0x1e>
  {
    len++;
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	3301      	adds	r3, #1
 800c32a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	3301      	adds	r3, #1
 800c330:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1f5      	bne.n	800c326 <USBD_GetLen+0x12>
  }

  return len;
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3714      	adds	r7, #20
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2202      	movs	r2, #2
 800c358:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	2100      	movs	r1, #0
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 fcc5 	bl	800ccfe <USBD_LL_Transmit>

  return USBD_OK;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b084      	sub	sp, #16
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	2100      	movs	r1, #0
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f000 fcb4 	bl	800ccfe <USBD_LL_Transmit>

  return USBD_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2203      	movs	r2, #3
 800c3b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	68ba      	ldr	r2, [r7, #8]
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f000 fcb8 	bl	800cd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	60f8      	str	r0, [r7, #12]
 800c3e2:	60b9      	str	r1, [r7, #8]
 800c3e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f000 fca7 	bl	800cd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2204      	movs	r2, #4
 800c408:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c40c:	2300      	movs	r3, #0
 800c40e:	2200      	movs	r2, #0
 800c410:	2100      	movs	r1, #0
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fc73 	bl	800ccfe <USBD_LL_Transmit>

  return USBD_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b082      	sub	sp, #8
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2205      	movs	r2, #5
 800c42e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c432:	2300      	movs	r3, #0
 800c434:	2200      	movs	r2, #0
 800c436:	2100      	movs	r1, #0
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fc81 	bl	800cd40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c44c:	2200      	movs	r2, #0
 800c44e:	4912      	ldr	r1, [pc, #72]	@ (800c498 <MX_USB_DEVICE_Init+0x50>)
 800c450:	4812      	ldr	r0, [pc, #72]	@ (800c49c <MX_USB_DEVICE_Init+0x54>)
 800c452:	f7fe fcf7 	bl	800ae44 <USBD_Init>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c45c:	f7f5 fd28 	bl	8001eb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c460:	490f      	ldr	r1, [pc, #60]	@ (800c4a0 <MX_USB_DEVICE_Init+0x58>)
 800c462:	480e      	ldr	r0, [pc, #56]	@ (800c49c <MX_USB_DEVICE_Init+0x54>)
 800c464:	f7fe fd1e 	bl	800aea4 <USBD_RegisterClass>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c46e:	f7f5 fd1f 	bl	8001eb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c472:	490c      	ldr	r1, [pc, #48]	@ (800c4a4 <MX_USB_DEVICE_Init+0x5c>)
 800c474:	4809      	ldr	r0, [pc, #36]	@ (800c49c <MX_USB_DEVICE_Init+0x54>)
 800c476:	f7fe fc55 	bl	800ad24 <USBD_CDC_RegisterInterface>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c480:	f7f5 fd16 	bl	8001eb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c484:	4805      	ldr	r0, [pc, #20]	@ (800c49c <MX_USB_DEVICE_Init+0x54>)
 800c486:	f7fe fd43 	bl	800af10 <USBD_Start>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c490:	f7f5 fd0e 	bl	8001eb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c494:	bf00      	nop
 800c496:	bd80      	pop	{r7, pc}
 800c498:	200000bc 	.word	0x200000bc
 800c49c:	20000878 	.word	0x20000878
 800c4a0:	20000028 	.word	0x20000028
 800c4a4:	200000a8 	.word	0x200000a8

0800c4a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4905      	ldr	r1, [pc, #20]	@ (800c4c4 <CDC_Init_FS+0x1c>)
 800c4b0:	4805      	ldr	r0, [pc, #20]	@ (800c4c8 <CDC_Init_FS+0x20>)
 800c4b2:	f7fe fc51 	bl	800ad58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c4b6:	4905      	ldr	r1, [pc, #20]	@ (800c4cc <CDC_Init_FS+0x24>)
 800c4b8:	4803      	ldr	r0, [pc, #12]	@ (800c4c8 <CDC_Init_FS+0x20>)
 800c4ba:	f7fe fc6f 	bl	800ad9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c4be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	20001354 	.word	0x20001354
 800c4c8:	20000878 	.word	0x20000878
 800c4cc:	20000b54 	.word	0x20000b54

0800c4d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c4d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
 800c4f2:	2b23      	cmp	r3, #35	@ 0x23
 800c4f4:	d84a      	bhi.n	800c58c <CDC_Control_FS+0xac>
 800c4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4fc <CDC_Control_FS+0x1c>)
 800c4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fc:	0800c58d 	.word	0x0800c58d
 800c500:	0800c58d 	.word	0x0800c58d
 800c504:	0800c58d 	.word	0x0800c58d
 800c508:	0800c58d 	.word	0x0800c58d
 800c50c:	0800c58d 	.word	0x0800c58d
 800c510:	0800c58d 	.word	0x0800c58d
 800c514:	0800c58d 	.word	0x0800c58d
 800c518:	0800c58d 	.word	0x0800c58d
 800c51c:	0800c58d 	.word	0x0800c58d
 800c520:	0800c58d 	.word	0x0800c58d
 800c524:	0800c58d 	.word	0x0800c58d
 800c528:	0800c58d 	.word	0x0800c58d
 800c52c:	0800c58d 	.word	0x0800c58d
 800c530:	0800c58d 	.word	0x0800c58d
 800c534:	0800c58d 	.word	0x0800c58d
 800c538:	0800c58d 	.word	0x0800c58d
 800c53c:	0800c58d 	.word	0x0800c58d
 800c540:	0800c58d 	.word	0x0800c58d
 800c544:	0800c58d 	.word	0x0800c58d
 800c548:	0800c58d 	.word	0x0800c58d
 800c54c:	0800c58d 	.word	0x0800c58d
 800c550:	0800c58d 	.word	0x0800c58d
 800c554:	0800c58d 	.word	0x0800c58d
 800c558:	0800c58d 	.word	0x0800c58d
 800c55c:	0800c58d 	.word	0x0800c58d
 800c560:	0800c58d 	.word	0x0800c58d
 800c564:	0800c58d 	.word	0x0800c58d
 800c568:	0800c58d 	.word	0x0800c58d
 800c56c:	0800c58d 	.word	0x0800c58d
 800c570:	0800c58d 	.word	0x0800c58d
 800c574:	0800c58d 	.word	0x0800c58d
 800c578:	0800c58d 	.word	0x0800c58d
 800c57c:	0800c58d 	.word	0x0800c58d
 800c580:	0800c58d 	.word	0x0800c58d
 800c584:	0800c58d 	.word	0x0800c58d
 800c588:	0800c58d 	.word	0x0800c58d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c58c:	bf00      	nop
  }

  return (USBD_OK);
 800c58e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c5a6:	6879      	ldr	r1, [r7, #4]
 800c5a8:	4805      	ldr	r0, [pc, #20]	@ (800c5c0 <CDC_Receive_FS+0x24>)
 800c5aa:	f7fe fbf7 	bl	800ad9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c5ae:	4804      	ldr	r0, [pc, #16]	@ (800c5c0 <CDC_Receive_FS+0x24>)
 800c5b0:	f7fe fc12 	bl	800add8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c5b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000878 	.word	0x20000878

0800c5c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c5d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
	...

0800c5e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	6039      	str	r1, [r7, #0]
 800c5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2212      	movs	r2, #18
 800c5f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5fa:	4b03      	ldr	r3, [pc, #12]	@ (800c608 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	200000d8 	.word	0x200000d8

0800c60c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	4603      	mov	r3, r0
 800c614:	6039      	str	r1, [r7, #0]
 800c616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2204      	movs	r2, #4
 800c61c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c61e:	4b03      	ldr	r3, [pc, #12]	@ (800c62c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c620:	4618      	mov	r0, r3
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	200000ec 	.word	0x200000ec

0800c630 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	4603      	mov	r3, r0
 800c638:	6039      	str	r1, [r7, #0]
 800c63a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c63c:	79fb      	ldrb	r3, [r7, #7]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d105      	bne.n	800c64e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	4907      	ldr	r1, [pc, #28]	@ (800c664 <USBD_FS_ProductStrDescriptor+0x34>)
 800c646:	4808      	ldr	r0, [pc, #32]	@ (800c668 <USBD_FS_ProductStrDescriptor+0x38>)
 800c648:	f7ff fe12 	bl	800c270 <USBD_GetString>
 800c64c:	e004      	b.n	800c658 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c64e:	683a      	ldr	r2, [r7, #0]
 800c650:	4904      	ldr	r1, [pc, #16]	@ (800c664 <USBD_FS_ProductStrDescriptor+0x34>)
 800c652:	4805      	ldr	r0, [pc, #20]	@ (800c668 <USBD_FS_ProductStrDescriptor+0x38>)
 800c654:	f7ff fe0c 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c658:	4b02      	ldr	r3, [pc, #8]	@ (800c664 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20001b54 	.word	0x20001b54
 800c668:	0800e6c0 	.word	0x0800e6c0

0800c66c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	6039      	str	r1, [r7, #0]
 800c676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	4904      	ldr	r1, [pc, #16]	@ (800c68c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c67c:	4804      	ldr	r0, [pc, #16]	@ (800c690 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c67e:	f7ff fdf7 	bl	800c270 <USBD_GetString>
  return USBD_StrDesc;
 800c682:	4b02      	ldr	r3, [pc, #8]	@ (800c68c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20001b54 	.word	0x20001b54
 800c690:	0800e6d8 	.word	0x0800e6d8

0800c694 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	6039      	str	r1, [r7, #0]
 800c69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	221a      	movs	r2, #26
 800c6a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6a6:	f000 f843 	bl	800c730 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6aa:	4b02      	ldr	r3, [pc, #8]	@ (800c6b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	200000f0 	.word	0x200000f0

0800c6b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	4603      	mov	r3, r0
 800c6c0:	6039      	str	r1, [r7, #0]
 800c6c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6c4:	79fb      	ldrb	r3, [r7, #7]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d105      	bne.n	800c6d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	4907      	ldr	r1, [pc, #28]	@ (800c6ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6ce:	4808      	ldr	r0, [pc, #32]	@ (800c6f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6d0:	f7ff fdce 	bl	800c270 <USBD_GetString>
 800c6d4:	e004      	b.n	800c6e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	4904      	ldr	r1, [pc, #16]	@ (800c6ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6da:	4805      	ldr	r0, [pc, #20]	@ (800c6f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6dc:	f7ff fdc8 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6e0:	4b02      	ldr	r3, [pc, #8]	@ (800c6ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20001b54 	.word	0x20001b54
 800c6f0:	0800e6ec 	.word	0x0800e6ec

0800c6f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	6039      	str	r1, [r7, #0]
 800c6fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c700:	79fb      	ldrb	r3, [r7, #7]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d105      	bne.n	800c712 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	4907      	ldr	r1, [pc, #28]	@ (800c728 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c70a:	4808      	ldr	r0, [pc, #32]	@ (800c72c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c70c:	f7ff fdb0 	bl	800c270 <USBD_GetString>
 800c710:	e004      	b.n	800c71c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	4904      	ldr	r1, [pc, #16]	@ (800c728 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c716:	4805      	ldr	r0, [pc, #20]	@ (800c72c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c718:	f7ff fdaa 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c71c:	4b02      	ldr	r3, [pc, #8]	@ (800c728 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20001b54 	.word	0x20001b54
 800c72c:	0800e6f8 	.word	0x0800e6f8

0800c730 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c736:	4b0f      	ldr	r3, [pc, #60]	@ (800c774 <Get_SerialNum+0x44>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c73c:	4b0e      	ldr	r3, [pc, #56]	@ (800c778 <Get_SerialNum+0x48>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c742:	4b0e      	ldr	r3, [pc, #56]	@ (800c77c <Get_SerialNum+0x4c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4413      	add	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d009      	beq.n	800c76a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c756:	2208      	movs	r2, #8
 800c758:	4909      	ldr	r1, [pc, #36]	@ (800c780 <Get_SerialNum+0x50>)
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f000 f814 	bl	800c788 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c760:	2204      	movs	r2, #4
 800c762:	4908      	ldr	r1, [pc, #32]	@ (800c784 <Get_SerialNum+0x54>)
 800c764:	68b8      	ldr	r0, [r7, #8]
 800c766:	f000 f80f 	bl	800c788 <IntToUnicode>
  }
}
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
 800c772:	bf00      	nop
 800c774:	1fff7a10 	.word	0x1fff7a10
 800c778:	1fff7a14 	.word	0x1fff7a14
 800c77c:	1fff7a18 	.word	0x1fff7a18
 800c780:	200000f2 	.word	0x200000f2
 800c784:	20000102 	.word	0x20000102

0800c788 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c788:	b480      	push	{r7}
 800c78a:	b087      	sub	sp, #28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	4613      	mov	r3, r2
 800c794:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c79a:	2300      	movs	r3, #0
 800c79c:	75fb      	strb	r3, [r7, #23]
 800c79e:	e027      	b.n	800c7f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	0f1b      	lsrs	r3, r3, #28
 800c7a4:	2b09      	cmp	r3, #9
 800c7a6:	d80b      	bhi.n	800c7c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	0f1b      	lsrs	r3, r3, #28
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	3230      	adds	r2, #48	@ 0x30
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	701a      	strb	r2, [r3, #0]
 800c7be:	e00a      	b.n	800c7d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	0f1b      	lsrs	r3, r3, #28
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	005b      	lsls	r3, r3, #1
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	440b      	add	r3, r1
 800c7d0:	3237      	adds	r2, #55	@ 0x37
 800c7d2:	b2d2      	uxtb	r2, r2
 800c7d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	011b      	lsls	r3, r3, #4
 800c7da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7ea:	7dfb      	ldrb	r3, [r7, #23]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]
 800c7f0:	7dfa      	ldrb	r2, [r7, #23]
 800c7f2:	79fb      	ldrb	r3, [r7, #7]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d3d3      	bcc.n	800c7a0 <IntToUnicode+0x18>
  }
}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
	...

0800c808 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08a      	sub	sp, #40	@ 0x28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c810:	f107 0314 	add.w	r3, r7, #20
 800c814:	2200      	movs	r2, #0
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	605a      	str	r2, [r3, #4]
 800c81a:	609a      	str	r2, [r3, #8]
 800c81c:	60da      	str	r2, [r3, #12]
 800c81e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c828:	d13a      	bne.n	800c8a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c82a:	2300      	movs	r3, #0
 800c82c:	613b      	str	r3, [r7, #16]
 800c82e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c832:	4a1d      	ldr	r2, [pc, #116]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c834:	f043 0301 	orr.w	r3, r3, #1
 800c838:	6313      	str	r3, [r2, #48]	@ 0x30
 800c83a:	4b1b      	ldr	r3, [pc, #108]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	613b      	str	r3, [r7, #16]
 800c844:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c846:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c84a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c84c:	2302      	movs	r3, #2
 800c84e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c850:	2300      	movs	r3, #0
 800c852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c854:	2303      	movs	r3, #3
 800c856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c858:	230a      	movs	r3, #10
 800c85a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c85c:	f107 0314 	add.w	r3, r7, #20
 800c860:	4619      	mov	r1, r3
 800c862:	4812      	ldr	r0, [pc, #72]	@ (800c8ac <HAL_PCD_MspInit+0xa4>)
 800c864:	f7f6 fd7c 	bl	8003360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c868:	4b0f      	ldr	r3, [pc, #60]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c86c:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c86e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c872:	6353      	str	r3, [r2, #52]	@ 0x34
 800c874:	2300      	movs	r3, #0
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c87a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c87c:	4a0a      	ldr	r2, [pc, #40]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c87e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c882:	6453      	str	r3, [r2, #68]	@ 0x44
 800c884:	4b08      	ldr	r3, [pc, #32]	@ (800c8a8 <HAL_PCD_MspInit+0xa0>)
 800c886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c88c:	60fb      	str	r3, [r7, #12]
 800c88e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c890:	2200      	movs	r2, #0
 800c892:	2100      	movs	r1, #0
 800c894:	2043      	movs	r0, #67	@ 0x43
 800c896:	f7f6 fc8c 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c89a:	2043      	movs	r0, #67	@ 0x43
 800c89c:	f7f6 fca5 	bl	80031ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8a0:	bf00      	nop
 800c8a2:	3728      	adds	r7, #40	@ 0x28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	40023800 	.word	0x40023800
 800c8ac:	40020000 	.word	0x40020000

0800c8b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7fe fb6f 	bl	800afaa <USBD_LL_SetupStage>
}
 800c8cc:	bf00      	nop
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c8e6:	78fa      	ldrb	r2, [r7, #3]
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	78fb      	ldrb	r3, [r7, #3]
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	f7fe fba9 	bl	800b054 <USBD_LL_DataOutStage>
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c91c:	78fa      	ldrb	r2, [r7, #3]
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4613      	mov	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	440b      	add	r3, r1
 800c92a:	3320      	adds	r3, #32
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	78fb      	ldrb	r3, [r7, #3]
 800c930:	4619      	mov	r1, r3
 800c932:	f7fe fc42 	bl	800b1ba <USBD_LL_DataInStage>
}
 800c936:	bf00      	nop
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fd7c 	bl	800b44a <USBD_LL_SOF>
}
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c962:	2301      	movs	r3, #1
 800c964:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	79db      	ldrb	r3, [r3, #7]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]
 800c972:	e008      	b.n	800c986 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	79db      	ldrb	r3, [r3, #7]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d102      	bne.n	800c982 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c97c:	2301      	movs	r3, #1
 800c97e:	73fb      	strb	r3, [r7, #15]
 800c980:	e001      	b.n	800c986 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c982:	f7f5 fa95 	bl	8001eb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c98c:	7bfa      	ldrb	r2, [r7, #15]
 800c98e:	4611      	mov	r1, r2
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fd16 	bl	800b3c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe fcbe 	bl	800b31e <USBD_LL_Reset>
}
 800c9a2:	bf00      	nop
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
	...

0800c9ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fe fd11 	bl	800b3e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6812      	ldr	r2, [r2, #0]
 800c9ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c9d2:	f043 0301 	orr.w	r3, r3, #1
 800c9d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	7adb      	ldrb	r3, [r3, #11]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d005      	beq.n	800c9ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9e0:	4b04      	ldr	r3, [pc, #16]	@ (800c9f4 <HAL_PCD_SuspendCallback+0x48>)
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	4a03      	ldr	r2, [pc, #12]	@ (800c9f4 <HAL_PCD_SuspendCallback+0x48>)
 800c9e6:	f043 0306 	orr.w	r3, r3, #6
 800c9ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	e000ed00 	.word	0xe000ed00

0800c9f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fe fd07 	bl	800b41a <USBD_LL_Resume>
}
 800ca0c:	bf00      	nop
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca26:	78fa      	ldrb	r2, [r7, #3]
 800ca28:	4611      	mov	r1, r2
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe fd5f 	bl	800b4ee <USBD_LL_IsoOUTIncomplete>
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca4a:	78fa      	ldrb	r2, [r7, #3]
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fd1b 	bl	800b48a <USBD_LL_IsoINIncomplete>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fd71 	bl	800b552 <USBD_LL_DevConnected>
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe fd6e 	bl	800b568 <USBD_LL_DevDisconnected>
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d13c      	bne.n	800cb1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800caa4:	4a20      	ldr	r2, [pc, #128]	@ (800cb28 <USBD_LL_Init+0x94>)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a1e      	ldr	r2, [pc, #120]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cab0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cab4:	4b1c      	ldr	r3, [pc, #112]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cab6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800caba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cabc:	4b1a      	ldr	r3, [pc, #104]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cabe:	2204      	movs	r2, #4
 800cac0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cac2:	4b19      	ldr	r3, [pc, #100]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cac4:	2202      	movs	r2, #2
 800cac6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cac8:	4b17      	ldr	r3, [pc, #92]	@ (800cb28 <USBD_LL_Init+0x94>)
 800caca:	2200      	movs	r2, #0
 800cacc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cace:	4b16      	ldr	r3, [pc, #88]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cad0:	2202      	movs	r2, #2
 800cad2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cad4:	4b14      	ldr	r3, [pc, #80]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cada:	4b13      	ldr	r3, [pc, #76]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cadc:	2200      	movs	r2, #0
 800cade:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cae0:	4b11      	ldr	r3, [pc, #68]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cae6:	4b10      	ldr	r3, [pc, #64]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cae8:	2200      	movs	r2, #0
 800caea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800caec:	4b0e      	ldr	r3, [pc, #56]	@ (800cb28 <USBD_LL_Init+0x94>)
 800caee:	2200      	movs	r2, #0
 800caf0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800caf2:	480d      	ldr	r0, [pc, #52]	@ (800cb28 <USBD_LL_Init+0x94>)
 800caf4:	f7f7 f82a 	bl	8003b4c <HAL_PCD_Init>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cafe:	f7f5 f9d7 	bl	8001eb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb02:	2180      	movs	r1, #128	@ 0x80
 800cb04:	4808      	ldr	r0, [pc, #32]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cb06:	f7f8 fa56 	bl	8004fb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb0a:	2240      	movs	r2, #64	@ 0x40
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	4806      	ldr	r0, [pc, #24]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cb10:	f7f8 fa0a 	bl	8004f28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb14:	2280      	movs	r2, #128	@ 0x80
 800cb16:	2101      	movs	r1, #1
 800cb18:	4803      	ldr	r0, [pc, #12]	@ (800cb28 <USBD_LL_Init+0x94>)
 800cb1a:	f7f8 fa05 	bl	8004f28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20001d54 	.word	0x20001d54

0800cb2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f7 f911 	bl	8003d6a <HAL_PCD_Start>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 f942 	bl	800cdd8 <USBD_Get_USB_Status>
 800cb54:	4603      	mov	r3, r0
 800cb56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b084      	sub	sp, #16
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	4608      	mov	r0, r1
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	461a      	mov	r2, r3
 800cb70:	4603      	mov	r3, r0
 800cb72:	70fb      	strb	r3, [r7, #3]
 800cb74:	460b      	mov	r3, r1
 800cb76:	70bb      	strb	r3, [r7, #2]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb8a:	78bb      	ldrb	r3, [r7, #2]
 800cb8c:	883a      	ldrh	r2, [r7, #0]
 800cb8e:	78f9      	ldrb	r1, [r7, #3]
 800cb90:	f7f7 fde5 	bl	800475e <HAL_PCD_EP_Open>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f000 f91c 	bl	800cdd8 <USBD_Get_USB_Status>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbc8:	78fa      	ldrb	r2, [r7, #3]
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7f7 fe30 	bl	8004832 <HAL_PCD_EP_Close>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f8fd 	bl	800cdd8 <USBD_Get_USB_Status>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc06:	78fa      	ldrb	r2, [r7, #3]
 800cc08:	4611      	mov	r1, r2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7f7 fee8 	bl	80049e0 <HAL_PCD_EP_SetStall>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 f8de 	bl	800cdd8 <USBD_Get_USB_Status>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	460b      	mov	r3, r1
 800cc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc44:	78fa      	ldrb	r2, [r7, #3]
 800cc46:	4611      	mov	r1, r2
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f7 ff2c 	bl	8004aa6 <HAL_PCD_EP_ClrStall>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f8bf 	bl	800cdd8 <USBD_Get_USB_Status>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	da0b      	bge.n	800cc9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	440b      	add	r3, r1
 800cc96:	3316      	adds	r3, #22
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	e00b      	b.n	800ccb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	4613      	mov	r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	4413      	add	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	440b      	add	r3, r1
 800ccae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ccb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccda:	78fa      	ldrb	r2, [r7, #3]
 800ccdc:	4611      	mov	r1, r2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7f7 fd19 	bl	8004716 <HAL_PCD_SetAddress>
 800cce4:	4603      	mov	r3, r0
 800cce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 f874 	bl	800cdd8 <USBD_Get_USB_Status>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b086      	sub	sp, #24
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd1c:	7af9      	ldrb	r1, [r7, #11]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	f7f7 fe23 	bl	800496c <HAL_PCD_EP_Transmit>
 800cd26:	4603      	mov	r3, r0
 800cd28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f000 f853 	bl	800cdd8 <USBD_Get_USB_Status>
 800cd32:	4603      	mov	r3, r0
 800cd34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd36:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	607a      	str	r2, [r7, #4]
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd5e:	7af9      	ldrb	r1, [r7, #11]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	f7f7 fdaf 	bl	80048c6 <HAL_PCD_EP_Receive>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f000 f832 	bl	800cdd8 <USBD_Get_USB_Status>
 800cd74:	4603      	mov	r3, r0
 800cd76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd78:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3718      	adds	r7, #24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b082      	sub	sp, #8
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd94:	78fa      	ldrb	r2, [r7, #3]
 800cd96:	4611      	mov	r1, r2
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7f7 fdcf 	bl	800493c <HAL_PCD_EP_GetRxCount>
 800cd9e:	4603      	mov	r3, r0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cdb0:	4b03      	ldr	r3, [pc, #12]	@ (800cdc0 <USBD_static_malloc+0x18>)
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	20002238 	.word	0x20002238

0800cdc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]

}
 800cdcc:	bf00      	nop
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	4603      	mov	r3, r0
 800cde0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cde6:	79fb      	ldrb	r3, [r7, #7]
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d817      	bhi.n	800ce1c <USBD_Get_USB_Status+0x44>
 800cdec:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf4 <USBD_Get_USB_Status+0x1c>)
 800cdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf2:	bf00      	nop
 800cdf4:	0800ce05 	.word	0x0800ce05
 800cdf8:	0800ce0b 	.word	0x0800ce0b
 800cdfc:	0800ce11 	.word	0x0800ce11
 800ce00:	0800ce17 	.word	0x0800ce17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	73fb      	strb	r3, [r7, #15]
    break;
 800ce08:	e00b      	b.n	800ce22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce0e:	e008      	b.n	800ce22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce10:	2301      	movs	r3, #1
 800ce12:	73fb      	strb	r3, [r7, #15]
    break;
 800ce14:	e005      	b.n	800ce22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	73fb      	strb	r3, [r7, #15]
    break;
 800ce1a:	e002      	b.n	800ce22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce20:	bf00      	nop
  }
  return usb_status;
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <memset>:
 800ce30:	4402      	add	r2, r0
 800ce32:	4603      	mov	r3, r0
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d100      	bne.n	800ce3a <memset+0xa>
 800ce38:	4770      	bx	lr
 800ce3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce3e:	e7f9      	b.n	800ce34 <memset+0x4>

0800ce40 <__errno>:
 800ce40:	4b01      	ldr	r3, [pc, #4]	@ (800ce48 <__errno+0x8>)
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	2000010c 	.word	0x2000010c

0800ce4c <__libc_init_array>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ce84 <__libc_init_array+0x38>)
 800ce50:	4c0d      	ldr	r4, [pc, #52]	@ (800ce88 <__libc_init_array+0x3c>)
 800ce52:	1b64      	subs	r4, r4, r5
 800ce54:	10a4      	asrs	r4, r4, #2
 800ce56:	2600      	movs	r6, #0
 800ce58:	42a6      	cmp	r6, r4
 800ce5a:	d109      	bne.n	800ce70 <__libc_init_array+0x24>
 800ce5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ce8c <__libc_init_array+0x40>)
 800ce5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ce90 <__libc_init_array+0x44>)
 800ce60:	f001 fc06 	bl	800e670 <_init>
 800ce64:	1b64      	subs	r4, r4, r5
 800ce66:	10a4      	asrs	r4, r4, #2
 800ce68:	2600      	movs	r6, #0
 800ce6a:	42a6      	cmp	r6, r4
 800ce6c:	d105      	bne.n	800ce7a <__libc_init_array+0x2e>
 800ce6e:	bd70      	pop	{r4, r5, r6, pc}
 800ce70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce74:	4798      	blx	r3
 800ce76:	3601      	adds	r6, #1
 800ce78:	e7ee      	b.n	800ce58 <__libc_init_array+0xc>
 800ce7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce7e:	4798      	blx	r3
 800ce80:	3601      	adds	r6, #1
 800ce82:	e7f2      	b.n	800ce6a <__libc_init_array+0x1e>
 800ce84:	0800e970 	.word	0x0800e970
 800ce88:	0800e970 	.word	0x0800e970
 800ce8c:	0800e970 	.word	0x0800e970
 800ce90:	0800e974 	.word	0x0800e974

0800ce94 <atan2>:
 800ce94:	f000 bb34 	b.w	800d500 <__ieee754_atan2>

0800ce98 <sqrt>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	ed2d 8b02 	vpush	{d8}
 800ce9e:	ec55 4b10 	vmov	r4, r5, d0
 800cea2:	f000 f8cd 	bl	800d040 <__ieee754_sqrt>
 800cea6:	4622      	mov	r2, r4
 800cea8:	462b      	mov	r3, r5
 800ceaa:	4620      	mov	r0, r4
 800ceac:	4629      	mov	r1, r5
 800ceae:	eeb0 8a40 	vmov.f32	s16, s0
 800ceb2:	eef0 8a60 	vmov.f32	s17, s1
 800ceb6:	f7f3 fddd 	bl	8000a74 <__aeabi_dcmpun>
 800ceba:	b990      	cbnz	r0, 800cee2 <sqrt+0x4a>
 800cebc:	2200      	movs	r2, #0
 800cebe:	2300      	movs	r3, #0
 800cec0:	4620      	mov	r0, r4
 800cec2:	4629      	mov	r1, r5
 800cec4:	f7f3 fdae 	bl	8000a24 <__aeabi_dcmplt>
 800cec8:	b158      	cbz	r0, 800cee2 <sqrt+0x4a>
 800ceca:	f7ff ffb9 	bl	800ce40 <__errno>
 800cece:	2321      	movs	r3, #33	@ 0x21
 800ced0:	6003      	str	r3, [r0, #0]
 800ced2:	2200      	movs	r2, #0
 800ced4:	2300      	movs	r3, #0
 800ced6:	4610      	mov	r0, r2
 800ced8:	4619      	mov	r1, r3
 800ceda:	f7f3 fc5b 	bl	8000794 <__aeabi_ddiv>
 800cede:	ec41 0b18 	vmov	d8, r0, r1
 800cee2:	eeb0 0a48 	vmov.f32	s0, s16
 800cee6:	eef0 0a68 	vmov.f32	s1, s17
 800ceea:	ecbd 8b02 	vpop	{d8}
 800ceee:	bd38      	pop	{r3, r4, r5, pc}

0800cef0 <cos>:
 800cef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cef2:	ec53 2b10 	vmov	r2, r3, d0
 800cef6:	4826      	ldr	r0, [pc, #152]	@ (800cf90 <cos+0xa0>)
 800cef8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cefc:	4281      	cmp	r1, r0
 800cefe:	d806      	bhi.n	800cf0e <cos+0x1e>
 800cf00:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cf88 <cos+0x98>
 800cf04:	b005      	add	sp, #20
 800cf06:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf0a:	f000 b975 	b.w	800d1f8 <__kernel_cos>
 800cf0e:	4821      	ldr	r0, [pc, #132]	@ (800cf94 <cos+0xa4>)
 800cf10:	4281      	cmp	r1, r0
 800cf12:	d908      	bls.n	800cf26 <cos+0x36>
 800cf14:	4610      	mov	r0, r2
 800cf16:	4619      	mov	r1, r3
 800cf18:	f7f3 f95a 	bl	80001d0 <__aeabi_dsub>
 800cf1c:	ec41 0b10 	vmov	d0, r0, r1
 800cf20:	b005      	add	sp, #20
 800cf22:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf26:	4668      	mov	r0, sp
 800cf28:	f000 fbb2 	bl	800d690 <__ieee754_rem_pio2>
 800cf2c:	f000 0003 	and.w	r0, r0, #3
 800cf30:	2801      	cmp	r0, #1
 800cf32:	d00b      	beq.n	800cf4c <cos+0x5c>
 800cf34:	2802      	cmp	r0, #2
 800cf36:	d015      	beq.n	800cf64 <cos+0x74>
 800cf38:	b9d8      	cbnz	r0, 800cf72 <cos+0x82>
 800cf3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf3e:	ed9d 0b00 	vldr	d0, [sp]
 800cf42:	f000 f959 	bl	800d1f8 <__kernel_cos>
 800cf46:	ec51 0b10 	vmov	r0, r1, d0
 800cf4a:	e7e7      	b.n	800cf1c <cos+0x2c>
 800cf4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf50:	ed9d 0b00 	vldr	d0, [sp]
 800cf54:	f000 fa18 	bl	800d388 <__kernel_sin>
 800cf58:	ec53 2b10 	vmov	r2, r3, d0
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cf62:	e7db      	b.n	800cf1c <cos+0x2c>
 800cf64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf68:	ed9d 0b00 	vldr	d0, [sp]
 800cf6c:	f000 f944 	bl	800d1f8 <__kernel_cos>
 800cf70:	e7f2      	b.n	800cf58 <cos+0x68>
 800cf72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf76:	ed9d 0b00 	vldr	d0, [sp]
 800cf7a:	2001      	movs	r0, #1
 800cf7c:	f000 fa04 	bl	800d388 <__kernel_sin>
 800cf80:	e7e1      	b.n	800cf46 <cos+0x56>
 800cf82:	bf00      	nop
 800cf84:	f3af 8000 	nop.w
	...
 800cf90:	3fe921fb 	.word	0x3fe921fb
 800cf94:	7fefffff 	.word	0x7fefffff

0800cf98 <sin>:
 800cf98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf9a:	ec53 2b10 	vmov	r2, r3, d0
 800cf9e:	4826      	ldr	r0, [pc, #152]	@ (800d038 <sin+0xa0>)
 800cfa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cfa4:	4281      	cmp	r1, r0
 800cfa6:	d807      	bhi.n	800cfb8 <sin+0x20>
 800cfa8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d030 <sin+0x98>
 800cfac:	2000      	movs	r0, #0
 800cfae:	b005      	add	sp, #20
 800cfb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfb4:	f000 b9e8 	b.w	800d388 <__kernel_sin>
 800cfb8:	4820      	ldr	r0, [pc, #128]	@ (800d03c <sin+0xa4>)
 800cfba:	4281      	cmp	r1, r0
 800cfbc:	d908      	bls.n	800cfd0 <sin+0x38>
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	f7f3 f905 	bl	80001d0 <__aeabi_dsub>
 800cfc6:	ec41 0b10 	vmov	d0, r0, r1
 800cfca:	b005      	add	sp, #20
 800cfcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfd0:	4668      	mov	r0, sp
 800cfd2:	f000 fb5d 	bl	800d690 <__ieee754_rem_pio2>
 800cfd6:	f000 0003 	and.w	r0, r0, #3
 800cfda:	2801      	cmp	r0, #1
 800cfdc:	d00c      	beq.n	800cff8 <sin+0x60>
 800cfde:	2802      	cmp	r0, #2
 800cfe0:	d011      	beq.n	800d006 <sin+0x6e>
 800cfe2:	b9e8      	cbnz	r0, 800d020 <sin+0x88>
 800cfe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfe8:	ed9d 0b00 	vldr	d0, [sp]
 800cfec:	2001      	movs	r0, #1
 800cfee:	f000 f9cb 	bl	800d388 <__kernel_sin>
 800cff2:	ec51 0b10 	vmov	r0, r1, d0
 800cff6:	e7e6      	b.n	800cfc6 <sin+0x2e>
 800cff8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cffc:	ed9d 0b00 	vldr	d0, [sp]
 800d000:	f000 f8fa 	bl	800d1f8 <__kernel_cos>
 800d004:	e7f5      	b.n	800cff2 <sin+0x5a>
 800d006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d00a:	ed9d 0b00 	vldr	d0, [sp]
 800d00e:	2001      	movs	r0, #1
 800d010:	f000 f9ba 	bl	800d388 <__kernel_sin>
 800d014:	ec53 2b10 	vmov	r2, r3, d0
 800d018:	4610      	mov	r0, r2
 800d01a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d01e:	e7d2      	b.n	800cfc6 <sin+0x2e>
 800d020:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d024:	ed9d 0b00 	vldr	d0, [sp]
 800d028:	f000 f8e6 	bl	800d1f8 <__kernel_cos>
 800d02c:	e7f2      	b.n	800d014 <sin+0x7c>
 800d02e:	bf00      	nop
	...
 800d038:	3fe921fb 	.word	0x3fe921fb
 800d03c:	7fefffff 	.word	0x7fefffff

0800d040 <__ieee754_sqrt>:
 800d040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	4a68      	ldr	r2, [pc, #416]	@ (800d1e8 <__ieee754_sqrt+0x1a8>)
 800d046:	ec55 4b10 	vmov	r4, r5, d0
 800d04a:	43aa      	bics	r2, r5
 800d04c:	462b      	mov	r3, r5
 800d04e:	4621      	mov	r1, r4
 800d050:	d110      	bne.n	800d074 <__ieee754_sqrt+0x34>
 800d052:	4622      	mov	r2, r4
 800d054:	4620      	mov	r0, r4
 800d056:	4629      	mov	r1, r5
 800d058:	f7f3 fa72 	bl	8000540 <__aeabi_dmul>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	4620      	mov	r0, r4
 800d062:	4629      	mov	r1, r5
 800d064:	f7f3 f8b6 	bl	80001d4 <__adddf3>
 800d068:	4604      	mov	r4, r0
 800d06a:	460d      	mov	r5, r1
 800d06c:	ec45 4b10 	vmov	d0, r4, r5
 800d070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d074:	2d00      	cmp	r5, #0
 800d076:	dc0e      	bgt.n	800d096 <__ieee754_sqrt+0x56>
 800d078:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d07c:	4322      	orrs	r2, r4
 800d07e:	d0f5      	beq.n	800d06c <__ieee754_sqrt+0x2c>
 800d080:	b19d      	cbz	r5, 800d0aa <__ieee754_sqrt+0x6a>
 800d082:	4622      	mov	r2, r4
 800d084:	4620      	mov	r0, r4
 800d086:	4629      	mov	r1, r5
 800d088:	f7f3 f8a2 	bl	80001d0 <__aeabi_dsub>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	f7f3 fb80 	bl	8000794 <__aeabi_ddiv>
 800d094:	e7e8      	b.n	800d068 <__ieee754_sqrt+0x28>
 800d096:	152a      	asrs	r2, r5, #20
 800d098:	d115      	bne.n	800d0c6 <__ieee754_sqrt+0x86>
 800d09a:	2000      	movs	r0, #0
 800d09c:	e009      	b.n	800d0b2 <__ieee754_sqrt+0x72>
 800d09e:	0acb      	lsrs	r3, r1, #11
 800d0a0:	3a15      	subs	r2, #21
 800d0a2:	0549      	lsls	r1, r1, #21
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0fa      	beq.n	800d09e <__ieee754_sqrt+0x5e>
 800d0a8:	e7f7      	b.n	800d09a <__ieee754_sqrt+0x5a>
 800d0aa:	462a      	mov	r2, r5
 800d0ac:	e7fa      	b.n	800d0a4 <__ieee754_sqrt+0x64>
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	02dc      	lsls	r4, r3, #11
 800d0b4:	d5fb      	bpl.n	800d0ae <__ieee754_sqrt+0x6e>
 800d0b6:	1e44      	subs	r4, r0, #1
 800d0b8:	1b12      	subs	r2, r2, r4
 800d0ba:	f1c0 0420 	rsb	r4, r0, #32
 800d0be:	fa21 f404 	lsr.w	r4, r1, r4
 800d0c2:	4323      	orrs	r3, r4
 800d0c4:	4081      	lsls	r1, r0
 800d0c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0ca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d0ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0d2:	07d2      	lsls	r2, r2, #31
 800d0d4:	bf5c      	itt	pl
 800d0d6:	005b      	lslpl	r3, r3, #1
 800d0d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d0dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0e0:	bf58      	it	pl
 800d0e2:	0049      	lslpl	r1, r1, #1
 800d0e4:	2600      	movs	r6, #0
 800d0e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d0ea:	106d      	asrs	r5, r5, #1
 800d0ec:	0049      	lsls	r1, r1, #1
 800d0ee:	2016      	movs	r0, #22
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d0f6:	1917      	adds	r7, r2, r4
 800d0f8:	429f      	cmp	r7, r3
 800d0fa:	bfde      	ittt	le
 800d0fc:	193a      	addle	r2, r7, r4
 800d0fe:	1bdb      	suble	r3, r3, r7
 800d100:	1936      	addle	r6, r6, r4
 800d102:	0fcf      	lsrs	r7, r1, #31
 800d104:	3801      	subs	r0, #1
 800d106:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d10a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d10e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d112:	d1f0      	bne.n	800d0f6 <__ieee754_sqrt+0xb6>
 800d114:	4604      	mov	r4, r0
 800d116:	2720      	movs	r7, #32
 800d118:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d11c:	429a      	cmp	r2, r3
 800d11e:	eb00 0e0c 	add.w	lr, r0, ip
 800d122:	db02      	blt.n	800d12a <__ieee754_sqrt+0xea>
 800d124:	d113      	bne.n	800d14e <__ieee754_sqrt+0x10e>
 800d126:	458e      	cmp	lr, r1
 800d128:	d811      	bhi.n	800d14e <__ieee754_sqrt+0x10e>
 800d12a:	f1be 0f00 	cmp.w	lr, #0
 800d12e:	eb0e 000c 	add.w	r0, lr, ip
 800d132:	da42      	bge.n	800d1ba <__ieee754_sqrt+0x17a>
 800d134:	2800      	cmp	r0, #0
 800d136:	db40      	blt.n	800d1ba <__ieee754_sqrt+0x17a>
 800d138:	f102 0801 	add.w	r8, r2, #1
 800d13c:	1a9b      	subs	r3, r3, r2
 800d13e:	458e      	cmp	lr, r1
 800d140:	bf88      	it	hi
 800d142:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d146:	eba1 010e 	sub.w	r1, r1, lr
 800d14a:	4464      	add	r4, ip
 800d14c:	4642      	mov	r2, r8
 800d14e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d152:	3f01      	subs	r7, #1
 800d154:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d158:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d15c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d160:	d1dc      	bne.n	800d11c <__ieee754_sqrt+0xdc>
 800d162:	4319      	orrs	r1, r3
 800d164:	d01b      	beq.n	800d19e <__ieee754_sqrt+0x15e>
 800d166:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d1ec <__ieee754_sqrt+0x1ac>
 800d16a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d1f0 <__ieee754_sqrt+0x1b0>
 800d16e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d172:	e9db 2300 	ldrd	r2, r3, [fp]
 800d176:	f7f3 f82b 	bl	80001d0 <__aeabi_dsub>
 800d17a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	4640      	mov	r0, r8
 800d184:	4649      	mov	r1, r9
 800d186:	f7f3 fc57 	bl	8000a38 <__aeabi_dcmple>
 800d18a:	b140      	cbz	r0, 800d19e <__ieee754_sqrt+0x15e>
 800d18c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d190:	e9da 0100 	ldrd	r0, r1, [sl]
 800d194:	e9db 2300 	ldrd	r2, r3, [fp]
 800d198:	d111      	bne.n	800d1be <__ieee754_sqrt+0x17e>
 800d19a:	3601      	adds	r6, #1
 800d19c:	463c      	mov	r4, r7
 800d19e:	1072      	asrs	r2, r6, #1
 800d1a0:	0863      	lsrs	r3, r4, #1
 800d1a2:	07f1      	lsls	r1, r6, #31
 800d1a4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d1a8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d1ac:	bf48      	it	mi
 800d1ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d1b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	e756      	b.n	800d068 <__ieee754_sqrt+0x28>
 800d1ba:	4690      	mov	r8, r2
 800d1bc:	e7be      	b.n	800d13c <__ieee754_sqrt+0xfc>
 800d1be:	f7f3 f809 	bl	80001d4 <__adddf3>
 800d1c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	f7f3 fc29 	bl	8000a24 <__aeabi_dcmplt>
 800d1d2:	b120      	cbz	r0, 800d1de <__ieee754_sqrt+0x19e>
 800d1d4:	1ca0      	adds	r0, r4, #2
 800d1d6:	bf08      	it	eq
 800d1d8:	3601      	addeq	r6, #1
 800d1da:	3402      	adds	r4, #2
 800d1dc:	e7df      	b.n	800d19e <__ieee754_sqrt+0x15e>
 800d1de:	1c63      	adds	r3, r4, #1
 800d1e0:	f023 0401 	bic.w	r4, r3, #1
 800d1e4:	e7db      	b.n	800d19e <__ieee754_sqrt+0x15e>
 800d1e6:	bf00      	nop
 800d1e8:	7ff00000 	.word	0x7ff00000
 800d1ec:	20000168 	.word	0x20000168
 800d1f0:	20000160 	.word	0x20000160
 800d1f4:	00000000 	.word	0x00000000

0800d1f8 <__kernel_cos>:
 800d1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	ec57 6b10 	vmov	r6, r7, d0
 800d200:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d204:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d208:	ed8d 1b00 	vstr	d1, [sp]
 800d20c:	d206      	bcs.n	800d21c <__kernel_cos+0x24>
 800d20e:	4630      	mov	r0, r6
 800d210:	4639      	mov	r1, r7
 800d212:	f7f3 fc45 	bl	8000aa0 <__aeabi_d2iz>
 800d216:	2800      	cmp	r0, #0
 800d218:	f000 8088 	beq.w	800d32c <__kernel_cos+0x134>
 800d21c:	4632      	mov	r2, r6
 800d21e:	463b      	mov	r3, r7
 800d220:	4630      	mov	r0, r6
 800d222:	4639      	mov	r1, r7
 800d224:	f7f3 f98c 	bl	8000540 <__aeabi_dmul>
 800d228:	4b51      	ldr	r3, [pc, #324]	@ (800d370 <__kernel_cos+0x178>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	4604      	mov	r4, r0
 800d22e:	460d      	mov	r5, r1
 800d230:	f7f3 f986 	bl	8000540 <__aeabi_dmul>
 800d234:	a340      	add	r3, pc, #256	@ (adr r3, 800d338 <__kernel_cos+0x140>)
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	4682      	mov	sl, r0
 800d23c:	468b      	mov	fp, r1
 800d23e:	4620      	mov	r0, r4
 800d240:	4629      	mov	r1, r5
 800d242:	f7f3 f97d 	bl	8000540 <__aeabi_dmul>
 800d246:	a33e      	add	r3, pc, #248	@ (adr r3, 800d340 <__kernel_cos+0x148>)
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	f7f2 ffc2 	bl	80001d4 <__adddf3>
 800d250:	4622      	mov	r2, r4
 800d252:	462b      	mov	r3, r5
 800d254:	f7f3 f974 	bl	8000540 <__aeabi_dmul>
 800d258:	a33b      	add	r3, pc, #236	@ (adr r3, 800d348 <__kernel_cos+0x150>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f2 ffb7 	bl	80001d0 <__aeabi_dsub>
 800d262:	4622      	mov	r2, r4
 800d264:	462b      	mov	r3, r5
 800d266:	f7f3 f96b 	bl	8000540 <__aeabi_dmul>
 800d26a:	a339      	add	r3, pc, #228	@ (adr r3, 800d350 <__kernel_cos+0x158>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	f7f2 ffb0 	bl	80001d4 <__adddf3>
 800d274:	4622      	mov	r2, r4
 800d276:	462b      	mov	r3, r5
 800d278:	f7f3 f962 	bl	8000540 <__aeabi_dmul>
 800d27c:	a336      	add	r3, pc, #216	@ (adr r3, 800d358 <__kernel_cos+0x160>)
 800d27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d282:	f7f2 ffa5 	bl	80001d0 <__aeabi_dsub>
 800d286:	4622      	mov	r2, r4
 800d288:	462b      	mov	r3, r5
 800d28a:	f7f3 f959 	bl	8000540 <__aeabi_dmul>
 800d28e:	a334      	add	r3, pc, #208	@ (adr r3, 800d360 <__kernel_cos+0x168>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f7f2 ff9e 	bl	80001d4 <__adddf3>
 800d298:	4622      	mov	r2, r4
 800d29a:	462b      	mov	r3, r5
 800d29c:	f7f3 f950 	bl	8000540 <__aeabi_dmul>
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	f7f3 f94c 	bl	8000540 <__aeabi_dmul>
 800d2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	f7f3 f944 	bl	8000540 <__aeabi_dmul>
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	4629      	mov	r1, r5
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f7f2 ff86 	bl	80001d0 <__aeabi_dsub>
 800d2c4:	4b2b      	ldr	r3, [pc, #172]	@ (800d374 <__kernel_cos+0x17c>)
 800d2c6:	4598      	cmp	r8, r3
 800d2c8:	4606      	mov	r6, r0
 800d2ca:	460f      	mov	r7, r1
 800d2cc:	d810      	bhi.n	800d2f0 <__kernel_cos+0xf8>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	4650      	mov	r0, sl
 800d2d4:	4659      	mov	r1, fp
 800d2d6:	f7f2 ff7b 	bl	80001d0 <__aeabi_dsub>
 800d2da:	460b      	mov	r3, r1
 800d2dc:	4926      	ldr	r1, [pc, #152]	@ (800d378 <__kernel_cos+0x180>)
 800d2de:	4602      	mov	r2, r0
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	f7f2 ff75 	bl	80001d0 <__aeabi_dsub>
 800d2e6:	ec41 0b10 	vmov	d0, r0, r1
 800d2ea:	b003      	add	sp, #12
 800d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f0:	4b22      	ldr	r3, [pc, #136]	@ (800d37c <__kernel_cos+0x184>)
 800d2f2:	4921      	ldr	r1, [pc, #132]	@ (800d378 <__kernel_cos+0x180>)
 800d2f4:	4598      	cmp	r8, r3
 800d2f6:	bf8c      	ite	hi
 800d2f8:	4d21      	ldrhi	r5, [pc, #132]	@ (800d380 <__kernel_cos+0x188>)
 800d2fa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d2fe:	2400      	movs	r4, #0
 800d300:	4622      	mov	r2, r4
 800d302:	462b      	mov	r3, r5
 800d304:	2000      	movs	r0, #0
 800d306:	f7f2 ff63 	bl	80001d0 <__aeabi_dsub>
 800d30a:	4622      	mov	r2, r4
 800d30c:	4680      	mov	r8, r0
 800d30e:	4689      	mov	r9, r1
 800d310:	462b      	mov	r3, r5
 800d312:	4650      	mov	r0, sl
 800d314:	4659      	mov	r1, fp
 800d316:	f7f2 ff5b 	bl	80001d0 <__aeabi_dsub>
 800d31a:	4632      	mov	r2, r6
 800d31c:	463b      	mov	r3, r7
 800d31e:	f7f2 ff57 	bl	80001d0 <__aeabi_dsub>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4640      	mov	r0, r8
 800d328:	4649      	mov	r1, r9
 800d32a:	e7da      	b.n	800d2e2 <__kernel_cos+0xea>
 800d32c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d368 <__kernel_cos+0x170>
 800d330:	e7db      	b.n	800d2ea <__kernel_cos+0xf2>
 800d332:	bf00      	nop
 800d334:	f3af 8000 	nop.w
 800d338:	be8838d4 	.word	0xbe8838d4
 800d33c:	bda8fae9 	.word	0xbda8fae9
 800d340:	bdb4b1c4 	.word	0xbdb4b1c4
 800d344:	3e21ee9e 	.word	0x3e21ee9e
 800d348:	809c52ad 	.word	0x809c52ad
 800d34c:	3e927e4f 	.word	0x3e927e4f
 800d350:	19cb1590 	.word	0x19cb1590
 800d354:	3efa01a0 	.word	0x3efa01a0
 800d358:	16c15177 	.word	0x16c15177
 800d35c:	3f56c16c 	.word	0x3f56c16c
 800d360:	5555554c 	.word	0x5555554c
 800d364:	3fa55555 	.word	0x3fa55555
 800d368:	00000000 	.word	0x00000000
 800d36c:	3ff00000 	.word	0x3ff00000
 800d370:	3fe00000 	.word	0x3fe00000
 800d374:	3fd33332 	.word	0x3fd33332
 800d378:	3ff00000 	.word	0x3ff00000
 800d37c:	3fe90000 	.word	0x3fe90000
 800d380:	3fd20000 	.word	0x3fd20000
 800d384:	00000000 	.word	0x00000000

0800d388 <__kernel_sin>:
 800d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	ec55 4b10 	vmov	r4, r5, d0
 800d390:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d394:	b085      	sub	sp, #20
 800d396:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d39a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d39e:	4680      	mov	r8, r0
 800d3a0:	d205      	bcs.n	800d3ae <__kernel_sin+0x26>
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	f7f3 fb7b 	bl	8000aa0 <__aeabi_d2iz>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d052      	beq.n	800d454 <__kernel_sin+0xcc>
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	f7f3 f8c3 	bl	8000540 <__aeabi_dmul>
 800d3ba:	4682      	mov	sl, r0
 800d3bc:	468b      	mov	fp, r1
 800d3be:	4602      	mov	r2, r0
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	f7f3 f8bb 	bl	8000540 <__aeabi_dmul>
 800d3ca:	a342      	add	r3, pc, #264	@ (adr r3, 800d4d4 <__kernel_sin+0x14c>)
 800d3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d0:	e9cd 0100 	strd	r0, r1, [sp]
 800d3d4:	4650      	mov	r0, sl
 800d3d6:	4659      	mov	r1, fp
 800d3d8:	f7f3 f8b2 	bl	8000540 <__aeabi_dmul>
 800d3dc:	a33f      	add	r3, pc, #252	@ (adr r3, 800d4dc <__kernel_sin+0x154>)
 800d3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e2:	f7f2 fef5 	bl	80001d0 <__aeabi_dsub>
 800d3e6:	4652      	mov	r2, sl
 800d3e8:	465b      	mov	r3, fp
 800d3ea:	f7f3 f8a9 	bl	8000540 <__aeabi_dmul>
 800d3ee:	a33d      	add	r3, pc, #244	@ (adr r3, 800d4e4 <__kernel_sin+0x15c>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f7f2 feee 	bl	80001d4 <__adddf3>
 800d3f8:	4652      	mov	r2, sl
 800d3fa:	465b      	mov	r3, fp
 800d3fc:	f7f3 f8a0 	bl	8000540 <__aeabi_dmul>
 800d400:	a33a      	add	r3, pc, #232	@ (adr r3, 800d4ec <__kernel_sin+0x164>)
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	f7f2 fee3 	bl	80001d0 <__aeabi_dsub>
 800d40a:	4652      	mov	r2, sl
 800d40c:	465b      	mov	r3, fp
 800d40e:	f7f3 f897 	bl	8000540 <__aeabi_dmul>
 800d412:	a338      	add	r3, pc, #224	@ (adr r3, 800d4f4 <__kernel_sin+0x16c>)
 800d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d418:	f7f2 fedc 	bl	80001d4 <__adddf3>
 800d41c:	4606      	mov	r6, r0
 800d41e:	460f      	mov	r7, r1
 800d420:	f1b8 0f00 	cmp.w	r8, #0
 800d424:	d11b      	bne.n	800d45e <__kernel_sin+0xd6>
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	4650      	mov	r0, sl
 800d42c:	4659      	mov	r1, fp
 800d42e:	f7f3 f887 	bl	8000540 <__aeabi_dmul>
 800d432:	a325      	add	r3, pc, #148	@ (adr r3, 800d4c8 <__kernel_sin+0x140>)
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	f7f2 feca 	bl	80001d0 <__aeabi_dsub>
 800d43c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d440:	f7f3 f87e 	bl	8000540 <__aeabi_dmul>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4620      	mov	r0, r4
 800d44a:	4629      	mov	r1, r5
 800d44c:	f7f2 fec2 	bl	80001d4 <__adddf3>
 800d450:	4604      	mov	r4, r0
 800d452:	460d      	mov	r5, r1
 800d454:	ec45 4b10 	vmov	d0, r4, r5
 800d458:	b005      	add	sp, #20
 800d45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d462:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d0 <__kernel_sin+0x148>)
 800d464:	2200      	movs	r2, #0
 800d466:	f7f3 f86b 	bl	8000540 <__aeabi_dmul>
 800d46a:	4632      	mov	r2, r6
 800d46c:	4680      	mov	r8, r0
 800d46e:	4689      	mov	r9, r1
 800d470:	463b      	mov	r3, r7
 800d472:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d476:	f7f3 f863 	bl	8000540 <__aeabi_dmul>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4640      	mov	r0, r8
 800d480:	4649      	mov	r1, r9
 800d482:	f7f2 fea5 	bl	80001d0 <__aeabi_dsub>
 800d486:	4652      	mov	r2, sl
 800d488:	465b      	mov	r3, fp
 800d48a:	f7f3 f859 	bl	8000540 <__aeabi_dmul>
 800d48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d492:	f7f2 fe9d 	bl	80001d0 <__aeabi_dsub>
 800d496:	a30c      	add	r3, pc, #48	@ (adr r3, 800d4c8 <__kernel_sin+0x140>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	4606      	mov	r6, r0
 800d49e:	460f      	mov	r7, r1
 800d4a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4a4:	f7f3 f84c 	bl	8000540 <__aeabi_dmul>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	4639      	mov	r1, r7
 800d4b0:	f7f2 fe90 	bl	80001d4 <__adddf3>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	f7f2 fe88 	bl	80001d0 <__aeabi_dsub>
 800d4c0:	e7c6      	b.n	800d450 <__kernel_sin+0xc8>
 800d4c2:	bf00      	nop
 800d4c4:	f3af 8000 	nop.w
 800d4c8:	55555549 	.word	0x55555549
 800d4cc:	3fc55555 	.word	0x3fc55555
 800d4d0:	3fe00000 	.word	0x3fe00000
 800d4d4:	5acfd57c 	.word	0x5acfd57c
 800d4d8:	3de5d93a 	.word	0x3de5d93a
 800d4dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d4e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d4e4:	57b1fe7d 	.word	0x57b1fe7d
 800d4e8:	3ec71de3 	.word	0x3ec71de3
 800d4ec:	19c161d5 	.word	0x19c161d5
 800d4f0:	3f2a01a0 	.word	0x3f2a01a0
 800d4f4:	1110f8a6 	.word	0x1110f8a6
 800d4f8:	3f811111 	.word	0x3f811111
 800d4fc:	00000000 	.word	0x00000000

0800d500 <__ieee754_atan2>:
 800d500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d504:	ec57 6b11 	vmov	r6, r7, d1
 800d508:	4273      	negs	r3, r6
 800d50a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d688 <__ieee754_atan2+0x188>
 800d50e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d512:	4333      	orrs	r3, r6
 800d514:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d518:	4543      	cmp	r3, r8
 800d51a:	ec51 0b10 	vmov	r0, r1, d0
 800d51e:	4635      	mov	r5, r6
 800d520:	d809      	bhi.n	800d536 <__ieee754_atan2+0x36>
 800d522:	4244      	negs	r4, r0
 800d524:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d528:	4304      	orrs	r4, r0
 800d52a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d52e:	4544      	cmp	r4, r8
 800d530:	468e      	mov	lr, r1
 800d532:	4681      	mov	r9, r0
 800d534:	d907      	bls.n	800d546 <__ieee754_atan2+0x46>
 800d536:	4632      	mov	r2, r6
 800d538:	463b      	mov	r3, r7
 800d53a:	f7f2 fe4b 	bl	80001d4 <__adddf3>
 800d53e:	ec41 0b10 	vmov	d0, r0, r1
 800d542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d546:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d54a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d54e:	4334      	orrs	r4, r6
 800d550:	d103      	bne.n	800d55a <__ieee754_atan2+0x5a>
 800d552:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d556:	f000 ba97 	b.w	800da88 <atan>
 800d55a:	17bc      	asrs	r4, r7, #30
 800d55c:	f004 0402 	and.w	r4, r4, #2
 800d560:	ea53 0909 	orrs.w	r9, r3, r9
 800d564:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d568:	d107      	bne.n	800d57a <__ieee754_atan2+0x7a>
 800d56a:	2c02      	cmp	r4, #2
 800d56c:	d05f      	beq.n	800d62e <__ieee754_atan2+0x12e>
 800d56e:	2c03      	cmp	r4, #3
 800d570:	d1e5      	bne.n	800d53e <__ieee754_atan2+0x3e>
 800d572:	a141      	add	r1, pc, #260	@ (adr r1, 800d678 <__ieee754_atan2+0x178>)
 800d574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d578:	e7e1      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d57a:	4315      	orrs	r5, r2
 800d57c:	d106      	bne.n	800d58c <__ieee754_atan2+0x8c>
 800d57e:	f1be 0f00 	cmp.w	lr, #0
 800d582:	da5f      	bge.n	800d644 <__ieee754_atan2+0x144>
 800d584:	a13e      	add	r1, pc, #248	@ (adr r1, 800d680 <__ieee754_atan2+0x180>)
 800d586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d58a:	e7d8      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d58c:	4542      	cmp	r2, r8
 800d58e:	d10f      	bne.n	800d5b0 <__ieee754_atan2+0xb0>
 800d590:	4293      	cmp	r3, r2
 800d592:	f104 34ff 	add.w	r4, r4, #4294967295
 800d596:	d107      	bne.n	800d5a8 <__ieee754_atan2+0xa8>
 800d598:	2c02      	cmp	r4, #2
 800d59a:	d84c      	bhi.n	800d636 <__ieee754_atan2+0x136>
 800d59c:	4b34      	ldr	r3, [pc, #208]	@ (800d670 <__ieee754_atan2+0x170>)
 800d59e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5a6:	e7ca      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d5a8:	2c02      	cmp	r4, #2
 800d5aa:	d848      	bhi.n	800d63e <__ieee754_atan2+0x13e>
 800d5ac:	4b31      	ldr	r3, [pc, #196]	@ (800d674 <__ieee754_atan2+0x174>)
 800d5ae:	e7f6      	b.n	800d59e <__ieee754_atan2+0x9e>
 800d5b0:	4543      	cmp	r3, r8
 800d5b2:	d0e4      	beq.n	800d57e <__ieee754_atan2+0x7e>
 800d5b4:	1a9b      	subs	r3, r3, r2
 800d5b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d5ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d5be:	da1e      	bge.n	800d5fe <__ieee754_atan2+0xfe>
 800d5c0:	2f00      	cmp	r7, #0
 800d5c2:	da01      	bge.n	800d5c8 <__ieee754_atan2+0xc8>
 800d5c4:	323c      	adds	r2, #60	@ 0x3c
 800d5c6:	db1e      	blt.n	800d606 <__ieee754_atan2+0x106>
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	f7f3 f8e2 	bl	8000794 <__aeabi_ddiv>
 800d5d0:	ec41 0b10 	vmov	d0, r0, r1
 800d5d4:	f000 fbf0 	bl	800ddb8 <fabs>
 800d5d8:	f000 fa56 	bl	800da88 <atan>
 800d5dc:	ec51 0b10 	vmov	r0, r1, d0
 800d5e0:	2c01      	cmp	r4, #1
 800d5e2:	d013      	beq.n	800d60c <__ieee754_atan2+0x10c>
 800d5e4:	2c02      	cmp	r4, #2
 800d5e6:	d015      	beq.n	800d614 <__ieee754_atan2+0x114>
 800d5e8:	2c00      	cmp	r4, #0
 800d5ea:	d0a8      	beq.n	800d53e <__ieee754_atan2+0x3e>
 800d5ec:	a318      	add	r3, pc, #96	@ (adr r3, 800d650 <__ieee754_atan2+0x150>)
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	f7f2 fded 	bl	80001d0 <__aeabi_dsub>
 800d5f6:	a318      	add	r3, pc, #96	@ (adr r3, 800d658 <__ieee754_atan2+0x158>)
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	e014      	b.n	800d628 <__ieee754_atan2+0x128>
 800d5fe:	a118      	add	r1, pc, #96	@ (adr r1, 800d660 <__ieee754_atan2+0x160>)
 800d600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d604:	e7ec      	b.n	800d5e0 <__ieee754_atan2+0xe0>
 800d606:	2000      	movs	r0, #0
 800d608:	2100      	movs	r1, #0
 800d60a:	e7e9      	b.n	800d5e0 <__ieee754_atan2+0xe0>
 800d60c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d610:	4619      	mov	r1, r3
 800d612:	e794      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d614:	a30e      	add	r3, pc, #56	@ (adr r3, 800d650 <__ieee754_atan2+0x150>)
 800d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61a:	f7f2 fdd9 	bl	80001d0 <__aeabi_dsub>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	a10d      	add	r1, pc, #52	@ (adr r1, 800d658 <__ieee754_atan2+0x158>)
 800d624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d628:	f7f2 fdd2 	bl	80001d0 <__aeabi_dsub>
 800d62c:	e787      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d62e:	a10a      	add	r1, pc, #40	@ (adr r1, 800d658 <__ieee754_atan2+0x158>)
 800d630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d634:	e783      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d636:	a10c      	add	r1, pc, #48	@ (adr r1, 800d668 <__ieee754_atan2+0x168>)
 800d638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d63c:	e77f      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d63e:	2000      	movs	r0, #0
 800d640:	2100      	movs	r1, #0
 800d642:	e77c      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d644:	a106      	add	r1, pc, #24	@ (adr r1, 800d660 <__ieee754_atan2+0x160>)
 800d646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d64a:	e778      	b.n	800d53e <__ieee754_atan2+0x3e>
 800d64c:	f3af 8000 	nop.w
 800d650:	33145c07 	.word	0x33145c07
 800d654:	3ca1a626 	.word	0x3ca1a626
 800d658:	54442d18 	.word	0x54442d18
 800d65c:	400921fb 	.word	0x400921fb
 800d660:	54442d18 	.word	0x54442d18
 800d664:	3ff921fb 	.word	0x3ff921fb
 800d668:	54442d18 	.word	0x54442d18
 800d66c:	3fe921fb 	.word	0x3fe921fb
 800d670:	0800e738 	.word	0x0800e738
 800d674:	0800e720 	.word	0x0800e720
 800d678:	54442d18 	.word	0x54442d18
 800d67c:	c00921fb 	.word	0xc00921fb
 800d680:	54442d18 	.word	0x54442d18
 800d684:	bff921fb 	.word	0xbff921fb
 800d688:	7ff00000 	.word	0x7ff00000
 800d68c:	00000000 	.word	0x00000000

0800d690 <__ieee754_rem_pio2>:
 800d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d694:	ec57 6b10 	vmov	r6, r7, d0
 800d698:	4bc5      	ldr	r3, [pc, #788]	@ (800d9b0 <__ieee754_rem_pio2+0x320>)
 800d69a:	b08d      	sub	sp, #52	@ 0x34
 800d69c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d6a0:	4598      	cmp	r8, r3
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	9704      	str	r7, [sp, #16]
 800d6a6:	d807      	bhi.n	800d6b8 <__ieee754_rem_pio2+0x28>
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	ed80 0b00 	vstr	d0, [r0]
 800d6b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d6b4:	2500      	movs	r5, #0
 800d6b6:	e028      	b.n	800d70a <__ieee754_rem_pio2+0x7a>
 800d6b8:	4bbe      	ldr	r3, [pc, #760]	@ (800d9b4 <__ieee754_rem_pio2+0x324>)
 800d6ba:	4598      	cmp	r8, r3
 800d6bc:	d878      	bhi.n	800d7b0 <__ieee754_rem_pio2+0x120>
 800d6be:	9b04      	ldr	r3, [sp, #16]
 800d6c0:	4dbd      	ldr	r5, [pc, #756]	@ (800d9b8 <__ieee754_rem_pio2+0x328>)
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d978 <__ieee754_rem_pio2+0x2e8>)
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	4639      	mov	r1, r7
 800d6ce:	dd38      	ble.n	800d742 <__ieee754_rem_pio2+0xb2>
 800d6d0:	f7f2 fd7e 	bl	80001d0 <__aeabi_dsub>
 800d6d4:	45a8      	cmp	r8, r5
 800d6d6:	4606      	mov	r6, r0
 800d6d8:	460f      	mov	r7, r1
 800d6da:	d01a      	beq.n	800d712 <__ieee754_rem_pio2+0x82>
 800d6dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d980 <__ieee754_rem_pio2+0x2f0>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	f7f2 fd75 	bl	80001d0 <__aeabi_dsub>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	4680      	mov	r8, r0
 800d6ec:	4689      	mov	r9, r1
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	4639      	mov	r1, r7
 800d6f2:	f7f2 fd6d 	bl	80001d0 <__aeabi_dsub>
 800d6f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d980 <__ieee754_rem_pio2+0x2f0>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f7f2 fd68 	bl	80001d0 <__aeabi_dsub>
 800d700:	e9c4 8900 	strd	r8, r9, [r4]
 800d704:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d708:	2501      	movs	r5, #1
 800d70a:	4628      	mov	r0, r5
 800d70c:	b00d      	add	sp, #52	@ 0x34
 800d70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d712:	a39d      	add	r3, pc, #628	@ (adr r3, 800d988 <__ieee754_rem_pio2+0x2f8>)
 800d714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d718:	f7f2 fd5a 	bl	80001d0 <__aeabi_dsub>
 800d71c:	a39c      	add	r3, pc, #624	@ (adr r3, 800d990 <__ieee754_rem_pio2+0x300>)
 800d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d722:	4606      	mov	r6, r0
 800d724:	460f      	mov	r7, r1
 800d726:	f7f2 fd53 	bl	80001d0 <__aeabi_dsub>
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	4680      	mov	r8, r0
 800d730:	4689      	mov	r9, r1
 800d732:	4630      	mov	r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	f7f2 fd4b 	bl	80001d0 <__aeabi_dsub>
 800d73a:	a395      	add	r3, pc, #596	@ (adr r3, 800d990 <__ieee754_rem_pio2+0x300>)
 800d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d740:	e7dc      	b.n	800d6fc <__ieee754_rem_pio2+0x6c>
 800d742:	f7f2 fd47 	bl	80001d4 <__adddf3>
 800d746:	45a8      	cmp	r8, r5
 800d748:	4606      	mov	r6, r0
 800d74a:	460f      	mov	r7, r1
 800d74c:	d018      	beq.n	800d780 <__ieee754_rem_pio2+0xf0>
 800d74e:	a38c      	add	r3, pc, #560	@ (adr r3, 800d980 <__ieee754_rem_pio2+0x2f0>)
 800d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d754:	f7f2 fd3e 	bl	80001d4 <__adddf3>
 800d758:	4602      	mov	r2, r0
 800d75a:	460b      	mov	r3, r1
 800d75c:	4680      	mov	r8, r0
 800d75e:	4689      	mov	r9, r1
 800d760:	4630      	mov	r0, r6
 800d762:	4639      	mov	r1, r7
 800d764:	f7f2 fd34 	bl	80001d0 <__aeabi_dsub>
 800d768:	a385      	add	r3, pc, #532	@ (adr r3, 800d980 <__ieee754_rem_pio2+0x2f0>)
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	f7f2 fd31 	bl	80001d4 <__adddf3>
 800d772:	f04f 35ff 	mov.w	r5, #4294967295
 800d776:	e9c4 8900 	strd	r8, r9, [r4]
 800d77a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d77e:	e7c4      	b.n	800d70a <__ieee754_rem_pio2+0x7a>
 800d780:	a381      	add	r3, pc, #516	@ (adr r3, 800d988 <__ieee754_rem_pio2+0x2f8>)
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	f7f2 fd25 	bl	80001d4 <__adddf3>
 800d78a:	a381      	add	r3, pc, #516	@ (adr r3, 800d990 <__ieee754_rem_pio2+0x300>)
 800d78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d790:	4606      	mov	r6, r0
 800d792:	460f      	mov	r7, r1
 800d794:	f7f2 fd1e 	bl	80001d4 <__adddf3>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4680      	mov	r8, r0
 800d79e:	4689      	mov	r9, r1
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	f7f2 fd14 	bl	80001d0 <__aeabi_dsub>
 800d7a8:	a379      	add	r3, pc, #484	@ (adr r3, 800d990 <__ieee754_rem_pio2+0x300>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	e7de      	b.n	800d76e <__ieee754_rem_pio2+0xde>
 800d7b0:	4b82      	ldr	r3, [pc, #520]	@ (800d9bc <__ieee754_rem_pio2+0x32c>)
 800d7b2:	4598      	cmp	r8, r3
 800d7b4:	f200 80d1 	bhi.w	800d95a <__ieee754_rem_pio2+0x2ca>
 800d7b8:	f000 fafe 	bl	800ddb8 <fabs>
 800d7bc:	ec57 6b10 	vmov	r6, r7, d0
 800d7c0:	a375      	add	r3, pc, #468	@ (adr r3, 800d998 <__ieee754_rem_pio2+0x308>)
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7f2 feb9 	bl	8000540 <__aeabi_dmul>
 800d7ce:	4b7c      	ldr	r3, [pc, #496]	@ (800d9c0 <__ieee754_rem_pio2+0x330>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f7f2 fcff 	bl	80001d4 <__adddf3>
 800d7d6:	f7f3 f963 	bl	8000aa0 <__aeabi_d2iz>
 800d7da:	4605      	mov	r5, r0
 800d7dc:	f7f2 fe46 	bl	800046c <__aeabi_i2d>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7e8:	a363      	add	r3, pc, #396	@ (adr r3, 800d978 <__ieee754_rem_pio2+0x2e8>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f2 fea7 	bl	8000540 <__aeabi_dmul>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	f7f2 fce9 	bl	80001d0 <__aeabi_dsub>
 800d7fe:	a360      	add	r3, pc, #384	@ (adr r3, 800d980 <__ieee754_rem_pio2+0x2f0>)
 800d800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d804:	4682      	mov	sl, r0
 800d806:	468b      	mov	fp, r1
 800d808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d80c:	f7f2 fe98 	bl	8000540 <__aeabi_dmul>
 800d810:	2d1f      	cmp	r5, #31
 800d812:	4606      	mov	r6, r0
 800d814:	460f      	mov	r7, r1
 800d816:	dc0c      	bgt.n	800d832 <__ieee754_rem_pio2+0x1a2>
 800d818:	4b6a      	ldr	r3, [pc, #424]	@ (800d9c4 <__ieee754_rem_pio2+0x334>)
 800d81a:	1e6a      	subs	r2, r5, #1
 800d81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d820:	4543      	cmp	r3, r8
 800d822:	d006      	beq.n	800d832 <__ieee754_rem_pio2+0x1a2>
 800d824:	4632      	mov	r2, r6
 800d826:	463b      	mov	r3, r7
 800d828:	4650      	mov	r0, sl
 800d82a:	4659      	mov	r1, fp
 800d82c:	f7f2 fcd0 	bl	80001d0 <__aeabi_dsub>
 800d830:	e00e      	b.n	800d850 <__ieee754_rem_pio2+0x1c0>
 800d832:	463b      	mov	r3, r7
 800d834:	4632      	mov	r2, r6
 800d836:	4650      	mov	r0, sl
 800d838:	4659      	mov	r1, fp
 800d83a:	f7f2 fcc9 	bl	80001d0 <__aeabi_dsub>
 800d83e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d842:	9305      	str	r3, [sp, #20]
 800d844:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d848:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d84c:	2b10      	cmp	r3, #16
 800d84e:	dc02      	bgt.n	800d856 <__ieee754_rem_pio2+0x1c6>
 800d850:	e9c4 0100 	strd	r0, r1, [r4]
 800d854:	e039      	b.n	800d8ca <__ieee754_rem_pio2+0x23a>
 800d856:	a34c      	add	r3, pc, #304	@ (adr r3, 800d988 <__ieee754_rem_pio2+0x2f8>)
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d860:	f7f2 fe6e 	bl	8000540 <__aeabi_dmul>
 800d864:	4606      	mov	r6, r0
 800d866:	460f      	mov	r7, r1
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	4650      	mov	r0, sl
 800d86e:	4659      	mov	r1, fp
 800d870:	f7f2 fcae 	bl	80001d0 <__aeabi_dsub>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	4680      	mov	r8, r0
 800d87a:	4689      	mov	r9, r1
 800d87c:	4650      	mov	r0, sl
 800d87e:	4659      	mov	r1, fp
 800d880:	f7f2 fca6 	bl	80001d0 <__aeabi_dsub>
 800d884:	4632      	mov	r2, r6
 800d886:	463b      	mov	r3, r7
 800d888:	f7f2 fca2 	bl	80001d0 <__aeabi_dsub>
 800d88c:	a340      	add	r3, pc, #256	@ (adr r3, 800d990 <__ieee754_rem_pio2+0x300>)
 800d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d892:	4606      	mov	r6, r0
 800d894:	460f      	mov	r7, r1
 800d896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d89a:	f7f2 fe51 	bl	8000540 <__aeabi_dmul>
 800d89e:	4632      	mov	r2, r6
 800d8a0:	463b      	mov	r3, r7
 800d8a2:	f7f2 fc95 	bl	80001d0 <__aeabi_dsub>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	460f      	mov	r7, r1
 800d8ae:	4640      	mov	r0, r8
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	f7f2 fc8d 	bl	80001d0 <__aeabi_dsub>
 800d8b6:	9a05      	ldr	r2, [sp, #20]
 800d8b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	2b31      	cmp	r3, #49	@ 0x31
 800d8c0:	dc20      	bgt.n	800d904 <__ieee754_rem_pio2+0x274>
 800d8c2:	e9c4 0100 	strd	r0, r1, [r4]
 800d8c6:	46c2      	mov	sl, r8
 800d8c8:	46cb      	mov	fp, r9
 800d8ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d8ce:	4650      	mov	r0, sl
 800d8d0:	4642      	mov	r2, r8
 800d8d2:	464b      	mov	r3, r9
 800d8d4:	4659      	mov	r1, fp
 800d8d6:	f7f2 fc7b 	bl	80001d0 <__aeabi_dsub>
 800d8da:	463b      	mov	r3, r7
 800d8dc:	4632      	mov	r2, r6
 800d8de:	f7f2 fc77 	bl	80001d0 <__aeabi_dsub>
 800d8e2:	9b04      	ldr	r3, [sp, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d8ea:	f6bf af0e 	bge.w	800d70a <__ieee754_rem_pio2+0x7a>
 800d8ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d8f2:	6063      	str	r3, [r4, #4]
 800d8f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d8f8:	f8c4 8000 	str.w	r8, [r4]
 800d8fc:	60a0      	str	r0, [r4, #8]
 800d8fe:	60e3      	str	r3, [r4, #12]
 800d900:	426d      	negs	r5, r5
 800d902:	e702      	b.n	800d70a <__ieee754_rem_pio2+0x7a>
 800d904:	a326      	add	r3, pc, #152	@ (adr r3, 800d9a0 <__ieee754_rem_pio2+0x310>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d90e:	f7f2 fe17 	bl	8000540 <__aeabi_dmul>
 800d912:	4606      	mov	r6, r0
 800d914:	460f      	mov	r7, r1
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4640      	mov	r0, r8
 800d91c:	4649      	mov	r1, r9
 800d91e:	f7f2 fc57 	bl	80001d0 <__aeabi_dsub>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	4682      	mov	sl, r0
 800d928:	468b      	mov	fp, r1
 800d92a:	4640      	mov	r0, r8
 800d92c:	4649      	mov	r1, r9
 800d92e:	f7f2 fc4f 	bl	80001d0 <__aeabi_dsub>
 800d932:	4632      	mov	r2, r6
 800d934:	463b      	mov	r3, r7
 800d936:	f7f2 fc4b 	bl	80001d0 <__aeabi_dsub>
 800d93a:	a31b      	add	r3, pc, #108	@ (adr r3, 800d9a8 <__ieee754_rem_pio2+0x318>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	4606      	mov	r6, r0
 800d942:	460f      	mov	r7, r1
 800d944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d948:	f7f2 fdfa 	bl	8000540 <__aeabi_dmul>
 800d94c:	4632      	mov	r2, r6
 800d94e:	463b      	mov	r3, r7
 800d950:	f7f2 fc3e 	bl	80001d0 <__aeabi_dsub>
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	e764      	b.n	800d824 <__ieee754_rem_pio2+0x194>
 800d95a:	4b1b      	ldr	r3, [pc, #108]	@ (800d9c8 <__ieee754_rem_pio2+0x338>)
 800d95c:	4598      	cmp	r8, r3
 800d95e:	d935      	bls.n	800d9cc <__ieee754_rem_pio2+0x33c>
 800d960:	4632      	mov	r2, r6
 800d962:	463b      	mov	r3, r7
 800d964:	4630      	mov	r0, r6
 800d966:	4639      	mov	r1, r7
 800d968:	f7f2 fc32 	bl	80001d0 <__aeabi_dsub>
 800d96c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d970:	e9c4 0100 	strd	r0, r1, [r4]
 800d974:	e69e      	b.n	800d6b4 <__ieee754_rem_pio2+0x24>
 800d976:	bf00      	nop
 800d978:	54400000 	.word	0x54400000
 800d97c:	3ff921fb 	.word	0x3ff921fb
 800d980:	1a626331 	.word	0x1a626331
 800d984:	3dd0b461 	.word	0x3dd0b461
 800d988:	1a600000 	.word	0x1a600000
 800d98c:	3dd0b461 	.word	0x3dd0b461
 800d990:	2e037073 	.word	0x2e037073
 800d994:	3ba3198a 	.word	0x3ba3198a
 800d998:	6dc9c883 	.word	0x6dc9c883
 800d99c:	3fe45f30 	.word	0x3fe45f30
 800d9a0:	2e000000 	.word	0x2e000000
 800d9a4:	3ba3198a 	.word	0x3ba3198a
 800d9a8:	252049c1 	.word	0x252049c1
 800d9ac:	397b839a 	.word	0x397b839a
 800d9b0:	3fe921fb 	.word	0x3fe921fb
 800d9b4:	4002d97b 	.word	0x4002d97b
 800d9b8:	3ff921fb 	.word	0x3ff921fb
 800d9bc:	413921fb 	.word	0x413921fb
 800d9c0:	3fe00000 	.word	0x3fe00000
 800d9c4:	0800e750 	.word	0x0800e750
 800d9c8:	7fefffff 	.word	0x7fefffff
 800d9cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d9d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d9d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d9d8:	4630      	mov	r0, r6
 800d9da:	460f      	mov	r7, r1
 800d9dc:	f7f3 f860 	bl	8000aa0 <__aeabi_d2iz>
 800d9e0:	f7f2 fd44 	bl	800046c <__aeabi_i2d>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d9f0:	f7f2 fbee 	bl	80001d0 <__aeabi_dsub>
 800d9f4:	4b22      	ldr	r3, [pc, #136]	@ (800da80 <__ieee754_rem_pio2+0x3f0>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f7f2 fda2 	bl	8000540 <__aeabi_dmul>
 800d9fc:	460f      	mov	r7, r1
 800d9fe:	4606      	mov	r6, r0
 800da00:	f7f3 f84e 	bl	8000aa0 <__aeabi_d2iz>
 800da04:	f7f2 fd32 	bl	800046c <__aeabi_i2d>
 800da08:	4602      	mov	r2, r0
 800da0a:	460b      	mov	r3, r1
 800da0c:	4630      	mov	r0, r6
 800da0e:	4639      	mov	r1, r7
 800da10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800da14:	f7f2 fbdc 	bl	80001d0 <__aeabi_dsub>
 800da18:	4b19      	ldr	r3, [pc, #100]	@ (800da80 <__ieee754_rem_pio2+0x3f0>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	f7f2 fd90 	bl	8000540 <__aeabi_dmul>
 800da20:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800da24:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800da28:	f04f 0803 	mov.w	r8, #3
 800da2c:	2600      	movs	r6, #0
 800da2e:	2700      	movs	r7, #0
 800da30:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800da34:	4632      	mov	r2, r6
 800da36:	463b      	mov	r3, r7
 800da38:	46c2      	mov	sl, r8
 800da3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800da3e:	f7f2 ffe7 	bl	8000a10 <__aeabi_dcmpeq>
 800da42:	2800      	cmp	r0, #0
 800da44:	d1f4      	bne.n	800da30 <__ieee754_rem_pio2+0x3a0>
 800da46:	4b0f      	ldr	r3, [pc, #60]	@ (800da84 <__ieee754_rem_pio2+0x3f4>)
 800da48:	9301      	str	r3, [sp, #4]
 800da4a:	2302      	movs	r3, #2
 800da4c:	9300      	str	r3, [sp, #0]
 800da4e:	462a      	mov	r2, r5
 800da50:	4653      	mov	r3, sl
 800da52:	4621      	mov	r1, r4
 800da54:	a806      	add	r0, sp, #24
 800da56:	f000 f9b7 	bl	800ddc8 <__kernel_rem_pio2>
 800da5a:	9b04      	ldr	r3, [sp, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	4605      	mov	r5, r0
 800da60:	f6bf ae53 	bge.w	800d70a <__ieee754_rem_pio2+0x7a>
 800da64:	e9d4 2100 	ldrd	r2, r1, [r4]
 800da68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da6c:	e9c4 2300 	strd	r2, r3, [r4]
 800da70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800da74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da78:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800da7c:	e740      	b.n	800d900 <__ieee754_rem_pio2+0x270>
 800da7e:	bf00      	nop
 800da80:	41700000 	.word	0x41700000
 800da84:	0800e7d0 	.word	0x0800e7d0

0800da88 <atan>:
 800da88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	ec55 4b10 	vmov	r4, r5, d0
 800da90:	4bbf      	ldr	r3, [pc, #764]	@ (800dd90 <atan+0x308>)
 800da92:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800da96:	429e      	cmp	r6, r3
 800da98:	46ab      	mov	fp, r5
 800da9a:	d918      	bls.n	800dace <atan+0x46>
 800da9c:	4bbd      	ldr	r3, [pc, #756]	@ (800dd94 <atan+0x30c>)
 800da9e:	429e      	cmp	r6, r3
 800daa0:	d801      	bhi.n	800daa6 <atan+0x1e>
 800daa2:	d109      	bne.n	800dab8 <atan+0x30>
 800daa4:	b144      	cbz	r4, 800dab8 <atan+0x30>
 800daa6:	4622      	mov	r2, r4
 800daa8:	462b      	mov	r3, r5
 800daaa:	4620      	mov	r0, r4
 800daac:	4629      	mov	r1, r5
 800daae:	f7f2 fb91 	bl	80001d4 <__adddf3>
 800dab2:	4604      	mov	r4, r0
 800dab4:	460d      	mov	r5, r1
 800dab6:	e006      	b.n	800dac6 <atan+0x3e>
 800dab8:	f1bb 0f00 	cmp.w	fp, #0
 800dabc:	f340 812b 	ble.w	800dd16 <atan+0x28e>
 800dac0:	a597      	add	r5, pc, #604	@ (adr r5, 800dd20 <atan+0x298>)
 800dac2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dac6:	ec45 4b10 	vmov	d0, r4, r5
 800daca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	4bb2      	ldr	r3, [pc, #712]	@ (800dd98 <atan+0x310>)
 800dad0:	429e      	cmp	r6, r3
 800dad2:	d813      	bhi.n	800dafc <atan+0x74>
 800dad4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800dad8:	429e      	cmp	r6, r3
 800dada:	d80c      	bhi.n	800daf6 <atan+0x6e>
 800dadc:	a392      	add	r3, pc, #584	@ (adr r3, 800dd28 <atan+0x2a0>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	4620      	mov	r0, r4
 800dae4:	4629      	mov	r1, r5
 800dae6:	f7f2 fb75 	bl	80001d4 <__adddf3>
 800daea:	4bac      	ldr	r3, [pc, #688]	@ (800dd9c <atan+0x314>)
 800daec:	2200      	movs	r2, #0
 800daee:	f7f2 ffb7 	bl	8000a60 <__aeabi_dcmpgt>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d1e7      	bne.n	800dac6 <atan+0x3e>
 800daf6:	f04f 3aff 	mov.w	sl, #4294967295
 800dafa:	e029      	b.n	800db50 <atan+0xc8>
 800dafc:	f000 f95c 	bl	800ddb8 <fabs>
 800db00:	4ba7      	ldr	r3, [pc, #668]	@ (800dda0 <atan+0x318>)
 800db02:	429e      	cmp	r6, r3
 800db04:	ec55 4b10 	vmov	r4, r5, d0
 800db08:	f200 80bc 	bhi.w	800dc84 <atan+0x1fc>
 800db0c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800db10:	429e      	cmp	r6, r3
 800db12:	f200 809e 	bhi.w	800dc52 <atan+0x1ca>
 800db16:	4622      	mov	r2, r4
 800db18:	462b      	mov	r3, r5
 800db1a:	4620      	mov	r0, r4
 800db1c:	4629      	mov	r1, r5
 800db1e:	f7f2 fb59 	bl	80001d4 <__adddf3>
 800db22:	4b9e      	ldr	r3, [pc, #632]	@ (800dd9c <atan+0x314>)
 800db24:	2200      	movs	r2, #0
 800db26:	f7f2 fb53 	bl	80001d0 <__aeabi_dsub>
 800db2a:	2200      	movs	r2, #0
 800db2c:	4606      	mov	r6, r0
 800db2e:	460f      	mov	r7, r1
 800db30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800db34:	4620      	mov	r0, r4
 800db36:	4629      	mov	r1, r5
 800db38:	f7f2 fb4c 	bl	80001d4 <__adddf3>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 fe26 	bl	8000794 <__aeabi_ddiv>
 800db48:	f04f 0a00 	mov.w	sl, #0
 800db4c:	4604      	mov	r4, r0
 800db4e:	460d      	mov	r5, r1
 800db50:	4622      	mov	r2, r4
 800db52:	462b      	mov	r3, r5
 800db54:	4620      	mov	r0, r4
 800db56:	4629      	mov	r1, r5
 800db58:	f7f2 fcf2 	bl	8000540 <__aeabi_dmul>
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	4680      	mov	r8, r0
 800db62:	4689      	mov	r9, r1
 800db64:	f7f2 fcec 	bl	8000540 <__aeabi_dmul>
 800db68:	a371      	add	r3, pc, #452	@ (adr r3, 800dd30 <atan+0x2a8>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	4606      	mov	r6, r0
 800db70:	460f      	mov	r7, r1
 800db72:	f7f2 fce5 	bl	8000540 <__aeabi_dmul>
 800db76:	a370      	add	r3, pc, #448	@ (adr r3, 800dd38 <atan+0x2b0>)
 800db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7c:	f7f2 fb2a 	bl	80001d4 <__adddf3>
 800db80:	4632      	mov	r2, r6
 800db82:	463b      	mov	r3, r7
 800db84:	f7f2 fcdc 	bl	8000540 <__aeabi_dmul>
 800db88:	a36d      	add	r3, pc, #436	@ (adr r3, 800dd40 <atan+0x2b8>)
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	f7f2 fb21 	bl	80001d4 <__adddf3>
 800db92:	4632      	mov	r2, r6
 800db94:	463b      	mov	r3, r7
 800db96:	f7f2 fcd3 	bl	8000540 <__aeabi_dmul>
 800db9a:	a36b      	add	r3, pc, #428	@ (adr r3, 800dd48 <atan+0x2c0>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	f7f2 fb18 	bl	80001d4 <__adddf3>
 800dba4:	4632      	mov	r2, r6
 800dba6:	463b      	mov	r3, r7
 800dba8:	f7f2 fcca 	bl	8000540 <__aeabi_dmul>
 800dbac:	a368      	add	r3, pc, #416	@ (adr r3, 800dd50 <atan+0x2c8>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fb0f 	bl	80001d4 <__adddf3>
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	463b      	mov	r3, r7
 800dbba:	f7f2 fcc1 	bl	8000540 <__aeabi_dmul>
 800dbbe:	a366      	add	r3, pc, #408	@ (adr r3, 800dd58 <atan+0x2d0>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7f2 fb06 	bl	80001d4 <__adddf3>
 800dbc8:	4642      	mov	r2, r8
 800dbca:	464b      	mov	r3, r9
 800dbcc:	f7f2 fcb8 	bl	8000540 <__aeabi_dmul>
 800dbd0:	a363      	add	r3, pc, #396	@ (adr r3, 800dd60 <atan+0x2d8>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	4680      	mov	r8, r0
 800dbd8:	4689      	mov	r9, r1
 800dbda:	4630      	mov	r0, r6
 800dbdc:	4639      	mov	r1, r7
 800dbde:	f7f2 fcaf 	bl	8000540 <__aeabi_dmul>
 800dbe2:	a361      	add	r3, pc, #388	@ (adr r3, 800dd68 <atan+0x2e0>)
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	f7f2 faf2 	bl	80001d0 <__aeabi_dsub>
 800dbec:	4632      	mov	r2, r6
 800dbee:	463b      	mov	r3, r7
 800dbf0:	f7f2 fca6 	bl	8000540 <__aeabi_dmul>
 800dbf4:	a35e      	add	r3, pc, #376	@ (adr r3, 800dd70 <atan+0x2e8>)
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	f7f2 fae9 	bl	80001d0 <__aeabi_dsub>
 800dbfe:	4632      	mov	r2, r6
 800dc00:	463b      	mov	r3, r7
 800dc02:	f7f2 fc9d 	bl	8000540 <__aeabi_dmul>
 800dc06:	a35c      	add	r3, pc, #368	@ (adr r3, 800dd78 <atan+0x2f0>)
 800dc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0c:	f7f2 fae0 	bl	80001d0 <__aeabi_dsub>
 800dc10:	4632      	mov	r2, r6
 800dc12:	463b      	mov	r3, r7
 800dc14:	f7f2 fc94 	bl	8000540 <__aeabi_dmul>
 800dc18:	a359      	add	r3, pc, #356	@ (adr r3, 800dd80 <atan+0x2f8>)
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	f7f2 fad7 	bl	80001d0 <__aeabi_dsub>
 800dc22:	4632      	mov	r2, r6
 800dc24:	463b      	mov	r3, r7
 800dc26:	f7f2 fc8b 	bl	8000540 <__aeabi_dmul>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4640      	mov	r0, r8
 800dc30:	4649      	mov	r1, r9
 800dc32:	f7f2 facf 	bl	80001d4 <__adddf3>
 800dc36:	4622      	mov	r2, r4
 800dc38:	462b      	mov	r3, r5
 800dc3a:	f7f2 fc81 	bl	8000540 <__aeabi_dmul>
 800dc3e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dc42:	4602      	mov	r2, r0
 800dc44:	460b      	mov	r3, r1
 800dc46:	d148      	bne.n	800dcda <atan+0x252>
 800dc48:	4620      	mov	r0, r4
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	f7f2 fac0 	bl	80001d0 <__aeabi_dsub>
 800dc50:	e72f      	b.n	800dab2 <atan+0x2a>
 800dc52:	4b52      	ldr	r3, [pc, #328]	@ (800dd9c <atan+0x314>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	4620      	mov	r0, r4
 800dc58:	4629      	mov	r1, r5
 800dc5a:	f7f2 fab9 	bl	80001d0 <__aeabi_dsub>
 800dc5e:	4b4f      	ldr	r3, [pc, #316]	@ (800dd9c <atan+0x314>)
 800dc60:	4606      	mov	r6, r0
 800dc62:	460f      	mov	r7, r1
 800dc64:	2200      	movs	r2, #0
 800dc66:	4620      	mov	r0, r4
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7f2 fab3 	bl	80001d4 <__adddf3>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4630      	mov	r0, r6
 800dc74:	4639      	mov	r1, r7
 800dc76:	f7f2 fd8d 	bl	8000794 <__aeabi_ddiv>
 800dc7a:	f04f 0a01 	mov.w	sl, #1
 800dc7e:	4604      	mov	r4, r0
 800dc80:	460d      	mov	r5, r1
 800dc82:	e765      	b.n	800db50 <atan+0xc8>
 800dc84:	4b47      	ldr	r3, [pc, #284]	@ (800dda4 <atan+0x31c>)
 800dc86:	429e      	cmp	r6, r3
 800dc88:	d21c      	bcs.n	800dcc4 <atan+0x23c>
 800dc8a:	4b47      	ldr	r3, [pc, #284]	@ (800dda8 <atan+0x320>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 fa9d 	bl	80001d0 <__aeabi_dsub>
 800dc96:	4b44      	ldr	r3, [pc, #272]	@ (800dda8 <atan+0x320>)
 800dc98:	4606      	mov	r6, r0
 800dc9a:	460f      	mov	r7, r1
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	4620      	mov	r0, r4
 800dca0:	4629      	mov	r1, r5
 800dca2:	f7f2 fc4d 	bl	8000540 <__aeabi_dmul>
 800dca6:	4b3d      	ldr	r3, [pc, #244]	@ (800dd9c <atan+0x314>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f7f2 fa93 	bl	80001d4 <__adddf3>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	f7f2 fd6d 	bl	8000794 <__aeabi_ddiv>
 800dcba:	f04f 0a02 	mov.w	sl, #2
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	e745      	b.n	800db50 <atan+0xc8>
 800dcc4:	4622      	mov	r2, r4
 800dcc6:	462b      	mov	r3, r5
 800dcc8:	4938      	ldr	r1, [pc, #224]	@ (800ddac <atan+0x324>)
 800dcca:	2000      	movs	r0, #0
 800dccc:	f7f2 fd62 	bl	8000794 <__aeabi_ddiv>
 800dcd0:	f04f 0a03 	mov.w	sl, #3
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	460d      	mov	r5, r1
 800dcd8:	e73a      	b.n	800db50 <atan+0xc8>
 800dcda:	4b35      	ldr	r3, [pc, #212]	@ (800ddb0 <atan+0x328>)
 800dcdc:	4e35      	ldr	r6, [pc, #212]	@ (800ddb4 <atan+0x32c>)
 800dcde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce6:	f7f2 fa73 	bl	80001d0 <__aeabi_dsub>
 800dcea:	4622      	mov	r2, r4
 800dcec:	462b      	mov	r3, r5
 800dcee:	f7f2 fa6f 	bl	80001d0 <__aeabi_dsub>
 800dcf2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dcfe:	f7f2 fa67 	bl	80001d0 <__aeabi_dsub>
 800dd02:	f1bb 0f00 	cmp.w	fp, #0
 800dd06:	4604      	mov	r4, r0
 800dd08:	460d      	mov	r5, r1
 800dd0a:	f6bf aedc 	bge.w	800dac6 <atan+0x3e>
 800dd0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd12:	461d      	mov	r5, r3
 800dd14:	e6d7      	b.n	800dac6 <atan+0x3e>
 800dd16:	a51c      	add	r5, pc, #112	@ (adr r5, 800dd88 <atan+0x300>)
 800dd18:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd1c:	e6d3      	b.n	800dac6 <atan+0x3e>
 800dd1e:	bf00      	nop
 800dd20:	54442d18 	.word	0x54442d18
 800dd24:	3ff921fb 	.word	0x3ff921fb
 800dd28:	8800759c 	.word	0x8800759c
 800dd2c:	7e37e43c 	.word	0x7e37e43c
 800dd30:	e322da11 	.word	0xe322da11
 800dd34:	3f90ad3a 	.word	0x3f90ad3a
 800dd38:	24760deb 	.word	0x24760deb
 800dd3c:	3fa97b4b 	.word	0x3fa97b4b
 800dd40:	a0d03d51 	.word	0xa0d03d51
 800dd44:	3fb10d66 	.word	0x3fb10d66
 800dd48:	c54c206e 	.word	0xc54c206e
 800dd4c:	3fb745cd 	.word	0x3fb745cd
 800dd50:	920083ff 	.word	0x920083ff
 800dd54:	3fc24924 	.word	0x3fc24924
 800dd58:	5555550d 	.word	0x5555550d
 800dd5c:	3fd55555 	.word	0x3fd55555
 800dd60:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd64:	bfa2b444 	.word	0xbfa2b444
 800dd68:	52defd9a 	.word	0x52defd9a
 800dd6c:	3fadde2d 	.word	0x3fadde2d
 800dd70:	af749a6d 	.word	0xaf749a6d
 800dd74:	3fb3b0f2 	.word	0x3fb3b0f2
 800dd78:	fe231671 	.word	0xfe231671
 800dd7c:	3fbc71c6 	.word	0x3fbc71c6
 800dd80:	9998ebc4 	.word	0x9998ebc4
 800dd84:	3fc99999 	.word	0x3fc99999
 800dd88:	54442d18 	.word	0x54442d18
 800dd8c:	bff921fb 	.word	0xbff921fb
 800dd90:	440fffff 	.word	0x440fffff
 800dd94:	7ff00000 	.word	0x7ff00000
 800dd98:	3fdbffff 	.word	0x3fdbffff
 800dd9c:	3ff00000 	.word	0x3ff00000
 800dda0:	3ff2ffff 	.word	0x3ff2ffff
 800dda4:	40038000 	.word	0x40038000
 800dda8:	3ff80000 	.word	0x3ff80000
 800ddac:	bff00000 	.word	0xbff00000
 800ddb0:	0800e8d8 	.word	0x0800e8d8
 800ddb4:	0800e8f8 	.word	0x0800e8f8

0800ddb8 <fabs>:
 800ddb8:	ec51 0b10 	vmov	r0, r1, d0
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ddc2:	ec43 2b10 	vmov	d0, r2, r3
 800ddc6:	4770      	bx	lr

0800ddc8 <__kernel_rem_pio2>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	ed2d 8b02 	vpush	{d8}
 800ddd0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ddd4:	f112 0f14 	cmn.w	r2, #20
 800ddd8:	9306      	str	r3, [sp, #24]
 800ddda:	9104      	str	r1, [sp, #16]
 800dddc:	4bbe      	ldr	r3, [pc, #760]	@ (800e0d8 <__kernel_rem_pio2+0x310>)
 800ddde:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800dde0:	9008      	str	r0, [sp, #32]
 800dde2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	9b06      	ldr	r3, [sp, #24]
 800ddea:	f103 33ff 	add.w	r3, r3, #4294967295
 800ddee:	bfa8      	it	ge
 800ddf0:	1ed4      	subge	r4, r2, #3
 800ddf2:	9305      	str	r3, [sp, #20]
 800ddf4:	bfb2      	itee	lt
 800ddf6:	2400      	movlt	r4, #0
 800ddf8:	2318      	movge	r3, #24
 800ddfa:	fb94 f4f3 	sdivge	r4, r4, r3
 800ddfe:	f06f 0317 	mvn.w	r3, #23
 800de02:	fb04 3303 	mla	r3, r4, r3, r3
 800de06:	eb03 0b02 	add.w	fp, r3, r2
 800de0a:	9b00      	ldr	r3, [sp, #0]
 800de0c:	9a05      	ldr	r2, [sp, #20]
 800de0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e0c8 <__kernel_rem_pio2+0x300>
 800de12:	eb03 0802 	add.w	r8, r3, r2
 800de16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800de18:	1aa7      	subs	r7, r4, r2
 800de1a:	ae20      	add	r6, sp, #128	@ 0x80
 800de1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800de20:	2500      	movs	r5, #0
 800de22:	4545      	cmp	r5, r8
 800de24:	dd13      	ble.n	800de4e <__kernel_rem_pio2+0x86>
 800de26:	9b06      	ldr	r3, [sp, #24]
 800de28:	aa20      	add	r2, sp, #128	@ 0x80
 800de2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800de2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800de32:	f04f 0800 	mov.w	r8, #0
 800de36:	9b00      	ldr	r3, [sp, #0]
 800de38:	4598      	cmp	r8, r3
 800de3a:	dc31      	bgt.n	800dea0 <__kernel_rem_pio2+0xd8>
 800de3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e0c8 <__kernel_rem_pio2+0x300>
 800de40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de48:	462f      	mov	r7, r5
 800de4a:	2600      	movs	r6, #0
 800de4c:	e01b      	b.n	800de86 <__kernel_rem_pio2+0xbe>
 800de4e:	42ef      	cmn	r7, r5
 800de50:	d407      	bmi.n	800de62 <__kernel_rem_pio2+0x9a>
 800de52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800de56:	f7f2 fb09 	bl	800046c <__aeabi_i2d>
 800de5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800de5e:	3501      	adds	r5, #1
 800de60:	e7df      	b.n	800de22 <__kernel_rem_pio2+0x5a>
 800de62:	ec51 0b18 	vmov	r0, r1, d8
 800de66:	e7f8      	b.n	800de5a <__kernel_rem_pio2+0x92>
 800de68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800de70:	f7f2 fb66 	bl	8000540 <__aeabi_dmul>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de7c:	f7f2 f9aa 	bl	80001d4 <__adddf3>
 800de80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de84:	3601      	adds	r6, #1
 800de86:	9b05      	ldr	r3, [sp, #20]
 800de88:	429e      	cmp	r6, r3
 800de8a:	f1a7 0708 	sub.w	r7, r7, #8
 800de8e:	ddeb      	ble.n	800de68 <__kernel_rem_pio2+0xa0>
 800de90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de94:	f108 0801 	add.w	r8, r8, #1
 800de98:	ecaa 7b02 	vstmia	sl!, {d7}
 800de9c:	3508      	adds	r5, #8
 800de9e:	e7ca      	b.n	800de36 <__kernel_rem_pio2+0x6e>
 800dea0:	9b00      	ldr	r3, [sp, #0]
 800dea2:	f8dd 8000 	ldr.w	r8, [sp]
 800dea6:	aa0c      	add	r2, sp, #48	@ 0x30
 800dea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800deac:	930a      	str	r3, [sp, #40]	@ 0x28
 800deae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800deb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800deb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800deba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800debc:	ab98      	add	r3, sp, #608	@ 0x260
 800debe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dec2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800dec6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800deca:	ac0c      	add	r4, sp, #48	@ 0x30
 800decc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dece:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ded2:	46a1      	mov	r9, r4
 800ded4:	46c2      	mov	sl, r8
 800ded6:	f1ba 0f00 	cmp.w	sl, #0
 800deda:	f1a5 0508 	sub.w	r5, r5, #8
 800dede:	dc77      	bgt.n	800dfd0 <__kernel_rem_pio2+0x208>
 800dee0:	4658      	mov	r0, fp
 800dee2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800dee6:	f000 fac7 	bl	800e478 <scalbn>
 800deea:	ec57 6b10 	vmov	r6, r7, d0
 800deee:	2200      	movs	r2, #0
 800def0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800def4:	4630      	mov	r0, r6
 800def6:	4639      	mov	r1, r7
 800def8:	f7f2 fb22 	bl	8000540 <__aeabi_dmul>
 800defc:	ec41 0b10 	vmov	d0, r0, r1
 800df00:	f000 fb3a 	bl	800e578 <floor>
 800df04:	4b75      	ldr	r3, [pc, #468]	@ (800e0dc <__kernel_rem_pio2+0x314>)
 800df06:	ec51 0b10 	vmov	r0, r1, d0
 800df0a:	2200      	movs	r2, #0
 800df0c:	f7f2 fb18 	bl	8000540 <__aeabi_dmul>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	4630      	mov	r0, r6
 800df16:	4639      	mov	r1, r7
 800df18:	f7f2 f95a 	bl	80001d0 <__aeabi_dsub>
 800df1c:	460f      	mov	r7, r1
 800df1e:	4606      	mov	r6, r0
 800df20:	f7f2 fdbe 	bl	8000aa0 <__aeabi_d2iz>
 800df24:	9002      	str	r0, [sp, #8]
 800df26:	f7f2 faa1 	bl	800046c <__aeabi_i2d>
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	4630      	mov	r0, r6
 800df30:	4639      	mov	r1, r7
 800df32:	f7f2 f94d 	bl	80001d0 <__aeabi_dsub>
 800df36:	f1bb 0f00 	cmp.w	fp, #0
 800df3a:	4606      	mov	r6, r0
 800df3c:	460f      	mov	r7, r1
 800df3e:	dd6c      	ble.n	800e01a <__kernel_rem_pio2+0x252>
 800df40:	f108 31ff 	add.w	r1, r8, #4294967295
 800df44:	ab0c      	add	r3, sp, #48	@ 0x30
 800df46:	9d02      	ldr	r5, [sp, #8]
 800df48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df4c:	f1cb 0018 	rsb	r0, fp, #24
 800df50:	fa43 f200 	asr.w	r2, r3, r0
 800df54:	4415      	add	r5, r2
 800df56:	4082      	lsls	r2, r0
 800df58:	1a9b      	subs	r3, r3, r2
 800df5a:	aa0c      	add	r2, sp, #48	@ 0x30
 800df5c:	9502      	str	r5, [sp, #8]
 800df5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800df62:	f1cb 0217 	rsb	r2, fp, #23
 800df66:	fa43 f902 	asr.w	r9, r3, r2
 800df6a:	f1b9 0f00 	cmp.w	r9, #0
 800df6e:	dd64      	ble.n	800e03a <__kernel_rem_pio2+0x272>
 800df70:	9b02      	ldr	r3, [sp, #8]
 800df72:	2200      	movs	r2, #0
 800df74:	3301      	adds	r3, #1
 800df76:	9302      	str	r3, [sp, #8]
 800df78:	4615      	mov	r5, r2
 800df7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800df7e:	4590      	cmp	r8, r2
 800df80:	f300 80b8 	bgt.w	800e0f4 <__kernel_rem_pio2+0x32c>
 800df84:	f1bb 0f00 	cmp.w	fp, #0
 800df88:	dd07      	ble.n	800df9a <__kernel_rem_pio2+0x1d2>
 800df8a:	f1bb 0f01 	cmp.w	fp, #1
 800df8e:	f000 80bf 	beq.w	800e110 <__kernel_rem_pio2+0x348>
 800df92:	f1bb 0f02 	cmp.w	fp, #2
 800df96:	f000 80c6 	beq.w	800e126 <__kernel_rem_pio2+0x35e>
 800df9a:	f1b9 0f02 	cmp.w	r9, #2
 800df9e:	d14c      	bne.n	800e03a <__kernel_rem_pio2+0x272>
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	463b      	mov	r3, r7
 800dfa4:	494e      	ldr	r1, [pc, #312]	@ (800e0e0 <__kernel_rem_pio2+0x318>)
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	f7f2 f912 	bl	80001d0 <__aeabi_dsub>
 800dfac:	4606      	mov	r6, r0
 800dfae:	460f      	mov	r7, r1
 800dfb0:	2d00      	cmp	r5, #0
 800dfb2:	d042      	beq.n	800e03a <__kernel_rem_pio2+0x272>
 800dfb4:	4658      	mov	r0, fp
 800dfb6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e0d0 <__kernel_rem_pio2+0x308>
 800dfba:	f000 fa5d 	bl	800e478 <scalbn>
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	4639      	mov	r1, r7
 800dfc2:	ec53 2b10 	vmov	r2, r3, d0
 800dfc6:	f7f2 f903 	bl	80001d0 <__aeabi_dsub>
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460f      	mov	r7, r1
 800dfce:	e034      	b.n	800e03a <__kernel_rem_pio2+0x272>
 800dfd0:	4b44      	ldr	r3, [pc, #272]	@ (800e0e4 <__kernel_rem_pio2+0x31c>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfd8:	f7f2 fab2 	bl	8000540 <__aeabi_dmul>
 800dfdc:	f7f2 fd60 	bl	8000aa0 <__aeabi_d2iz>
 800dfe0:	f7f2 fa44 	bl	800046c <__aeabi_i2d>
 800dfe4:	4b40      	ldr	r3, [pc, #256]	@ (800e0e8 <__kernel_rem_pio2+0x320>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	4606      	mov	r6, r0
 800dfea:	460f      	mov	r7, r1
 800dfec:	f7f2 faa8 	bl	8000540 <__aeabi_dmul>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dff8:	f7f2 f8ea 	bl	80001d0 <__aeabi_dsub>
 800dffc:	f7f2 fd50 	bl	8000aa0 <__aeabi_d2iz>
 800e000:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e004:	f849 0b04 	str.w	r0, [r9], #4
 800e008:	4639      	mov	r1, r7
 800e00a:	4630      	mov	r0, r6
 800e00c:	f7f2 f8e2 	bl	80001d4 <__adddf3>
 800e010:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e018:	e75d      	b.n	800ded6 <__kernel_rem_pio2+0x10e>
 800e01a:	d107      	bne.n	800e02c <__kernel_rem_pio2+0x264>
 800e01c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e020:	aa0c      	add	r2, sp, #48	@ 0x30
 800e022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e026:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e02a:	e79e      	b.n	800df6a <__kernel_rem_pio2+0x1a2>
 800e02c:	4b2f      	ldr	r3, [pc, #188]	@ (800e0ec <__kernel_rem_pio2+0x324>)
 800e02e:	2200      	movs	r2, #0
 800e030:	f7f2 fd0c 	bl	8000a4c <__aeabi_dcmpge>
 800e034:	2800      	cmp	r0, #0
 800e036:	d143      	bne.n	800e0c0 <__kernel_rem_pio2+0x2f8>
 800e038:	4681      	mov	r9, r0
 800e03a:	2200      	movs	r2, #0
 800e03c:	2300      	movs	r3, #0
 800e03e:	4630      	mov	r0, r6
 800e040:	4639      	mov	r1, r7
 800e042:	f7f2 fce5 	bl	8000a10 <__aeabi_dcmpeq>
 800e046:	2800      	cmp	r0, #0
 800e048:	f000 80bf 	beq.w	800e1ca <__kernel_rem_pio2+0x402>
 800e04c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e050:	2200      	movs	r2, #0
 800e052:	9900      	ldr	r1, [sp, #0]
 800e054:	428b      	cmp	r3, r1
 800e056:	da6e      	bge.n	800e136 <__kernel_rem_pio2+0x36e>
 800e058:	2a00      	cmp	r2, #0
 800e05a:	f000 8089 	beq.w	800e170 <__kernel_rem_pio2+0x3a8>
 800e05e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e062:	ab0c      	add	r3, sp, #48	@ 0x30
 800e064:	f1ab 0b18 	sub.w	fp, fp, #24
 800e068:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0f6      	beq.n	800e05e <__kernel_rem_pio2+0x296>
 800e070:	4658      	mov	r0, fp
 800e072:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e0d0 <__kernel_rem_pio2+0x308>
 800e076:	f000 f9ff 	bl	800e478 <scalbn>
 800e07a:	f108 0301 	add.w	r3, r8, #1
 800e07e:	00da      	lsls	r2, r3, #3
 800e080:	9205      	str	r2, [sp, #20]
 800e082:	ec55 4b10 	vmov	r4, r5, d0
 800e086:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e088:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e0e4 <__kernel_rem_pio2+0x31c>
 800e08c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e090:	4646      	mov	r6, r8
 800e092:	f04f 0a00 	mov.w	sl, #0
 800e096:	2e00      	cmp	r6, #0
 800e098:	f280 80cf 	bge.w	800e23a <__kernel_rem_pio2+0x472>
 800e09c:	4644      	mov	r4, r8
 800e09e:	2c00      	cmp	r4, #0
 800e0a0:	f2c0 80fd 	blt.w	800e29e <__kernel_rem_pio2+0x4d6>
 800e0a4:	4b12      	ldr	r3, [pc, #72]	@ (800e0f0 <__kernel_rem_pio2+0x328>)
 800e0a6:	461f      	mov	r7, r3
 800e0a8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e0aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0ae:	9306      	str	r3, [sp, #24]
 800e0b0:	f04f 0a00 	mov.w	sl, #0
 800e0b4:	f04f 0b00 	mov.w	fp, #0
 800e0b8:	2600      	movs	r6, #0
 800e0ba:	eba8 0504 	sub.w	r5, r8, r4
 800e0be:	e0e2      	b.n	800e286 <__kernel_rem_pio2+0x4be>
 800e0c0:	f04f 0902 	mov.w	r9, #2
 800e0c4:	e754      	b.n	800df70 <__kernel_rem_pio2+0x1a8>
 800e0c6:	bf00      	nop
	...
 800e0d4:	3ff00000 	.word	0x3ff00000
 800e0d8:	0800e958 	.word	0x0800e958
 800e0dc:	40200000 	.word	0x40200000
 800e0e0:	3ff00000 	.word	0x3ff00000
 800e0e4:	3e700000 	.word	0x3e700000
 800e0e8:	41700000 	.word	0x41700000
 800e0ec:	3fe00000 	.word	0x3fe00000
 800e0f0:	0800e918 	.word	0x0800e918
 800e0f4:	f854 3b04 	ldr.w	r3, [r4], #4
 800e0f8:	b945      	cbnz	r5, 800e10c <__kernel_rem_pio2+0x344>
 800e0fa:	b123      	cbz	r3, 800e106 <__kernel_rem_pio2+0x33e>
 800e0fc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e100:	f844 3c04 	str.w	r3, [r4, #-4]
 800e104:	2301      	movs	r3, #1
 800e106:	3201      	adds	r2, #1
 800e108:	461d      	mov	r5, r3
 800e10a:	e738      	b.n	800df7e <__kernel_rem_pio2+0x1b6>
 800e10c:	1acb      	subs	r3, r1, r3
 800e10e:	e7f7      	b.n	800e100 <__kernel_rem_pio2+0x338>
 800e110:	f108 32ff 	add.w	r2, r8, #4294967295
 800e114:	ab0c      	add	r3, sp, #48	@ 0x30
 800e116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e11a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e11e:	a90c      	add	r1, sp, #48	@ 0x30
 800e120:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e124:	e739      	b.n	800df9a <__kernel_rem_pio2+0x1d2>
 800e126:	f108 32ff 	add.w	r2, r8, #4294967295
 800e12a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e130:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e134:	e7f3      	b.n	800e11e <__kernel_rem_pio2+0x356>
 800e136:	a90c      	add	r1, sp, #48	@ 0x30
 800e138:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e13c:	3b01      	subs	r3, #1
 800e13e:	430a      	orrs	r2, r1
 800e140:	e787      	b.n	800e052 <__kernel_rem_pio2+0x28a>
 800e142:	3401      	adds	r4, #1
 800e144:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e148:	2a00      	cmp	r2, #0
 800e14a:	d0fa      	beq.n	800e142 <__kernel_rem_pio2+0x37a>
 800e14c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e14e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e152:	eb0d 0503 	add.w	r5, sp, r3
 800e156:	9b06      	ldr	r3, [sp, #24]
 800e158:	aa20      	add	r2, sp, #128	@ 0x80
 800e15a:	4443      	add	r3, r8
 800e15c:	f108 0701 	add.w	r7, r8, #1
 800e160:	3d98      	subs	r5, #152	@ 0x98
 800e162:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e166:	4444      	add	r4, r8
 800e168:	42bc      	cmp	r4, r7
 800e16a:	da04      	bge.n	800e176 <__kernel_rem_pio2+0x3ae>
 800e16c:	46a0      	mov	r8, r4
 800e16e:	e6a2      	b.n	800deb6 <__kernel_rem_pio2+0xee>
 800e170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e172:	2401      	movs	r4, #1
 800e174:	e7e6      	b.n	800e144 <__kernel_rem_pio2+0x37c>
 800e176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e178:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e17c:	f7f2 f976 	bl	800046c <__aeabi_i2d>
 800e180:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e448 <__kernel_rem_pio2+0x680>
 800e184:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e18c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e190:	46b2      	mov	sl, r6
 800e192:	f04f 0800 	mov.w	r8, #0
 800e196:	9b05      	ldr	r3, [sp, #20]
 800e198:	4598      	cmp	r8, r3
 800e19a:	dd05      	ble.n	800e1a8 <__kernel_rem_pio2+0x3e0>
 800e19c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1a0:	3701      	adds	r7, #1
 800e1a2:	eca5 7b02 	vstmia	r5!, {d7}
 800e1a6:	e7df      	b.n	800e168 <__kernel_rem_pio2+0x3a0>
 800e1a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e1ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e1b0:	f7f2 f9c6 	bl	8000540 <__aeabi_dmul>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1bc:	f7f2 f80a 	bl	80001d4 <__adddf3>
 800e1c0:	f108 0801 	add.w	r8, r8, #1
 800e1c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1c8:	e7e5      	b.n	800e196 <__kernel_rem_pio2+0x3ce>
 800e1ca:	f1cb 0000 	rsb	r0, fp, #0
 800e1ce:	ec47 6b10 	vmov	d0, r6, r7
 800e1d2:	f000 f951 	bl	800e478 <scalbn>
 800e1d6:	ec55 4b10 	vmov	r4, r5, d0
 800e1da:	4b9d      	ldr	r3, [pc, #628]	@ (800e450 <__kernel_rem_pio2+0x688>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	4620      	mov	r0, r4
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	f7f2 fc33 	bl	8000a4c <__aeabi_dcmpge>
 800e1e6:	b300      	cbz	r0, 800e22a <__kernel_rem_pio2+0x462>
 800e1e8:	4b9a      	ldr	r3, [pc, #616]	@ (800e454 <__kernel_rem_pio2+0x68c>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f7f2 f9a6 	bl	8000540 <__aeabi_dmul>
 800e1f4:	f7f2 fc54 	bl	8000aa0 <__aeabi_d2iz>
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	f7f2 f937 	bl	800046c <__aeabi_i2d>
 800e1fe:	4b94      	ldr	r3, [pc, #592]	@ (800e450 <__kernel_rem_pio2+0x688>)
 800e200:	2200      	movs	r2, #0
 800e202:	f7f2 f99d 	bl	8000540 <__aeabi_dmul>
 800e206:	460b      	mov	r3, r1
 800e208:	4602      	mov	r2, r0
 800e20a:	4629      	mov	r1, r5
 800e20c:	4620      	mov	r0, r4
 800e20e:	f7f1 ffdf 	bl	80001d0 <__aeabi_dsub>
 800e212:	f7f2 fc45 	bl	8000aa0 <__aeabi_d2iz>
 800e216:	ab0c      	add	r3, sp, #48	@ 0x30
 800e218:	f10b 0b18 	add.w	fp, fp, #24
 800e21c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e220:	f108 0801 	add.w	r8, r8, #1
 800e224:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e228:	e722      	b.n	800e070 <__kernel_rem_pio2+0x2a8>
 800e22a:	4620      	mov	r0, r4
 800e22c:	4629      	mov	r1, r5
 800e22e:	f7f2 fc37 	bl	8000aa0 <__aeabi_d2iz>
 800e232:	ab0c      	add	r3, sp, #48	@ 0x30
 800e234:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e238:	e71a      	b.n	800e070 <__kernel_rem_pio2+0x2a8>
 800e23a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e23c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e240:	f7f2 f914 	bl	800046c <__aeabi_i2d>
 800e244:	4622      	mov	r2, r4
 800e246:	462b      	mov	r3, r5
 800e248:	f7f2 f97a 	bl	8000540 <__aeabi_dmul>
 800e24c:	4652      	mov	r2, sl
 800e24e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e252:	465b      	mov	r3, fp
 800e254:	4620      	mov	r0, r4
 800e256:	4629      	mov	r1, r5
 800e258:	f7f2 f972 	bl	8000540 <__aeabi_dmul>
 800e25c:	3e01      	subs	r6, #1
 800e25e:	4604      	mov	r4, r0
 800e260:	460d      	mov	r5, r1
 800e262:	e718      	b.n	800e096 <__kernel_rem_pio2+0x2ce>
 800e264:	9906      	ldr	r1, [sp, #24]
 800e266:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e26a:	9106      	str	r1, [sp, #24]
 800e26c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e270:	f7f2 f966 	bl	8000540 <__aeabi_dmul>
 800e274:	4602      	mov	r2, r0
 800e276:	460b      	mov	r3, r1
 800e278:	4650      	mov	r0, sl
 800e27a:	4659      	mov	r1, fp
 800e27c:	f7f1 ffaa 	bl	80001d4 <__adddf3>
 800e280:	3601      	adds	r6, #1
 800e282:	4682      	mov	sl, r0
 800e284:	468b      	mov	fp, r1
 800e286:	9b00      	ldr	r3, [sp, #0]
 800e288:	429e      	cmp	r6, r3
 800e28a:	dc01      	bgt.n	800e290 <__kernel_rem_pio2+0x4c8>
 800e28c:	42b5      	cmp	r5, r6
 800e28e:	dae9      	bge.n	800e264 <__kernel_rem_pio2+0x49c>
 800e290:	ab48      	add	r3, sp, #288	@ 0x120
 800e292:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e296:	e9c5 ab00 	strd	sl, fp, [r5]
 800e29a:	3c01      	subs	r4, #1
 800e29c:	e6ff      	b.n	800e09e <__kernel_rem_pio2+0x2d6>
 800e29e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	dc0b      	bgt.n	800e2bc <__kernel_rem_pio2+0x4f4>
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	dc39      	bgt.n	800e31c <__kernel_rem_pio2+0x554>
 800e2a8:	d05d      	beq.n	800e366 <__kernel_rem_pio2+0x59e>
 800e2aa:	9b02      	ldr	r3, [sp, #8]
 800e2ac:	f003 0007 	and.w	r0, r3, #7
 800e2b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e2b4:	ecbd 8b02 	vpop	{d8}
 800e2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e2be:	2b03      	cmp	r3, #3
 800e2c0:	d1f3      	bne.n	800e2aa <__kernel_rem_pio2+0x4e2>
 800e2c2:	9b05      	ldr	r3, [sp, #20]
 800e2c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e2c8:	eb0d 0403 	add.w	r4, sp, r3
 800e2cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e2d0:	4625      	mov	r5, r4
 800e2d2:	46c2      	mov	sl, r8
 800e2d4:	f1ba 0f00 	cmp.w	sl, #0
 800e2d8:	f1a5 0508 	sub.w	r5, r5, #8
 800e2dc:	dc6b      	bgt.n	800e3b6 <__kernel_rem_pio2+0x5ee>
 800e2de:	4645      	mov	r5, r8
 800e2e0:	2d01      	cmp	r5, #1
 800e2e2:	f1a4 0408 	sub.w	r4, r4, #8
 800e2e6:	f300 8087 	bgt.w	800e3f8 <__kernel_rem_pio2+0x630>
 800e2ea:	9c05      	ldr	r4, [sp, #20]
 800e2ec:	ab48      	add	r3, sp, #288	@ 0x120
 800e2ee:	441c      	add	r4, r3
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	f1b8 0f01 	cmp.w	r8, #1
 800e2f8:	f300 809c 	bgt.w	800e434 <__kernel_rem_pio2+0x66c>
 800e2fc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e300:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e304:	f1b9 0f00 	cmp.w	r9, #0
 800e308:	f040 80a6 	bne.w	800e458 <__kernel_rem_pio2+0x690>
 800e30c:	9b04      	ldr	r3, [sp, #16]
 800e30e:	e9c3 7800 	strd	r7, r8, [r3]
 800e312:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e316:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e31a:	e7c6      	b.n	800e2aa <__kernel_rem_pio2+0x4e2>
 800e31c:	9d05      	ldr	r5, [sp, #20]
 800e31e:	ab48      	add	r3, sp, #288	@ 0x120
 800e320:	441d      	add	r5, r3
 800e322:	4644      	mov	r4, r8
 800e324:	2000      	movs	r0, #0
 800e326:	2100      	movs	r1, #0
 800e328:	2c00      	cmp	r4, #0
 800e32a:	da35      	bge.n	800e398 <__kernel_rem_pio2+0x5d0>
 800e32c:	f1b9 0f00 	cmp.w	r9, #0
 800e330:	d038      	beq.n	800e3a4 <__kernel_rem_pio2+0x5dc>
 800e332:	4602      	mov	r2, r0
 800e334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e338:	9c04      	ldr	r4, [sp, #16]
 800e33a:	e9c4 2300 	strd	r2, r3, [r4]
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e346:	f7f1 ff43 	bl	80001d0 <__aeabi_dsub>
 800e34a:	ad4a      	add	r5, sp, #296	@ 0x128
 800e34c:	2401      	movs	r4, #1
 800e34e:	45a0      	cmp	r8, r4
 800e350:	da2b      	bge.n	800e3aa <__kernel_rem_pio2+0x5e2>
 800e352:	f1b9 0f00 	cmp.w	r9, #0
 800e356:	d002      	beq.n	800e35e <__kernel_rem_pio2+0x596>
 800e358:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e35c:	4619      	mov	r1, r3
 800e35e:	9b04      	ldr	r3, [sp, #16]
 800e360:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e364:	e7a1      	b.n	800e2aa <__kernel_rem_pio2+0x4e2>
 800e366:	9c05      	ldr	r4, [sp, #20]
 800e368:	ab48      	add	r3, sp, #288	@ 0x120
 800e36a:	441c      	add	r4, r3
 800e36c:	2000      	movs	r0, #0
 800e36e:	2100      	movs	r1, #0
 800e370:	f1b8 0f00 	cmp.w	r8, #0
 800e374:	da09      	bge.n	800e38a <__kernel_rem_pio2+0x5c2>
 800e376:	f1b9 0f00 	cmp.w	r9, #0
 800e37a:	d002      	beq.n	800e382 <__kernel_rem_pio2+0x5ba>
 800e37c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e380:	4619      	mov	r1, r3
 800e382:	9b04      	ldr	r3, [sp, #16]
 800e384:	e9c3 0100 	strd	r0, r1, [r3]
 800e388:	e78f      	b.n	800e2aa <__kernel_rem_pio2+0x4e2>
 800e38a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e38e:	f7f1 ff21 	bl	80001d4 <__adddf3>
 800e392:	f108 38ff 	add.w	r8, r8, #4294967295
 800e396:	e7eb      	b.n	800e370 <__kernel_rem_pio2+0x5a8>
 800e398:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e39c:	f7f1 ff1a 	bl	80001d4 <__adddf3>
 800e3a0:	3c01      	subs	r4, #1
 800e3a2:	e7c1      	b.n	800e328 <__kernel_rem_pio2+0x560>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	e7c6      	b.n	800e338 <__kernel_rem_pio2+0x570>
 800e3aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e3ae:	f7f1 ff11 	bl	80001d4 <__adddf3>
 800e3b2:	3401      	adds	r4, #1
 800e3b4:	e7cb      	b.n	800e34e <__kernel_rem_pio2+0x586>
 800e3b6:	ed95 7b00 	vldr	d7, [r5]
 800e3ba:	ed8d 7b00 	vstr	d7, [sp]
 800e3be:	ed95 7b02 	vldr	d7, [r5, #8]
 800e3c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3c6:	ec53 2b17 	vmov	r2, r3, d7
 800e3ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3ce:	f7f1 ff01 	bl	80001d4 <__adddf3>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	460f      	mov	r7, r1
 800e3da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3de:	f7f1 fef7 	bl	80001d0 <__aeabi_dsub>
 800e3e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3e6:	f7f1 fef5 	bl	80001d4 <__adddf3>
 800e3ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e3f2:	e9c5 6700 	strd	r6, r7, [r5]
 800e3f6:	e76d      	b.n	800e2d4 <__kernel_rem_pio2+0x50c>
 800e3f8:	ed94 7b00 	vldr	d7, [r4]
 800e3fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e400:	ec51 0b17 	vmov	r0, r1, d7
 800e404:	4652      	mov	r2, sl
 800e406:	465b      	mov	r3, fp
 800e408:	ed8d 7b00 	vstr	d7, [sp]
 800e40c:	f7f1 fee2 	bl	80001d4 <__adddf3>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4606      	mov	r6, r0
 800e416:	460f      	mov	r7, r1
 800e418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e41c:	f7f1 fed8 	bl	80001d0 <__aeabi_dsub>
 800e420:	4652      	mov	r2, sl
 800e422:	465b      	mov	r3, fp
 800e424:	f7f1 fed6 	bl	80001d4 <__adddf3>
 800e428:	3d01      	subs	r5, #1
 800e42a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e42e:	e9c4 6700 	strd	r6, r7, [r4]
 800e432:	e755      	b.n	800e2e0 <__kernel_rem_pio2+0x518>
 800e434:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e438:	f7f1 fecc 	bl	80001d4 <__adddf3>
 800e43c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e440:	e758      	b.n	800e2f4 <__kernel_rem_pio2+0x52c>
 800e442:	bf00      	nop
 800e444:	f3af 8000 	nop.w
	...
 800e450:	41700000 	.word	0x41700000
 800e454:	3e700000 	.word	0x3e700000
 800e458:	9b04      	ldr	r3, [sp, #16]
 800e45a:	9a04      	ldr	r2, [sp, #16]
 800e45c:	601f      	str	r7, [r3, #0]
 800e45e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e462:	605c      	str	r4, [r3, #4]
 800e464:	609d      	str	r5, [r3, #8]
 800e466:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e46a:	60d3      	str	r3, [r2, #12]
 800e46c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e470:	6110      	str	r0, [r2, #16]
 800e472:	6153      	str	r3, [r2, #20]
 800e474:	e719      	b.n	800e2aa <__kernel_rem_pio2+0x4e2>
 800e476:	bf00      	nop

0800e478 <scalbn>:
 800e478:	b570      	push	{r4, r5, r6, lr}
 800e47a:	ec55 4b10 	vmov	r4, r5, d0
 800e47e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e482:	4606      	mov	r6, r0
 800e484:	462b      	mov	r3, r5
 800e486:	b991      	cbnz	r1, 800e4ae <scalbn+0x36>
 800e488:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e48c:	4323      	orrs	r3, r4
 800e48e:	d03d      	beq.n	800e50c <scalbn+0x94>
 800e490:	4b35      	ldr	r3, [pc, #212]	@ (800e568 <scalbn+0xf0>)
 800e492:	4620      	mov	r0, r4
 800e494:	4629      	mov	r1, r5
 800e496:	2200      	movs	r2, #0
 800e498:	f7f2 f852 	bl	8000540 <__aeabi_dmul>
 800e49c:	4b33      	ldr	r3, [pc, #204]	@ (800e56c <scalbn+0xf4>)
 800e49e:	429e      	cmp	r6, r3
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	da0f      	bge.n	800e4c6 <scalbn+0x4e>
 800e4a6:	a328      	add	r3, pc, #160	@ (adr r3, 800e548 <scalbn+0xd0>)
 800e4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ac:	e01e      	b.n	800e4ec <scalbn+0x74>
 800e4ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e4b2:	4291      	cmp	r1, r2
 800e4b4:	d10b      	bne.n	800e4ce <scalbn+0x56>
 800e4b6:	4622      	mov	r2, r4
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	f7f1 fe8a 	bl	80001d4 <__adddf3>
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	e022      	b.n	800e50c <scalbn+0x94>
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e4cc:	3936      	subs	r1, #54	@ 0x36
 800e4ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e4d2:	4296      	cmp	r6, r2
 800e4d4:	dd0d      	ble.n	800e4f2 <scalbn+0x7a>
 800e4d6:	2d00      	cmp	r5, #0
 800e4d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800e550 <scalbn+0xd8>)
 800e4da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4de:	da02      	bge.n	800e4e6 <scalbn+0x6e>
 800e4e0:	a11d      	add	r1, pc, #116	@ (adr r1, 800e558 <scalbn+0xe0>)
 800e4e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4e6:	a31a      	add	r3, pc, #104	@ (adr r3, 800e550 <scalbn+0xd8>)
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	f7f2 f828 	bl	8000540 <__aeabi_dmul>
 800e4f0:	e7e6      	b.n	800e4c0 <scalbn+0x48>
 800e4f2:	1872      	adds	r2, r6, r1
 800e4f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	dcec      	bgt.n	800e4d6 <scalbn+0x5e>
 800e4fc:	2a00      	cmp	r2, #0
 800e4fe:	dd08      	ble.n	800e512 <scalbn+0x9a>
 800e500:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e504:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e508:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e50c:	ec45 4b10 	vmov	d0, r4, r5
 800e510:	bd70      	pop	{r4, r5, r6, pc}
 800e512:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e516:	da08      	bge.n	800e52a <scalbn+0xb2>
 800e518:	2d00      	cmp	r5, #0
 800e51a:	a10b      	add	r1, pc, #44	@ (adr r1, 800e548 <scalbn+0xd0>)
 800e51c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e520:	dac1      	bge.n	800e4a6 <scalbn+0x2e>
 800e522:	a10f      	add	r1, pc, #60	@ (adr r1, 800e560 <scalbn+0xe8>)
 800e524:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e528:	e7bd      	b.n	800e4a6 <scalbn+0x2e>
 800e52a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e52e:	3236      	adds	r2, #54	@ 0x36
 800e530:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e534:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e538:	4620      	mov	r0, r4
 800e53a:	4b0d      	ldr	r3, [pc, #52]	@ (800e570 <scalbn+0xf8>)
 800e53c:	4629      	mov	r1, r5
 800e53e:	2200      	movs	r2, #0
 800e540:	e7d4      	b.n	800e4ec <scalbn+0x74>
 800e542:	bf00      	nop
 800e544:	f3af 8000 	nop.w
 800e548:	c2f8f359 	.word	0xc2f8f359
 800e54c:	01a56e1f 	.word	0x01a56e1f
 800e550:	8800759c 	.word	0x8800759c
 800e554:	7e37e43c 	.word	0x7e37e43c
 800e558:	8800759c 	.word	0x8800759c
 800e55c:	fe37e43c 	.word	0xfe37e43c
 800e560:	c2f8f359 	.word	0xc2f8f359
 800e564:	81a56e1f 	.word	0x81a56e1f
 800e568:	43500000 	.word	0x43500000
 800e56c:	ffff3cb0 	.word	0xffff3cb0
 800e570:	3c900000 	.word	0x3c900000
 800e574:	00000000 	.word	0x00000000

0800e578 <floor>:
 800e578:	ec51 0b10 	vmov	r0, r1, d0
 800e57c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e584:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e588:	2e13      	cmp	r6, #19
 800e58a:	460c      	mov	r4, r1
 800e58c:	4605      	mov	r5, r0
 800e58e:	4680      	mov	r8, r0
 800e590:	dc34      	bgt.n	800e5fc <floor+0x84>
 800e592:	2e00      	cmp	r6, #0
 800e594:	da17      	bge.n	800e5c6 <floor+0x4e>
 800e596:	a332      	add	r3, pc, #200	@ (adr r3, 800e660 <floor+0xe8>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	f7f1 fe1a 	bl	80001d4 <__adddf3>
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f7f2 fa5c 	bl	8000a60 <__aeabi_dcmpgt>
 800e5a8:	b150      	cbz	r0, 800e5c0 <floor+0x48>
 800e5aa:	2c00      	cmp	r4, #0
 800e5ac:	da55      	bge.n	800e65a <floor+0xe2>
 800e5ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e5b2:	432c      	orrs	r4, r5
 800e5b4:	2500      	movs	r5, #0
 800e5b6:	42ac      	cmp	r4, r5
 800e5b8:	4c2b      	ldr	r4, [pc, #172]	@ (800e668 <floor+0xf0>)
 800e5ba:	bf08      	it	eq
 800e5bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	e023      	b.n	800e60e <floor+0x96>
 800e5c6:	4f29      	ldr	r7, [pc, #164]	@ (800e66c <floor+0xf4>)
 800e5c8:	4137      	asrs	r7, r6
 800e5ca:	ea01 0307 	and.w	r3, r1, r7
 800e5ce:	4303      	orrs	r3, r0
 800e5d0:	d01d      	beq.n	800e60e <floor+0x96>
 800e5d2:	a323      	add	r3, pc, #140	@ (adr r3, 800e660 <floor+0xe8>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f7f1 fdfc 	bl	80001d4 <__adddf3>
 800e5dc:	2200      	movs	r2, #0
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f7f2 fa3e 	bl	8000a60 <__aeabi_dcmpgt>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d0eb      	beq.n	800e5c0 <floor+0x48>
 800e5e8:	2c00      	cmp	r4, #0
 800e5ea:	bfbe      	ittt	lt
 800e5ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e5f0:	4133      	asrlt	r3, r6
 800e5f2:	18e4      	addlt	r4, r4, r3
 800e5f4:	ea24 0407 	bic.w	r4, r4, r7
 800e5f8:	2500      	movs	r5, #0
 800e5fa:	e7e1      	b.n	800e5c0 <floor+0x48>
 800e5fc:	2e33      	cmp	r6, #51	@ 0x33
 800e5fe:	dd0a      	ble.n	800e616 <floor+0x9e>
 800e600:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e604:	d103      	bne.n	800e60e <floor+0x96>
 800e606:	4602      	mov	r2, r0
 800e608:	460b      	mov	r3, r1
 800e60a:	f7f1 fde3 	bl	80001d4 <__adddf3>
 800e60e:	ec41 0b10 	vmov	d0, r0, r1
 800e612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e616:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e61a:	f04f 37ff 	mov.w	r7, #4294967295
 800e61e:	40df      	lsrs	r7, r3
 800e620:	4207      	tst	r7, r0
 800e622:	d0f4      	beq.n	800e60e <floor+0x96>
 800e624:	a30e      	add	r3, pc, #56	@ (adr r3, 800e660 <floor+0xe8>)
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	f7f1 fdd3 	bl	80001d4 <__adddf3>
 800e62e:	2200      	movs	r2, #0
 800e630:	2300      	movs	r3, #0
 800e632:	f7f2 fa15 	bl	8000a60 <__aeabi_dcmpgt>
 800e636:	2800      	cmp	r0, #0
 800e638:	d0c2      	beq.n	800e5c0 <floor+0x48>
 800e63a:	2c00      	cmp	r4, #0
 800e63c:	da0a      	bge.n	800e654 <floor+0xdc>
 800e63e:	2e14      	cmp	r6, #20
 800e640:	d101      	bne.n	800e646 <floor+0xce>
 800e642:	3401      	adds	r4, #1
 800e644:	e006      	b.n	800e654 <floor+0xdc>
 800e646:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e64a:	2301      	movs	r3, #1
 800e64c:	40b3      	lsls	r3, r6
 800e64e:	441d      	add	r5, r3
 800e650:	4545      	cmp	r5, r8
 800e652:	d3f6      	bcc.n	800e642 <floor+0xca>
 800e654:	ea25 0507 	bic.w	r5, r5, r7
 800e658:	e7b2      	b.n	800e5c0 <floor+0x48>
 800e65a:	2500      	movs	r5, #0
 800e65c:	462c      	mov	r4, r5
 800e65e:	e7af      	b.n	800e5c0 <floor+0x48>
 800e660:	8800759c 	.word	0x8800759c
 800e664:	7e37e43c 	.word	0x7e37e43c
 800e668:	bff00000 	.word	0xbff00000
 800e66c:	000fffff 	.word	0x000fffff

0800e670 <_init>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	bf00      	nop
 800e674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e676:	bc08      	pop	{r3}
 800e678:	469e      	mov	lr, r3
 800e67a:	4770      	bx	lr

0800e67c <_fini>:
 800e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67e:	bf00      	nop
 800e680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e682:	bc08      	pop	{r3}
 800e684:	469e      	mov	lr, r3
 800e686:	4770      	bx	lr
